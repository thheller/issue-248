{
"version":3,
"file":"module$node_modules$graphql$utilities$lexicographicSortSchema.js",
"lineCount":163,
"mappings":"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",
"sources":["node_modules/graphql/utilities/lexicographicSortSchema.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$lexicographicSortSchema\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\n                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   *  strict\n                                                                                                                                                                                                                                                                   */\n\nexports.lexicographicSortSchema = lexicographicSortSchema;\n\nvar _keyValMap = require('../jsutils/keyValMap');\n\nvar _keyValMap2 = _interopRequireDefault(_keyValMap);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _schema = require('../type/schema');\n\nvar _directives = require('../type/directives');\n\nvar _definition = require('../type/definition');\n\nvar _scalars = require('../type/scalars');\n\nvar _introspection = require('../type/introspection');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Sort GraphQLSchema.\n */\nfunction lexicographicSortSchema(schema) {\n  var cache = Object.create(null);\n\n  var sortMaybeType = function sortMaybeType(maybeType) {\n    return maybeType && sortNamedType(maybeType);\n  };\n  return new _schema.GraphQLSchema({\n    types: sortTypes((0, _objectValues2.default)(schema.getTypeMap())),\n    directives: sortByName(schema.getDirectives()).map(sortDirective),\n    query: sortMaybeType(schema.getQueryType()),\n    mutation: sortMaybeType(schema.getMutationType()),\n    subscription: sortMaybeType(schema.getSubscriptionType()),\n    astNode: schema.astNode\n  });\n\n  function sortDirective(directive) {\n    return new _directives.GraphQLDirective({\n      name: directive.name,\n      description: directive.description,\n      locations: sortBy(directive.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(directive.args),\n      astNode: directive.astNode\n    });\n  }\n\n  function sortArgs(args) {\n    return (0, _keyValMap2.default)(sortByName(args), function (arg) {\n      return arg.name;\n    }, function (arg) {\n      return _extends({}, arg, {\n        type: sortType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        args: sortArgs(field.args),\n        resolve: field.resolve,\n        subscribe: field.subscribe,\n        deprecationReason: field.deprecationReason,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        defaultValue: field.defaultValue,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortType(type) {\n    if ((0, _definition.isListType)(type)) {\n      return new _definition.GraphQLList(sortType(type.ofType));\n    } else if ((0, _definition.isNonNullType)(type)) {\n      return new _definition.GraphQLNonNull(sortType(type.ofType));\n    }\n    return sortNamedType(type);\n  }\n\n  function sortTypes(arr) {\n    return sortByName(arr).map(sortNamedType);\n  }\n\n  function sortNamedType(type) {\n    if ((0, _scalars.isSpecifiedScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {\n      return type;\n    }\n\n    var sortedType = cache[type.name];\n    if (!sortedType) {\n      sortedType = sortNamedTypeImpl(type);\n      cache[type.name] = sortedType;\n    }\n    return sortedType;\n  }\n\n  function sortNamedTypeImpl(type) {\n    if ((0, _definition.isScalarType)(type)) {\n      return type;\n    } else if ((0, _definition.isObjectType)(type)) {\n      return new _definition.GraphQLObjectType({\n        name: type.name,\n        interfaces: function interfaces() {\n          return sortTypes(type.getInterfaces());\n        },\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        isTypeOf: type.isTypeOf,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if ((0, _definition.isInterfaceType)(type)) {\n      return new _definition.GraphQLInterfaceType({\n        name: type.name,\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if ((0, _definition.isUnionType)(type)) {\n      return new _definition.GraphQLUnionType({\n        name: type.name,\n        types: function types() {\n          return sortTypes(type.getTypes());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if ((0, _definition.isEnumType)(type)) {\n      return new _definition.GraphQLEnumType({\n        name: type.name,\n        values: (0, _keyValMap2.default)(sortByName(type.getValues()), function (val) {\n          return val.name;\n        }, function (val) {\n          return {\n            value: val.value,\n            deprecationReason: val.deprecationReason,\n            description: val.description,\n            astNode: val.astNode\n          };\n        }),\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if ((0, _definition.isInputObjectType)(type)) {\n      return new _definition.GraphQLInputObjectType({\n        name: type.name,\n        fields: function fields() {\n          return sortInputFields(type.getFields());\n        },\n        description: type.description,\n        astNode: type.astNode\n      });\n    }\n    throw new Error('Unknown type: \"' + type + '\"');\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n  var sortedKeys = sortBy(Object.keys(map), function (x) {\n    return x;\n  });\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      var value = map[key];\n      sortedMap[key] = sortValueFn ? sortValueFn(value) : value;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return key1.localeCompare(key2);\n  });\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","lexicographicSortSchema","_keyValMap","_keyValMap2","_interopRequireDefault","_objectValues","_objectValues2","_schema","_directives","_definition","_scalars","_introspection","obj","__esModule","default","schema","cache","create","sortMaybeType","maybeType","sortNamedType","GraphQLSchema","types","sortTypes","getTypeMap","directives","sortByName","getDirectives","map","sortDirective","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","astNode","directive","GraphQLDirective","name","description","locations","sortBy","x","args","sortArgs","arg","type","sortType","sortFields","fieldsMap","sortObjMap","field","resolve","subscribe","deprecationReason","sortInputFields","defaultValue","isListType","GraphQLList","ofType","isNonNullType","GraphQLNonNull","arr","isSpecifiedScalarType","isIntrospectionType","sortedType","sortNamedTypeImpl","isScalarType","isObjectType","GraphQLObjectType","interfaces","getInterfaces","fields","getFields","isTypeOf","extensionASTNodes","isInterfaceType","GraphQLInterfaceType","resolveType","isUnionType","GraphQLUnionType","getTypes","isEnumType","GraphQLEnumType","values","getValues","val","isInputObjectType","GraphQLInputObjectType","Error","sortValueFn","sortedMap","sortedKeys","keys","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","done","next","err","return","array","mapToKey","slice","sort","obj1","obj2","key1","key2","localeCompare"]
}
