shadow$provide["module$node_modules$graphql$validation$rules$PossibleFragmentSpreads"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.typeIncompatibleSpreadMessage = typeIncompatibleSpreadMessage;
  exports.typeIncompatibleAnonSpreadMessage = typeIncompatibleAnonSpreadMessage;
  exports.PossibleFragmentSpreads = PossibleFragmentSpreads;
  var _error = require("module$node_modules$graphql$error$index");
  var _typeComparators = require("module$node_modules$graphql$utilities$typeComparators");
  var _typeFromAST = require("module$node_modules$graphql$utilities$typeFromAST");
  var _definition = require("module$node_modules$graphql$type$definition");
  function typeIncompatibleSpreadMessage(fragName, parentType, fragType) {
    return 'Fragment "' + fragName + '" cannot be spread here as objects of ' + ('type "' + String(parentType) + '" can never be of type "' + String(fragType) + '".');
  }
  function typeIncompatibleAnonSpreadMessage(parentType, fragType) {
    return "Fragment cannot be spread here as objects of " + ('type "' + String(parentType) + '" can never be of type "' + String(fragType) + '".');
  }
  function PossibleFragmentSpreads(context) {
    return {InlineFragment:function InlineFragment(node) {
      var fragType = context.getType();
      var parentType = context.getParentType();
      if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
        context.reportError(new _error.GraphQLError(typeIncompatibleAnonSpreadMessage(parentType, fragType), [node]));
      }
    }, FragmentSpread:function FragmentSpread(node) {
      var fragName = node.name.value;
      var fragType = getFragmentType(context, fragName);
      var parentType = context.getParentType();
      if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
        context.reportError(new _error.GraphQLError(typeIncompatibleSpreadMessage(fragName, parentType, fragType), [node]));
      }
    }};
  }
  function getFragmentType(context, name) {
    var frag = context.getFragment(name);
    if (frag) {
      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);
      if ((0, _definition.isCompositeType)(type)) {
        return type;
      }
    }
  }
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$PossibleFragmentSpreads.js.map
