shadow$provide["module$node_modules$graphql$validation$rules$ProvidedNonNullArguments"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.missingFieldArgMessage = missingFieldArgMessage;
  exports.missingDirectiveArgMessage = missingDirectiveArgMessage;
  exports.ProvidedNonNullArguments = ProvidedNonNullArguments;
  var _error = require("module$node_modules$graphql$error$index");
  var _keyMap = require("module$node_modules$graphql$jsutils$keyMap");
  var _keyMap2 = _interopRequireDefault(_keyMap);
  var _definition = require("module$node_modules$graphql$type$definition");
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function missingFieldArgMessage(fieldName, argName, type) {
    return 'Field "' + fieldName + '" argument "' + argName + '" of type ' + ('"' + String(type) + '" is required but not provided.');
  }
  function missingDirectiveArgMessage(directiveName, argName, type) {
    return 'Directive "@' + directiveName + '" argument "' + argName + '" of type ' + ('"' + String(type) + '" is required but not provided.');
  }
  function ProvidedNonNullArguments(context) {
    return {Field:{leave:function leave(node) {
      var fieldDef = context.getFieldDef();
      if (!fieldDef) {
        return false;
      }
      var argNodes = node.arguments || [];
      var argNodeMap = (0, _keyMap2.default)(argNodes, function(arg) {
        return arg.name.value;
      });
      fieldDef.args.forEach(function(argDef) {
        var argNode = argNodeMap[argDef.name];
        if (!argNode && (0, _definition.isNonNullType)(argDef.type)) {
          context.reportError(new _error.GraphQLError(missingFieldArgMessage(node.name.value, argDef.name, argDef.type), [node]));
        }
      });
    }}, Directive:{leave:function leave(node) {
      var directiveDef = context.getDirective();
      if (!directiveDef) {
        return false;
      }
      var argNodes = node.arguments || [];
      var argNodeMap = (0, _keyMap2.default)(argNodes, function(arg) {
        return arg.name.value;
      });
      directiveDef.args.forEach(function(argDef) {
        var argNode = argNodeMap[argDef.name];
        if (!argNode && (0, _definition.isNonNullType)(argDef.type)) {
          context.reportError(new _error.GraphQLError(missingDirectiveArgMessage(node.name.value, argDef.name, argDef.type), [node]));
        }
      });
    }}};
  }
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$ProvidedNonNullArguments.js.map
