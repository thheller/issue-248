{
"version":3,
"file":"module$node_modules$graphql$graphql.js",
"lineCount":40,
"mappings":"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",
"sources":["node_modules/graphql/graphql.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$graphql\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.graphql = graphql;\nexports.graphqlSync = graphqlSync;\n\nvar _validate = require('./type/validate');\n\nvar _parser = require('./language/parser');\n\nvar _validate2 = require('./validation/validate');\n\nvar _execute = require('./execution/execute');\n\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n */\n\n/* eslint-disable no-redeclare */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  var _arguments = arguments;\n\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n  return new Promise(function (resolve) {\n    return resolve(\n    // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}\n\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\n/* eslint-disable no-redeclare */\nfunction graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver);\n\n  // Assert that the execution was synchronous.\n  if (result.then) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Validate Schema\n  var schemaValidationErrors = (0, _validate.validateSchema)(schema);\n  if (schemaValidationErrors.length > 0) {\n    return { errors: schemaValidationErrors };\n  }\n\n  // Parse\n  var document = void 0;\n  try {\n    document = (0, _parser.parse)(source);\n  } catch (syntaxError) {\n    return { errors: [syntaxError] };\n  }\n\n  // Validate\n  var validationErrors = (0, _validate2.validate)(schema, document);\n  if (validationErrors.length > 0) {\n    return { errors: validationErrors };\n  }\n\n  // Execute\n  return (0, _execute.execute)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","graphql","graphqlSync","_validate","_parser","_validate2","_execute","argsOrSchema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","_arguments","arguments","Promise","resolve","length","graphqlImpl","schema","result","then","Error","schemaValidationErrors","validateSchema","errors","document","parse","syntaxError","validationErrors","validate","execute"]
}
