{
"version":3,
"file":"module$node_modules$graphql$validation$rules$FieldsOnCorrectType.js",
"lineCount":72,
"mappings":"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",
"sources":["node_modules/graphql/validation/rules/FieldsOnCorrectType.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$FieldsOnCorrectType\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.undefinedFieldMessage = undefinedFieldMessage;\nexports.FieldsOnCorrectType = FieldsOnCorrectType;\n\nvar _error = require('../../error');\n\nvar _suggestionList = require('../../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nvar _quotedOrList = require('../../jsutils/quotedOrList');\n\nvar _quotedOrList2 = _interopRequireDefault(_quotedOrList);\n\nvar _definition = require('../../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var message = 'Cannot query field \"' + fieldName + '\" on type \"' + type + '\".';\n  if (suggestedTypeNames.length !== 0) {\n    var suggestions = (0, _quotedOrList2.default)(suggestedTypeNames);\n    message += ' Did you mean to use an inline fragment on ' + suggestions + '?';\n  } else if (suggestedFieldNames.length !== 0) {\n    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedFieldNames) + '?';\n  }\n  return message;\n}\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n      if (type) {\n        var fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value;\n          // First determine if there are any suggested types to condition on.\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName);\n          // If there are no suggested types, then perhaps this was a typo?\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName);\n\n          // Report an error, including helpful suggestions.\n          context.reportError(new _error.GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));\n        }\n      }\n    }\n  };\n}\n\n/**\n * Go through all of the implementations of type, as well as the interfaces\n * that they implement. If any of those types include the provided field,\n * suggest them, sorted by how often the type is referenced,  starting\n * with Interfaces.\n */\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if ((0, _definition.isAbstractType)(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n    schema.getPossibleTypes(type).forEach(function (possibleType) {\n      if (!possibleType.getFields()[fieldName]) {\n        return;\n      }\n      // This object type defines this field.\n      suggestedObjectTypes.push(possibleType.name);\n      possibleType.getInterfaces().forEach(function (possibleInterface) {\n        if (!possibleInterface.getFields()[fieldName]) {\n          return;\n        }\n        // This interface type defines this field.\n        interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n      });\n    });\n\n    // Suggest interface types based on how common they are.\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    });\n\n    // Suggest both interface and object types.\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  }\n\n  // Otherwise, must be an Object type, which does not have possible fields.\n  return [];\n}\n\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return (0, _suggestionList2.default)(fieldName, possibleFieldNames);\n  }\n  // Otherwise, must be a Union type, which does not define fields.\n  return [];\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","undefinedFieldMessage","FieldsOnCorrectType","_error","_suggestionList","_suggestionList2","_interopRequireDefault","_quotedOrList","_quotedOrList2","_definition","obj","__esModule","default","fieldName","type","suggestedTypeNames","suggestedFieldNames","message","length","suggestions","context","Field","node","getParentType","fieldDef","getFieldDef","schema","getSchema","name","getSuggestedTypeNames","getSuggestedFieldNames","reportError","GraphQLError","isAbstractType","suggestedObjectTypes","interfaceUsageCount","create","getPossibleTypes","forEach","possibleType","getFields","push","getInterfaces","possibleInterface","suggestedInterfaceTypes","keys","sort","a","b","concat","isObjectType","isInterfaceType","possibleFieldNames"]
}
