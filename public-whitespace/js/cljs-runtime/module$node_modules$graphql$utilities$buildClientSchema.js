shadow$provide["module$node_modules$graphql$utilities$buildClientSchema"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.buildClientSchema = buildClientSchema;
  var _invariant = require("module$node_modules$graphql$jsutils$invariant");
  var _invariant2 = _interopRequireDefault(_invariant);
  var _keyMap = require("module$node_modules$graphql$jsutils$keyMap");
  var _keyMap2 = _interopRequireDefault(_keyMap);
  var _keyValMap = require("module$node_modules$graphql$jsutils$keyValMap");
  var _keyValMap2 = _interopRequireDefault(_keyValMap);
  var _valueFromAST = require("module$node_modules$graphql$utilities$valueFromAST");
  var _parser = require("module$node_modules$graphql$language$parser");
  var _schema = require("module$node_modules$graphql$type$schema");
  var _directiveLocation = require("module$node_modules$graphql$language$directiveLocation");
  var _definition = require("module$node_modules$graphql$type$definition");
  var _directives = require("module$node_modules$graphql$type$directives");
  var _introspection = require("module$node_modules$graphql$type$introspection");
  var _scalars = require("module$node_modules$graphql$type$scalars");
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function buildClientSchema(introspection, options) {
    var schemaIntrospection = introspection.__schema;
    var typeIntrospectionMap = (0, _keyMap2.default)(schemaIntrospection.types, function(type) {
      return type.name;
    });
    var typeDefCache = (0, _keyMap2.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function(type) {
      return type.name;
    });
    function getType(typeRef) {
      if (typeRef.kind === _introspection.TypeKind.LIST) {
        var itemRef = typeRef.ofType;
        if (!itemRef) {
          throw new Error("Decorated type deeper than introspection query.");
        }
        return (0, _definition.GraphQLList)(getType(itemRef));
      }
      if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
        var nullableRef = typeRef.ofType;
        if (!nullableRef) {
          throw new Error("Decorated type deeper than introspection query.");
        }
        var nullableType = getType(nullableRef);
        return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(nullableType));
      }
      if (!typeRef.name) {
        throw new Error("Unknown type reference: " + JSON.stringify(typeRef));
      }
      return getNamedType(typeRef.name);
    }
    function getNamedType(typeName) {
      if (typeDefCache[typeName]) {
        return typeDefCache[typeName];
      }
      var typeIntrospection = typeIntrospectionMap[typeName];
      if (!typeIntrospection) {
        throw new Error("Invalid or incomplete schema, unknown type: " + typeName + ". Ensure " + "that a full introspection query is used in order to build a " + "client schema.");
      }
      var typeDef = buildType(typeIntrospection);
      typeDefCache[typeName] = typeDef;
      return typeDef;
    }
    function getInputType(typeRef) {
      var type = getType(typeRef);
      !(0, _definition.isInputType)(type) ? (0, _invariant2.default)(0, "Introspection must provide input type for arguments.") : void 0;
      return type;
    }
    function getOutputType(typeRef) {
      var type = getType(typeRef);
      !(0, _definition.isOutputType)(type) ? (0, _invariant2.default)(0, "Introspection must provide output type for fields.") : void 0;
      return type;
    }
    function getObjectType(typeRef) {
      var type = getType(typeRef);
      return (0, _definition.assertObjectType)(type);
    }
    function getInterfaceType(typeRef) {
      var type = getType(typeRef);
      return (0, _definition.assertInterfaceType)(type);
    }
    function buildType(type) {
      if (type && type.name && type.kind) {
        switch(type.kind) {
          case _introspection.TypeKind.SCALAR:
            return buildScalarDef(type);
          case _introspection.TypeKind.OBJECT:
            return buildObjectDef(type);
          case _introspection.TypeKind.INTERFACE:
            return buildInterfaceDef(type);
          case _introspection.TypeKind.UNION:
            return buildUnionDef(type);
          case _introspection.TypeKind.ENUM:
            return buildEnumDef(type);
          case _introspection.TypeKind.INPUT_OBJECT:
            return buildInputObjectDef(type);
        }
      }
      throw new Error("Invalid or incomplete introspection result. Ensure that a full " + "introspection query is used in order to build a client schema:" + JSON.stringify(type));
    }
    function buildScalarDef(scalarIntrospection) {
      return new _definition.GraphQLScalarType({name:scalarIntrospection.name, description:scalarIntrospection.description, serialize:function serialize(value) {
        return value;
      }});
    }
    function buildObjectDef(objectIntrospection) {
      if (!objectIntrospection.interfaces) {
        throw new Error("Introspection result missing interfaces: " + JSON.stringify(objectIntrospection));
      }
      return new _definition.GraphQLObjectType({name:objectIntrospection.name, description:objectIntrospection.description, interfaces:objectIntrospection.interfaces.map(getInterfaceType), fields:function fields() {
        return buildFieldDefMap(objectIntrospection);
      }});
    }
    function buildInterfaceDef(interfaceIntrospection) {
      return new _definition.GraphQLInterfaceType({name:interfaceIntrospection.name, description:interfaceIntrospection.description, fields:function fields() {
        return buildFieldDefMap(interfaceIntrospection);
      }});
    }
    function buildUnionDef(unionIntrospection) {
      if (!unionIntrospection.possibleTypes) {
        throw new Error("Introspection result missing possibleTypes: " + JSON.stringify(unionIntrospection));
      }
      return new _definition.GraphQLUnionType({name:unionIntrospection.name, description:unionIntrospection.description, types:unionIntrospection.possibleTypes.map(getObjectType)});
    }
    function buildEnumDef(enumIntrospection) {
      if (!enumIntrospection.enumValues) {
        throw new Error("Introspection result missing enumValues: " + JSON.stringify(enumIntrospection));
      }
      return new _definition.GraphQLEnumType({name:enumIntrospection.name, description:enumIntrospection.description, values:(0, _keyValMap2.default)(enumIntrospection.enumValues, function(valueIntrospection) {
        return valueIntrospection.name;
      }, function(valueIntrospection) {
        return {description:valueIntrospection.description, deprecationReason:valueIntrospection.deprecationReason};
      })});
    }
    function buildInputObjectDef(inputObjectIntrospection) {
      if (!inputObjectIntrospection.inputFields) {
        throw new Error("Introspection result missing inputFields: " + JSON.stringify(inputObjectIntrospection));
      }
      return new _definition.GraphQLInputObjectType({name:inputObjectIntrospection.name, description:inputObjectIntrospection.description, fields:function fields() {
        return buildInputValueDefMap(inputObjectIntrospection.inputFields);
      }});
    }
    function buildFieldDefMap(typeIntrospection) {
      if (!typeIntrospection.fields) {
        throw new Error("Introspection result missing fields: " + JSON.stringify(typeIntrospection));
      }
      return (0, _keyValMap2.default)(typeIntrospection.fields, function(fieldIntrospection) {
        return fieldIntrospection.name;
      }, function(fieldIntrospection) {
        if (!fieldIntrospection.args) {
          throw new Error("Introspection result missing field args: " + JSON.stringify(fieldIntrospection));
        }
        return {description:fieldIntrospection.description, deprecationReason:fieldIntrospection.deprecationReason, type:getOutputType(fieldIntrospection.type), args:buildInputValueDefMap(fieldIntrospection.args)};
      });
    }
    function buildInputValueDefMap(inputValueIntrospections) {
      return (0, _keyValMap2.default)(inputValueIntrospections, function(inputValue) {
        return inputValue.name;
      }, buildInputValue);
    }
    function buildInputValue(inputValueIntrospection) {
      var type = getInputType(inputValueIntrospection.type);
      var defaultValue = inputValueIntrospection.defaultValue ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;
      return {name:inputValueIntrospection.name, description:inputValueIntrospection.description, type:type, defaultValue:defaultValue};
    }
    function buildDirective(directiveIntrospection) {
      var locations = directiveIntrospection.locations ? directiveIntrospection.locations.slice() : [].concat(!directiveIntrospection.onField ? [] : [_directiveLocation.DirectiveLocation.FIELD], !directiveIntrospection.onOperation ? [] : [_directiveLocation.DirectiveLocation.QUERY, _directiveLocation.DirectiveLocation.MUTATION, _directiveLocation.DirectiveLocation.SUBSCRIPTION], !directiveIntrospection.onFragment ? [] : [_directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, 
      _directiveLocation.DirectiveLocation.INLINE_FRAGMENT]);
      if (!directiveIntrospection.args) {
        throw new Error("Introspection result missing directive args: " + JSON.stringify(directiveIntrospection));
      }
      return new _directives.GraphQLDirective({name:directiveIntrospection.name, description:directiveIntrospection.description, locations:locations, args:buildInputValueDefMap(directiveIntrospection.args)});
    }
    var types = schemaIntrospection.types.map(function(typeIntrospection) {
      return getNamedType(typeIntrospection.name);
    });
    var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
    var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
    var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null;
    var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];
    return new _schema.GraphQLSchema({query:queryType, mutation:mutationType, subscription:subscriptionType, types:types, directives:directives, assumeValid:options && options.assumeValid, allowedLegacyNames:options && options.allowedLegacyNames});
  }
};

//# sourceMappingURL=module$node_modules$graphql$utilities$buildClientSchema.js.map
