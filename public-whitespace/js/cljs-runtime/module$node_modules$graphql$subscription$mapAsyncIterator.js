shadow$provide["module$node_modules$graphql$subscription$mapAsyncIterator"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.default = mapAsyncIterator;
  var _iterall = require("module$node_modules$iterall$index");
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {value:value, enumerable:true, configurable:true, writable:true});
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function mapAsyncIterator(iterable, callback, rejectCallback) {
    var iterator = (0, _iterall.getAsyncIterator)(iterable);
    var $return = void 0;
    var abruptClose = void 0;
    if (typeof iterator.return === "function") {
      $return = iterator.return;
      abruptClose = function abruptClose(error) {
        var rethrow = function rethrow() {
          return Promise.reject(error);
        };
        return $return.call(iterator).then(rethrow, rethrow);
      };
    }
    function mapResult(result) {
      return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);
    }
    var mapReject = void 0;
    if (rejectCallback) {
      var reject = rejectCallback;
      mapReject = function mapReject(error) {
        return asyncMapValue(error, reject).then(iteratorResult, abruptClose);
      };
    }
    return _defineProperty({next:function next() {
      return iterator.next().then(mapResult, mapReject);
    }, return:function _return() {
      return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({value:undefined, done:true});
    }, throw:function _throw(error) {
      if (typeof iterator.throw === "function") {
        return iterator.throw(error).then(mapResult, mapReject);
      }
      return Promise.reject(error).catch(abruptClose);
    }}, _iterall.$$asyncIterator, function() {
      return this;
    });
  }
  function asyncMapValue(value, callback) {
    return new Promise(function(resolve) {
      return resolve(callback(value));
    });
  }
  function iteratorResult(value) {
    return {value:value, done:false};
  }
};

//# sourceMappingURL=module$node_modules$graphql$subscription$mapAsyncIterator.js.map
