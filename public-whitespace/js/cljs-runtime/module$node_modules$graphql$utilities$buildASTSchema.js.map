{
"version":3,
"file":"module$node_modules$graphql$utilities$buildASTSchema.js",
"lineCount":271,
"mappings":"AAAAA,cAAA,CAAe,sDAAf,CAAA,GAAyE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,OAAhB,EAAwBC,MAAxB,EAA+BC,OAA/B,CAAwC;AAGzHC,QAAAC,eAAA,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,IADoC,CAA7C,CAAA;AAGAH,SAAAI,qBAAA,GAA+BC,SAA/B;AACAL,SAAAM,eAAA,GAAyBA,cAAzB;AACAN,SAAAO,eAAA,GAAyBA,cAAzB;AACAP,SAAAQ,YAAA,GAAsBA,WAAtB;AAEA,MAAIC,UAAUX,OAAA,CAAQ,4CAAR,CAAd;AAEA,MAAIY,WAAWC,sBAAA,CAAuBF,OAAvB,CAAf;AAEA,MAAIG,aAAad,OAAA,CAAQ,+CAAR,CAAjB;AAEA,MAAIe,cAAcF,sBAAA,CAAuBC,UAAvB,CAAlB;AAEA,MAAIE,gBAAgBhB,OAAA,CAAQ,oDAAR,CAApB;AAEA,MAAIiB,oBAAoBjB,OAAA,CAAQ,uDAAR,CAAxB;AAEA,MAAIkB,qBAAqBL,sBAAA,CAAuBI,iBAAvB,CAAzB;AAEA,MAAIE,SAASnB,OAAA,CAAQ,4CAAR,CAAb;AAEA,MAAIoB,UAAUpB,OAAA,CAAQ,6CAAR,CAAd;AAEA,MAAIqB,UAAUrB,OAAA,CAAQ,8CAAR,CAAd;AAEA,MAAIsB,SAAStB,OAAA,CAAQ,4CAAR,CAAb;AAEA,MAAIuB,cAAcvB,OAAA,CAAQ,6CAAR,CAAlB;AAEA,MAAIwB,cAAcxB,OAAA,CAAQ,6CAAR,CAAlB;AAEA,MAAIyB,iBAAiBzB,OAAA,CAAQ,gDAAR,CAArB;AAEA,MAAI0B,WAAW1B,OAAA,CAAQ,0CAAR,CAAf;AAEA,MAAI2B,UAAU3B,OAAA,CAAQ,yCAAR,CAAd;AAEAa,UAASA,uBAAsB,CAACe,GAAD,CAAM;AAAE,WAAOA,GAAA,IAAOA,GAAAC,WAAP,GAAwBD,GAAxB,GAA8B,CAAEE,QAASF,GAAX,CAArC;AAAF;AAErCG,UAASA,gBAAe,CAACC,QAAD,EAAWC,WAAX,CAAwB;AAAE,QAAI,EAAED,QAAF,YAAsBC,WAAtB,CAAJ;AAA0C,YAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA1C;AAAF;AAShDC,UAASA,iBAAgB,CAACC,SAAD,EAAYC,aAAZ,CAA2B;AAClD,QAAIA,aAAAC,KAAJ,KAA2BhB,MAAAiB,KAAAC,UAA3B;AACE,aAAO,CAAC,CAAA,EAAGjB,WAAAkB,YAAJ,EAA6BN,gBAAA,CAAiBC,SAAjB,EAA4BC,aAAAK,KAA5B,CAA7B,CAAP;AADF;AAGA,QAAIL,aAAAC,KAAJ,KAA2BhB,MAAAiB,KAAAI,cAA3B,CAAsD;AACpD,UAAIC,cAAcT,gBAAA,CAAiBC,SAAjB,EAA4BC,aAAAK,KAA5B,CAAlB;AACA,aAAO,CAAC,CAAA,EAAGnB,WAAAsB,eAAJ,EAAgC,CAAC,CAAA,EAAGtB,WAAAuB,mBAAJ,EAAoCF,WAApC,CAAhC,CAAP;AAFoD;AAItD,WAAOR,SAAP;AARkD;AAWpDW,UAASA,iBAAgB,CAACC,QAAD,CAAW;AAClC,QAAIC,YAAYD,QAAhB;AACA,WAAOC,SAAAX,KAAP,KAA0BhB,MAAAiB,KAAAC,UAA1B,IAAmDS,SAAAX,KAAnD,KAAsEhB,MAAAiB,KAAAI,cAAtE;AACEM,eAAA,GAAYA,SAAAP,KAAZ;AADF;AAGA,WAAOO,SAAP;AALkC;AAwBpCzC,UAASA,eAAc,CAAC0C,GAAD,EAAMC,OAAN,CAAe;AACpC,QAAI,CAACD,GAAL,IAAYA,GAAAZ,KAAZ,KAAyBhB,MAAAiB,KAAAa,SAAzB;AACE,YAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AADF;AAIA,QAAIC,YAAY,IAAK,EAArB;AAEA,QAAIC,WAAW,EAAf;AACA,QAAIC,UAAUrD,MAAAsD,OAAA,CAAc,IAAd,CAAd;AACA,QAAIC,gBAAgB,EAApB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBT,GAAAU,YAAAC,OAApB,EAA4CF,CAAA,EAA5C,CAAiD;AAC/C,UAAIG,IAAIZ,GAAAU,YAAA,CAAgBD,CAAhB,CAAR;AACA,aAAQG,CAAAxB,KAAR;AACE,aAAKhB,MAAAiB,KAAAwB,kBAAL;AACE,cAAIT,SAAJ;AACE,kBAAM,IAAID,KAAJ,CAAU,0CAAV,CAAN;AADF;AAGAC,mBAAA,GAAYQ,CAAZ;AACA;AACF,aAAKxC,MAAAiB,KAAAyB,uBAAL;AACA,aAAK1C,MAAAiB,KAAA0B,uBAAL;AACA,aAAK3C,MAAAiB,KAAA2B,0BAAL;AACA,aAAK5C,MAAAiB,KAAA4B,qBAAL;AACA,aAAK7C,MAAAiB,KAAA6B,sBAAL;AACA,aAAK9C,MAAAiB,KAAA8B,6BAAL;AACE,cAAIC,WAAWR,CAAAS,KAAAlE,MAAf;AACA,cAAImD,OAAA,CAAQc,QAAR,CAAJ;AACE,kBAAM,IAAIjB,KAAJ,CAAU,QAAV,GAAqBiB,QAArB,GAAgC,+BAAhC,CAAN;AADF;AAGAf,kBAAAiB,KAAA,CAAcV,CAAd,CAAA;AACAN,iBAAA,CAAQc,QAAR,CAAA,GAAoBR,CAApB;AACA;AACF,aAAKxC,MAAAiB,KAAAkC,qBAAL;AACEf,uBAAAc,KAAA,CAAmBV,CAAnB,CAAA;AACA;AAtBJ;AAF+C;AA4BjD,QAAIY,iBAAiBpB,SAAA,GAAYqB,iBAAA,CAAkBrB,SAAlB,CAAZ,GAA2C,CAC9DsB,MAAOpB,OAAAqB,MADuD,EAE9DC,SAAUtB,OAAAuB,SAFoD,EAG9DC,aAAcxB,OAAAyB,aAHgD,CAAhE;AAMA,QAAIC,oBAAoB,IAAI5E,oBAAJ,CAAyBkD,OAAzB,EAAkCL,OAAlC,EAA2C,QAAS,CAACgC,OAAD,CAAU;AACpF,YAAM,IAAI9B,KAAJ,CAAU,QAAV,GAAqB8B,OAAAZ,KAAAlE,MAArB,GAA0C,0BAA1C,CAAN;AADoF,KAA9D,CAAxB;AAIA,QAAI+E,QAAQF,iBAAAG,WAAA,CAA6B9B,QAA7B,CAAZ;AACA,QAAI+B,aAAa5B,aAAA6B,IAAA,CAAkB,QAAS,CAACC,GAAD,CAAM;AAChD,aAAON,iBAAAO,eAAA,CAAiCD,GAAjC,CAAP;AADgD,KAAjC,CAAjB;AAKA,QAAI,CAACF,UAAAI,KAAA,CAAgB,QAAS,CAACC,SAAD,CAAY;AACxC,aAAOA,SAAApB,KAAP,KAA0B,MAA1B;AADwC,KAArC,CAAL;AAGEe,gBAAAd,KAAA,CAAgBhD,WAAAoE,qBAAhB,CAAA;AAHF;AAMA,QAAI,CAACN,UAAAI,KAAA,CAAgB,QAAS,CAACC,SAAD,CAAY;AACxC,aAAOA,SAAApB,KAAP,KAA0B,SAA1B;AADwC,KAArC,CAAL;AAGEe,gBAAAd,KAAA,CAAgBhD,WAAAqE,wBAAhB,CAAA;AAHF;AAMA,QAAI,CAACP,UAAAI,KAAA,CAAgB,QAAS,CAACC,SAAD,CAAY;AACxC,aAAOA,SAAApB,KAAP,KAA0B,YAA1B;AADwC,KAArC,CAAL;AAGEe,gBAAAd,KAAA,CAAgBhD,WAAAsE,2BAAhB,CAAA;AAHF;AASA,WAAO,IAAInE,OAAAoE,cAAJ,CAA0B,CAC/BnB,MAAOF,cAAAE,MAAA,GAAuBM,iBAAAc,UAAA,CAA4BtB,cAAAE,MAA5B,CAAvB,GAA2E,IADnD,EAE/BE,SAAUJ,cAAAI,SAAA,GAA0BI,iBAAAc,UAAA,CAA4BtB,cAAAI,SAA5B,CAA1B,GAAiF,IAF5D,EAG/BE,aAAcN,cAAAM,aAAA,GAA8BE,iBAAAc,UAAA,CAA4BtB,cAAAM,aAA5B,CAA9B,GAAyF,IAHxE,EAI/BI,MAAOA,KAJwB,EAK/BE,WAAYA,UALmB,EAM/BW,QAAS3C,SANsB,EAO/B4C,YAAa/C,OAAb+C,IAAwB/C,OAAA+C,YAPO,EAQ/BC,mBAAoBhD,OAApBgD,IAA+BhD,OAAAgD,mBARA,CAA1B,CAAP;AAWAxB,YAASA,kBAAiB,CAACyB,MAAD,CAAS;AACjC,UAAIC,UAAU,EAAd;AACAD,YAAA1B,eAAA4B,QAAA,CAA8B,QAAS,CAACC,aAAD,CAAgB;AACrD,YAAIjC,WAAWiC,aAAA7D,KAAA6B,KAAAlE,MAAf;AACA,YAAImG,YAAYD,aAAAC,UAAhB;AACA,YAAIH,OAAA,CAAQG,SAAR,CAAJ;AACE,gBAAM,IAAInD,KAAJ,CAAU,wBAAV,GAAqCmD,SAArC,GAAiD,kBAAjD,CAAN;AADF;AAGA,YAAI,CAAChD,OAAA,CAAQc,QAAR,CAAL;AACE,gBAAM,IAAIjB,KAAJ,CAAU,YAAV,GAAyBmD,SAAzB,GAAqC,SAArC,GAAiDlC,QAAjD,GAA4D,0BAA5D,CAAN;AADF;AAGA+B,eAAA,CAAQG,SAAR,CAAA,GAAqBD,aAAA7D,KAArB;AATqD,OAAvD,CAAA;AAWA,aAAO2D,OAAP;AAbiC;AAtFC;AAuGtC,MAAI/F,uBAAuBJ,OAAAI,qBAAvBA,GAAsD,QAAS,EAAG;AACpEA,YAASA,qBAAoB,CAACmG,kBAAD,EAAqBtD,OAArB,EAA8BuD,WAA9B,CAA2C;AACtE3E,qBAAA,CAAgB,IAAhB,EAAsBzB,oBAAtB,CAAA;AAEA,UAAAqG,oBAAA,GAA2BF,kBAA3B;AACA,UAAAG,SAAA,GAAgBzD,OAAhB;AACA,UAAA0D,aAAA,GAAoBH,WAApB;AAEA,UAAAI,OAAA,GAAc,CAAC,CAAA,EAAGlG,QAAAkB,QAAJ,EAAsBJ,QAAAqF,qBAAAC,OAAA,CAAqCvF,cAAAwF,mBAArC,CAAtB,EAA+F,QAAS,CAACvE,IAAD,CAAO;AAC3H,eAAOA,IAAA6B,KAAP;AAD2H,OAA/G,CAAd;AAPsE;AAYxEjE,wBAAA4G,UAAA7B,WAAA,GAA4C8B,QAAS9B,WAAU,CAAC+B,KAAD,CAAQ;AACrE,UAAIC,QAAQ,IAAZ;AAEA,aAAOD,KAAA7B,IAAA,CAAU,QAAS,CAAC+B,IAAD,CAAO;AAC/B,eAAOD,KAAArB,UAAA,CAAgBsB,IAAhB,CAAP;AAD+B,OAA1B,CAAP;AAHqE,KAAvE;AAQAhH,wBAAA4G,UAAAlB,UAAA,GAA2CuB,QAASvB,UAAS,CAACsB,IAAD,CAAO;AAClE,UAAIhD,WAAWgD,IAAA/C,KAAAlE,MAAf;AACA,UAAI,CAAC,IAAAyG,OAAA,CAAYxC,QAAZ,CAAL;AACE,YAAIgD,IAAAhF,KAAJ,KAAkBhB,MAAAiB,KAAAiF,WAAlB,CAA0C;AACxC,cAAIC,UAAU,IAAAd,oBAAA,CAAyBrC,QAAzB,CAAd;AACA,cAAAwC,OAAA,CAAYxC,QAAZ,CAAA,GAAwBmD,OAAA,GAAU,IAAAC,eAAA,CAAoBD,OAApB,CAAV,GAAyC,IAAAZ,aAAA,CAAkBS,IAAlB,CAAjE;AAFwC,SAA1C;AAIE,cAAAR,OAAA,CAAYxC,QAAZ,CAAA,GAAwB,IAAAoD,eAAA,CAAoBJ,IAApB,CAAxB;AAJF;AADF;AAQA,aAAO,IAAAR,OAAA,CAAYxC,QAAZ,CAAP;AAVkE,KAApE;AAaAhE,wBAAA4G,UAAAS,kBAAA,GAAmDC,QAASD,kBAAiB,CAAC3E,QAAD,CAAW;AACtF,UAAI6E,UAAU,IAAA7B,UAAA,CAAejD,gBAAA,CAAiBC,QAAjB,CAAf,CAAd;AACA,aAAOb,gBAAA,CAAiB0F,OAAjB,EAA0B7E,QAA1B,CAAP;AAFsF,KAAxF;AAKA1C,wBAAA4G,UAAAzB,eAAA,GAAgDqC,QAASrC,eAAc,CAACsC,aAAD,CAAgB;AACrF,aAAO,IAAIvG,WAAAwG,iBAAJ,CAAiC,CACtCzD,KAAMwD,aAAAxD,KAAAlE,MADgC,EAEtC4H,YAAaxH,cAAA,CAAesH,aAAf,EAA8B,IAAAnB,SAA9B,CAFyB,EAGtCsB,UAAWH,aAAAG,UAAA3C,IAAA,CAA4B,QAAS,CAAC+B,IAAD,CAAO;AACrD,eAAOA,IAAAjH,MAAP;AADqD,OAA5C,CAH2B,EAMtC8H,KAAMJ,aAAAK,UAAND,IAAiC,IAAAE,iBAAA,CAAsBN,aAAAK,UAAtB,CANK,EAOtCnC,QAAS8B,aAP6B,CAAjC,CAAP;AADqF,KAAvF;AAYAzH,wBAAA4G,UAAAoB,WAAA,GAA4CC,QAASD,WAAU,CAACE,KAAD,CAAQ;AACrE,aAAO,CAIL9F,KAAM,IAAAiF,kBAAA,CAAuBa,KAAA9F,KAAvB,CAJD,EAKLuF,YAAaxH,cAAA,CAAe+H,KAAf,EAAsB,IAAA5B,SAAtB,CALR,EAMLuB,KAAMK,KAAAJ,UAAND,IAAyB,IAAAE,iBAAA,CAAsBG,KAAAJ,UAAtB,CANpB,EAOLK,kBAAmBC,oBAAA,CAAqBF,KAArB,CAPd,EAQLvC,QAASuC,KARJ,CAAP;AADqE,KAAvE;AAaAlI,wBAAA4G,UAAAQ,eAAA,GAAgDiB,QAASjB,eAAc,CAAClC,GAAD,CAAM;AAC3E,aAAQA,GAAAlD,KAAR;AACE,aAAKhB,MAAAiB,KAAA0B,uBAAL;AACE,iBAAO,IAAA2E,aAAA,CAAkBpD,GAAlB,CAAP;AACF,aAAKlE,MAAAiB,KAAA2B,0BAAL;AACE,iBAAO,IAAA2E,kBAAA,CAAuBrD,GAAvB,CAAP;AACF,aAAKlE,MAAAiB,KAAA4B,qBAAL;AACE,iBAAO,IAAA2E,aAAA,CAAkBtD,GAAlB,CAAP;AACF,aAAKlE,MAAAiB,KAAA6B,sBAAL;AACE,iBAAO,IAAA2E,cAAA,CAAmBvD,GAAnB,CAAP;AACF,aAAKlE,MAAAiB,KAAAyB,uBAAL;AACE,iBAAO,IAAAgF,eAAA,CAAoBxD,GAApB,CAAP;AACF,aAAKlE,MAAAiB,KAAA8B,6BAAL;AACE,iBAAO,IAAA4E,oBAAA,CAAyBzD,GAAzB,CAAP;AACF;AACE,gBAAM,IAAInC,KAAJ,CAAU,aAAV,GAA0BmC,GAAAlD,KAA1B,GAAqC,kBAArC,CAAN;AAdJ;AAD2E,KAA7E;AAmBAhC,wBAAA4G,UAAA0B,aAAA,GAA8CM,QAASN,aAAY,CAACpD,GAAD,CAAM;AACvE,UAAI2D,SAAS,IAAb;AAEA,UAAI7E,WAAWkB,GAAAjB,KAAAlE,MAAf;AACA,UAAI+I,aAAa5D,GAAA4D,WAAjB;AACA,aAAO,IAAI7H,WAAA8H,kBAAJ,CAAkC,CACvC9E,KAAMD,QADiC,EAEvC2D,YAAaxH,cAAA,CAAe+E,GAAf,EAAoB,IAAAoB,SAApB,CAF0B,EAGvC0C,OAAQA,QAASA,OAAM,EAAG;AACxB,eAAOH,MAAAI,iBAAA,CAAwB/D,GAAxB,CAAP;AADwB,OAHa,EASvC4D,WAAYA,UAAA,GAAa,QAAS,EAAG;AACnC,eAAOD,MAAA9D,WAAA,CAAkB+D,UAAlB,CAAP;AADmC,OAAzB,GAER,EAXmC,EAYvCnD,QAAST,GAZ8B,CAAlC,CAAP;AALuE,KAAzE;AAqBAlF,wBAAA4G,UAAAqC,iBAAA,GAAkDC,QAASD,iBAAgB,CAAC/D,GAAD,CAAM;AAC/E,UAAIiE,SAAS,IAAb;AAEA,aAAOjE,GAAA8D,OAAA,GAAa,CAAC,CAAA,EAAGvI,WAAAe,QAAJ,EAAyB0D,GAAA8D,OAAzB,EAAqC,QAAS,CAACd,KAAD,CAAQ;AACxE,eAAOA,KAAAjE,KAAAlE,MAAP;AADwE,OAAtD,EAEjB,QAAS,CAACmI,KAAD,CAAQ;AAClB,eAAOiB,MAAAnB,WAAA,CAAkBE,KAAlB,CAAP;AADkB,OAFA,CAAb,GAIF,EAJL;AAH+E,KAAjF;AAUAlI,wBAAA4G,UAAAmB,iBAAA,GAAkDqB,QAASrB,iBAAgB,CAACsB,MAAD,CAAS;AAClF,UAAIC,SAAS,IAAb;AAEA,aAAO,CAAC,CAAA,EAAG7I,WAAAe,QAAJ,EAAyB6H,MAAzB,EAAiC,QAAS,CAACtJ,KAAD,CAAQ;AACvD,eAAOA,KAAAkE,KAAAlE,MAAP;AADuD,OAAlD,EAEJ,QAAS,CAACA,KAAD,CAAQ;AAGlB,YAAIqC,OAAOkH,MAAAjC,kBAAA,CAAyBtH,KAAAqC,KAAzB,CAAX;AACA,eAAO,CACLA,KAAMA,IADD,EAELuF,YAAaxH,cAAA,CAAeJ,KAAf,EAAsBuJ,MAAAhD,SAAtB,CAFR,EAGLiD,aAAc,CAAC,CAAA,EAAG7I,aAAA8I,aAAJ,EAAgCzJ,KAAAwJ,aAAhC,EAAoDnH,IAApD,CAHT,EAILuD,QAAS5F,KAJJ,CAAP;AAJkB,OAFb,CAAP;AAHkF,KAApF;AAkBAC,wBAAA4G,UAAA2B,kBAAA,GAAmDkB,QAASlB,kBAAiB,CAACrD,GAAD,CAAM;AACjF,UAAIwE,SAAS,IAAb;AAEA,aAAO,IAAIzI,WAAA0I,qBAAJ,CAAqC,CAC1C1F,KAAMiB,GAAAjB,KAAAlE,MADoC,EAE1C4H,YAAaxH,cAAA,CAAe+E,GAAf,EAAoB,IAAAoB,SAApB,CAF6B,EAG1C0C,OAAQA,QAASA,OAAM,EAAG;AACxB,eAAOU,MAAAT,iBAAA,CAAwB/D,GAAxB,CAAP;AADwB,OAHgB,EAM1CS,QAAST,GANiC,CAArC,CAAP;AAHiF,KAAnF;AAaAlF,wBAAA4G,UAAA4B,aAAA,GAA8CoB,QAASpB,aAAY,CAACtD,GAAD,CAAM;AACvE,UAAI2E,SAAS,IAAb;AAEA,aAAO,IAAI5I,WAAA6I,gBAAJ,CAAgC,CACrC7F,KAAMiB,GAAAjB,KAAAlE,MAD+B,EAErC4H,YAAaxH,cAAA,CAAe+E,GAAf,EAAoB,IAAAoB,SAApB,CAFwB,EAGrC+C,OAAQnE,GAAAmE,OAAA,GAAa,CAAC,CAAA,EAAG5I,WAAAe,QAAJ,EAAyB0D,GAAAmE,OAAzB,EAAqC,QAAS,CAACU,SAAD,CAAY;AAC7E,eAAOA,SAAA9F,KAAAlE,MAAP;AAD6E,OAA1D,EAElB,QAAS,CAACgK,SAAD,CAAY;AACtB,eAAO,CACLpC,YAAaxH,cAAA,CAAe4J,SAAf,EAA0BF,MAAAvD,SAA1B,CADR,EAEL6B,kBAAmBC,oBAAA,CAAqB2B,SAArB,CAFd,EAGLpE,QAASoE,SAHJ,CAAP;AADsB,OAFH,CAAb,GAQH,EAXgC,EAYrCpE,QAAST,GAZ4B,CAAhC,CAAP;AAHuE,KAAzE;AAmBAlF,wBAAA4G,UAAA6B,cAAA,GAA+CuB,QAASvB,cAAa,CAACvD,GAAD,CAAM;AACzE,aAAO,IAAIjE,WAAAgJ,iBAAJ,CAAiC,CACtChG,KAAMiB,GAAAjB,KAAAlE,MADgC,EAEtC4H,YAAaxH,cAAA,CAAe+E,GAAf,EAAoB,IAAAoB,SAApB,CAFyB,EAMtCxB,MAAOI,GAAAJ,MAAA,GAAY,IAAAC,WAAA,CAAgBG,GAAAJ,MAAhB,CAAZ,GAAyC,EANV,EAOtCa,QAAST,GAP6B,CAAjC,CAAP;AADyE,KAA3E;AAYAlF,wBAAA4G,UAAA8B,eAAA,GAAgDwB,QAASxB,eAAc,CAACxD,GAAD,CAAM;AAC3E,aAAO,IAAIjE,WAAAkJ,kBAAJ,CAAkC,CACvClG,KAAMiB,GAAAjB,KAAAlE,MADiC,EAEvC4H,YAAaxH,cAAA,CAAe+E,GAAf,EAAoB,IAAAoB,SAApB,CAF0B,EAGvCX,QAAST,GAH8B,EAIvCkF,UAAWA,QAASA,UAAS,CAACrK,KAAD,CAAQ;AACnC,eAAOA,KAAP;AADmC,OAJE,CAAlC,CAAP;AAD2E,KAA7E;AAWAC,wBAAA4G,UAAA+B,oBAAA,GAAqD0B,QAAS1B,oBAAmB,CAACzD,GAAD,CAAM;AACrF,UAAIoF,SAAS,IAAb;AAEA,aAAO,IAAIrJ,WAAAsJ,uBAAJ,CAAuC,CAC5CtG,KAAMiB,GAAAjB,KAAAlE,MADsC,EAE5C4H,YAAaxH,cAAA,CAAe+E,GAAf,EAAoB,IAAAoB,SAApB,CAF+B,EAG5C0C,OAAQA,QAASA,OAAM,EAAG;AACxB,eAAO9D,GAAA8D,OAAA,GAAasB,MAAAvC,iBAAA,CAAwB7C,GAAA8D,OAAxB,CAAb,GAAmD,EAA1D;AADwB,OAHkB,EAM5CrD,QAAST,GANmC,CAAvC,CAAP;AAHqF,KAAvF;AAaA,WAAOlF,oBAAP;AAxMoE,GAAZ,EAA1D;AAiNAoI,UAASA,qBAAoB,CAACpB,IAAD,CAAO;AAClC,QAAIwD,aAAa,CAAC,CAAA,EAAGzJ,OAAA0J,mBAAJ,EAAgCvJ,WAAAsE,2BAAhC,EAAwEwB,IAAxE,CAAjB;AACA,WAAOwD,UAAP,IAAqBA,UAAAE,OAArB;AAFkC;AAcpCvK,UAASA,eAAc,CAAC6G,IAAD,EAAOnE,OAAP,CAAgB;AACrC,QAAImE,IAAAW,YAAJ;AACE,aAAOX,IAAAW,YAAA5H,MAAP;AADF;AAGA,QAAI8C,OAAJ,IAAeA,OAAA8H,oBAAf,CAA4C;AAC1C,UAAIC,WAAWC,sBAAA,CAAuB7D,IAAvB,CAAf;AACA,UAAI4D,QAAJ,KAAiB3K,SAAjB;AACE,eAAO,CAAC,CAAA,EAAGW,kBAAAY,QAAJ,EAAgC,IAAhC,GAAuCoJ,QAAvC,CAAP;AADF;AAF0C;AAJP;AAYvCC,UAASA,uBAAsB,CAAC7D,IAAD,CAAO;AACpC,QAAI8D,MAAM9D,IAAA8D,IAAV;AACA,QAAI,CAACA,GAAL;AACE;AADF;AAGA,QAAIC,WAAW,EAAf;AACA,QAAIC,QAAQF,GAAAG,WAAAC,KAAZ;AACA,WAAOF,KAAP,IAAgBA,KAAAhJ,KAAhB,KAA+BnB,MAAAsK,UAAAC,QAA/B,IAA2DJ,KAAAK,KAA3D,IAAyEL,KAAAE,KAAzE,IAAuFF,KAAAM,KAAvF,GAAoG,CAApG,KAA0GN,KAAAK,KAAAC,KAA1G,IAA6HN,KAAAM,KAA7H,KAA4IN,KAAAE,KAAAI,KAA5I,CAA6J;AAC3J,UAAIvL,QAAQwL,MAAA,CAAOP,KAAAjL,MAAP,CAAZ;AACAgL,cAAA7G,KAAA,CAAcnE,KAAd,CAAA;AACAiL,WAAA,GAAQA,KAAAE,KAAR;AAH2J;AAK7J,WAAOH,QAAAS,QAAA,EAAAC,KAAA,CAAwB,IAAxB,CAAP;AAZoC;AAmBtCrL,UAASA,YAAW,CAACsL,MAAD,EAAS7I,OAAT,CAAkB;AACpC,WAAO3C,cAAA,CAAe,CAAC,CAAA,EAAGY,OAAA6K,MAAJ,EAAmBD,MAAnB,EAA2B7I,OAA3B,CAAf,EAAoDA,OAApD,CAAP;AADoC;AA9bmF,CAAzH;;",
"sources":["node_modules/graphql/utilities/buildASTSchema.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$buildASTSchema\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ASTDefinitionBuilder = undefined;\nexports.buildASTSchema = buildASTSchema;\nexports.getDescription = getDescription;\nexports.buildSchema = buildSchema;\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _keyValMap = require('../jsutils/keyValMap');\n\nvar _keyValMap2 = _interopRequireDefault(_keyValMap);\n\nvar _valueFromAST = require('./valueFromAST');\n\nvar _blockStringValue = require('../language/blockStringValue');\n\nvar _blockStringValue2 = _interopRequireDefault(_blockStringValue);\n\nvar _lexer = require('../language/lexer');\n\nvar _parser = require('../language/parser');\n\nvar _values = require('../execution/values');\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\nvar _directives = require('../type/directives');\n\nvar _introspection = require('../type/introspection');\n\nvar _scalars = require('../type/scalars');\n\nvar _schema = require('../type/schema');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\nfunction buildWrappedType(innerType, inputTypeNode) {\n  if (inputTypeNode.kind === _kinds.Kind.LIST_TYPE) {\n    return (0, _definition.GraphQLList)(buildWrappedType(innerType, inputTypeNode.type));\n  }\n  if (inputTypeNode.kind === _kinds.Kind.NON_NULL_TYPE) {\n    var wrappedType = buildWrappedType(innerType, inputTypeNode.type);\n    return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(wrappedType));\n  }\n  return innerType;\n}\n\nfunction getNamedTypeNode(typeNode) {\n  var namedType = typeNode;\n  while (namedType.kind === _kinds.Kind.LIST_TYPE || namedType.kind === _kinds.Kind.NON_NULL_TYPE) {\n    namedType = namedType.type;\n  }\n  return namedType;\n}\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query\n * and Mutation.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nfunction buildASTSchema(ast, options) {\n  if (!ast || ast.kind !== _kinds.Kind.DOCUMENT) {\n    throw new Error('Must provide a document ast.');\n  }\n\n  var schemaDef = void 0;\n\n  var typeDefs = [];\n  var nodeMap = Object.create(null);\n  var directiveDefs = [];\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var d = ast.definitions[i];\n    switch (d.kind) {\n      case _kinds.Kind.SCHEMA_DEFINITION:\n        if (schemaDef) {\n          throw new Error('Must provide only one schema definition.');\n        }\n        schemaDef = d;\n        break;\n      case _kinds.Kind.SCALAR_TYPE_DEFINITION:\n      case _kinds.Kind.OBJECT_TYPE_DEFINITION:\n      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:\n      case _kinds.Kind.ENUM_TYPE_DEFINITION:\n      case _kinds.Kind.UNION_TYPE_DEFINITION:\n      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        var typeName = d.name.value;\n        if (nodeMap[typeName]) {\n          throw new Error('Type \"' + typeName + '\" was defined more than once.');\n        }\n        typeDefs.push(d);\n        nodeMap[typeName] = d;\n        break;\n      case _kinds.Kind.DIRECTIVE_DEFINITION:\n        directiveDefs.push(d);\n        break;\n    }\n  }\n\n  var operationTypes = schemaDef ? getOperationTypes(schemaDef) : {\n    query: nodeMap.Query,\n    mutation: nodeMap.Mutation,\n    subscription: nodeMap.Subscription\n  };\n\n  var definitionBuilder = new ASTDefinitionBuilder(nodeMap, options, function (typeRef) {\n    throw new Error('Type \"' + typeRef.name.value + '\" not found in document.');\n  });\n\n  var types = definitionBuilder.buildTypes(typeDefs);\n  var directives = directiveDefs.map(function (def) {\n    return definitionBuilder.buildDirective(def);\n  });\n\n  // If specified directives were not explicitly declared, add them.\n  if (!directives.some(function (directive) {\n    return directive.name === 'skip';\n  })) {\n    directives.push(_directives.GraphQLSkipDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'include';\n  })) {\n    directives.push(_directives.GraphQLIncludeDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'deprecated';\n  })) {\n    directives.push(_directives.GraphQLDeprecatedDirective);\n  }\n\n  // Note: While this could make early assertions to get the correctly\n  // typed values below, that would throw immediately while type system\n  // validation with validateSchema() will produce more actionable results.\n  return new _schema.GraphQLSchema({\n    query: operationTypes.query ? definitionBuilder.buildType(operationTypes.query) : null,\n    mutation: operationTypes.mutation ? definitionBuilder.buildType(operationTypes.mutation) : null,\n    subscription: operationTypes.subscription ? definitionBuilder.buildType(operationTypes.subscription) : null,\n    types: types,\n    directives: directives,\n    astNode: schemaDef,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  });\n\n  function getOperationTypes(schema) {\n    var opTypes = {};\n    schema.operationTypes.forEach(function (operationType) {\n      var typeName = operationType.type.name.value;\n      var operation = operationType.operation;\n      if (opTypes[operation]) {\n        throw new Error('Must provide only one ' + operation + ' type in schema.');\n      }\n      if (!nodeMap[typeName]) {\n        throw new Error('Specified ' + operation + ' type \"' + typeName + '\" not found in document.');\n      }\n      opTypes[operation] = operationType.type;\n    });\n    return opTypes;\n  }\n}\n\nvar ASTDefinitionBuilder = exports.ASTDefinitionBuilder = function () {\n  function ASTDefinitionBuilder(typeDefinitionsMap, options, resolveType) {\n    _classCallCheck(this, ASTDefinitionBuilder);\n\n    this._typeDefinitionsMap = typeDefinitionsMap;\n    this._options = options;\n    this._resolveType = resolveType;\n    // Initialize to the GraphQL built in scalars and introspection types.\n    this._cache = (0, _keyMap2.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function (type) {\n      return type.name;\n    });\n  }\n\n  ASTDefinitionBuilder.prototype.buildTypes = function buildTypes(nodes) {\n    var _this = this;\n\n    return nodes.map(function (node) {\n      return _this.buildType(node);\n    });\n  };\n\n  ASTDefinitionBuilder.prototype.buildType = function buildType(node) {\n    var typeName = node.name.value;\n    if (!this._cache[typeName]) {\n      if (node.kind === _kinds.Kind.NAMED_TYPE) {\n        var defNode = this._typeDefinitionsMap[typeName];\n        this._cache[typeName] = defNode ? this._makeSchemaDef(defNode) : this._resolveType(node);\n      } else {\n        this._cache[typeName] = this._makeSchemaDef(node);\n      }\n    }\n    return this._cache[typeName];\n  };\n\n  ASTDefinitionBuilder.prototype._buildWrappedType = function _buildWrappedType(typeNode) {\n    var typeDef = this.buildType(getNamedTypeNode(typeNode));\n    return buildWrappedType(typeDef, typeNode);\n  };\n\n  ASTDefinitionBuilder.prototype.buildDirective = function buildDirective(directiveNode) {\n    return new _directives.GraphQLDirective({\n      name: directiveNode.name.value,\n      description: getDescription(directiveNode, this._options),\n      locations: directiveNode.locations.map(function (node) {\n        return node.value;\n      }),\n      args: directiveNode.arguments && this._makeInputValues(directiveNode.arguments),\n      astNode: directiveNode\n    });\n  };\n\n  ASTDefinitionBuilder.prototype.buildField = function buildField(field) {\n    return {\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      type: this._buildWrappedType(field.type),\n      description: getDescription(field, this._options),\n      args: field.arguments && this._makeInputValues(field.arguments),\n      deprecationReason: getDeprecationReason(field),\n      astNode: field\n    };\n  };\n\n  ASTDefinitionBuilder.prototype._makeSchemaDef = function _makeSchemaDef(def) {\n    switch (def.kind) {\n      case _kinds.Kind.OBJECT_TYPE_DEFINITION:\n        return this._makeTypeDef(def);\n      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:\n        return this._makeInterfaceDef(def);\n      case _kinds.Kind.ENUM_TYPE_DEFINITION:\n        return this._makeEnumDef(def);\n      case _kinds.Kind.UNION_TYPE_DEFINITION:\n        return this._makeUnionDef(def);\n      case _kinds.Kind.SCALAR_TYPE_DEFINITION:\n        return this._makeScalarDef(def);\n      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        return this._makeInputObjectDef(def);\n      default:\n        throw new Error('Type kind \"' + def.kind + '\" not supported.');\n    }\n  };\n\n  ASTDefinitionBuilder.prototype._makeTypeDef = function _makeTypeDef(def) {\n    var _this2 = this;\n\n    var typeName = def.name.value;\n    var interfaces = def.interfaces;\n    return new _definition.GraphQLObjectType({\n      name: typeName,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return _this2._makeFieldDefMap(def);\n      },\n      // Note: While this could make early assertions to get the correctly\n      // typed values, that would throw immediately while type system\n      // validation with validateSchema() will produce more actionable results.\n      interfaces: interfaces ? function () {\n        return _this2.buildTypes(interfaces);\n      } : [],\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeFieldDefMap = function _makeFieldDefMap(def) {\n    var _this3 = this;\n\n    return def.fields ? (0, _keyValMap2.default)(def.fields, function (field) {\n      return field.name.value;\n    }, function (field) {\n      return _this3.buildField(field);\n    }) : {};\n  };\n\n  ASTDefinitionBuilder.prototype._makeInputValues = function _makeInputValues(values) {\n    var _this4 = this;\n\n    return (0, _keyValMap2.default)(values, function (value) {\n      return value.name.value;\n    }, function (value) {\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      var type = _this4._buildWrappedType(value.type);\n      return {\n        type: type,\n        description: getDescription(value, _this4._options),\n        defaultValue: (0, _valueFromAST.valueFromAST)(value.defaultValue, type),\n        astNode: value\n      };\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeInterfaceDef = function _makeInterfaceDef(def) {\n    var _this5 = this;\n\n    return new _definition.GraphQLInterfaceType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return _this5._makeFieldDefMap(def);\n      },\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeEnumDef = function _makeEnumDef(def) {\n    var _this6 = this;\n\n    return new _definition.GraphQLEnumType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      values: def.values ? (0, _keyValMap2.default)(def.values, function (enumValue) {\n        return enumValue.name.value;\n      }, function (enumValue) {\n        return {\n          description: getDescription(enumValue, _this6._options),\n          deprecationReason: getDeprecationReason(enumValue),\n          astNode: enumValue\n        };\n      }) : {},\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeUnionDef = function _makeUnionDef(def) {\n    return new _definition.GraphQLUnionType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      // Note: While this could make assertions to get the correctly typed\n      // values below, that would throw immediately while type system\n      // validation with validateSchema() will produce more actionable results.\n      types: def.types ? this.buildTypes(def.types) : [],\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeScalarDef = function _makeScalarDef(def) {\n    return new _definition.GraphQLScalarType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      astNode: def,\n      serialize: function serialize(value) {\n        return value;\n      }\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeInputObjectDef = function _makeInputObjectDef(def) {\n    var _this7 = this;\n\n    return new _definition.GraphQLInputObjectType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return def.fields ? _this7._makeInputValues(def.fields) : {};\n      },\n      astNode: def\n    });\n  };\n\n  return ASTDefinitionBuilder;\n}();\n\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\n\nfunction getDeprecationReason(node) {\n  var deprecated = (0, _values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective, node);\n  return deprecated && deprecated.reason;\n}\n\n/**\n * Given an ast node, returns its string description.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nfunction getDescription(node, options) {\n  if (node.description) {\n    return node.description.value;\n  }\n  if (options && options.commentDescriptions) {\n    var rawValue = getLeadingCommentBlock(node);\n    if (rawValue !== undefined) {\n      return (0, _blockStringValue2.default)('\\n' + rawValue);\n    }\n  }\n}\n\nfunction getLeadingCommentBlock(node) {\n  var loc = node.loc;\n  if (!loc) {\n    return;\n  }\n  var comments = [];\n  var token = loc.startToken.prev;\n  while (token && token.kind === _lexer.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {\n    var value = String(token.value);\n    comments.push(value);\n    token = token.prev;\n  }\n  return comments.reverse().join('\\n');\n}\n\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\nfunction buildSchema(source, options) {\n  return buildASTSchema((0, _parser.parse)(source, options), options);\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","ASTDefinitionBuilder","undefined","buildASTSchema","getDescription","buildSchema","_keyMap","_keyMap2","_interopRequireDefault","_keyValMap","_keyValMap2","_valueFromAST","_blockStringValue","_blockStringValue2","_lexer","_parser","_values","_kinds","_definition","_directives","_introspection","_scalars","_schema","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","buildWrappedType","innerType","inputTypeNode","kind","Kind","LIST_TYPE","GraphQLList","type","NON_NULL_TYPE","wrappedType","GraphQLNonNull","assertNullableType","getNamedTypeNode","typeNode","namedType","ast","options","DOCUMENT","Error","schemaDef","typeDefs","nodeMap","create","directiveDefs","i","definitions","length","d","SCHEMA_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","INTERFACE_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","UNION_TYPE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","typeName","name","push","DIRECTIVE_DEFINITION","operationTypes","getOperationTypes","query","Query","mutation","Mutation","subscription","Subscription","definitionBuilder","typeRef","types","buildTypes","directives","map","def","buildDirective","some","directive","GraphQLSkipDirective","GraphQLIncludeDirective","GraphQLDeprecatedDirective","GraphQLSchema","buildType","astNode","assumeValid","allowedLegacyNames","schema","opTypes","forEach","operationType","operation","typeDefinitionsMap","resolveType","_typeDefinitionsMap","_options","_resolveType","_cache","specifiedScalarTypes","concat","introspectionTypes","prototype","ASTDefinitionBuilder.prototype.buildTypes","nodes","_this","node","ASTDefinitionBuilder.prototype.buildType","NAMED_TYPE","defNode","_makeSchemaDef","_buildWrappedType","ASTDefinitionBuilder.prototype._buildWrappedType","typeDef","ASTDefinitionBuilder.prototype.buildDirective","directiveNode","GraphQLDirective","description","locations","args","arguments","_makeInputValues","buildField","ASTDefinitionBuilder.prototype.buildField","field","deprecationReason","getDeprecationReason","ASTDefinitionBuilder.prototype._makeSchemaDef","_makeTypeDef","_makeInterfaceDef","_makeEnumDef","_makeUnionDef","_makeScalarDef","_makeInputObjectDef","ASTDefinitionBuilder.prototype._makeTypeDef","_this2","interfaces","GraphQLObjectType","fields","_makeFieldDefMap","ASTDefinitionBuilder.prototype._makeFieldDefMap","_this3","ASTDefinitionBuilder.prototype._makeInputValues","values","_this4","defaultValue","valueFromAST","ASTDefinitionBuilder.prototype._makeInterfaceDef","_this5","GraphQLInterfaceType","ASTDefinitionBuilder.prototype._makeEnumDef","_this6","GraphQLEnumType","enumValue","ASTDefinitionBuilder.prototype._makeUnionDef","GraphQLUnionType","ASTDefinitionBuilder.prototype._makeScalarDef","GraphQLScalarType","serialize","ASTDefinitionBuilder.prototype._makeInputObjectDef","_this7","GraphQLInputObjectType","deprecated","getDirectiveValues","reason","commentDescriptions","rawValue","getLeadingCommentBlock","loc","comments","token","startToken","prev","TokenKind","COMMENT","next","line","String","reverse","join","source","parse"]
}
