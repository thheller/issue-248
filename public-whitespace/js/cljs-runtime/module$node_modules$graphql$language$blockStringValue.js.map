{
"version":3,
"file":"module$node_modules$graphql$language$blockStringValue.js",
"lineCount":41,
"mappings":"AAAAA,cAAA,CAAe,uDAAf,CAAA,GAA0E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,OAAhB,EAAwBC,MAAxB,EAA+BC,OAA/B,CAAwC;AAG1HC,QAAAC,eAAA,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,IADoC,CAA7C,CAAA;AAGAH,SAAAI,QAAA,GAAkBC,gBAAlB;AAgBAA,UAASA,iBAAgB,CAACC,SAAD,CAAY;AAEnC,QAAIC,QAAQD,SAAAE,MAAA,CAAgB,cAAhB,CAAZ;AAGA,QAAIC,eAAe,IAAnB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBH,KAAAI,OAApB,EAAkCD,CAAA,EAAlC,CAAuC;AACrC,UAAIE,OAAOL,KAAA,CAAMG,CAAN,CAAX;AACA,UAAIG,SAASC,iBAAA,CAAkBF,IAAlB,CAAb;AACA,UAAIC,MAAJ,GAAaD,IAAAD,OAAb,KAA6BF,YAA7B,KAA8C,IAA9C,IAAsDI,MAAtD,GAA+DJ,YAA/D,EAA8E;AAC5EA,oBAAA,GAAeI,MAAf;AACA,YAAIJ,YAAJ,KAAqB,CAArB;AACE;AADF;AAF4E;AAHzC;AAWvC,QAAIA,YAAJ;AACE,WAAK,IAAIM,KAAK,CAAd,EAAiBA,EAAjB,GAAsBR,KAAAI,OAAtB,EAAoCI,EAAA,EAApC;AACER,aAAA,CAAMQ,EAAN,CAAA,GAAYR,KAAA,CAAMQ,EAAN,CAAAC,MAAA,CAAgBP,YAAhB,CAAZ;AADF;AADF;AAOA,WAAOF,KAAAI,OAAP,GAAsB,CAAtB,IAA2BM,OAAA,CAAQV,KAAA,CAAM,CAAN,CAAR,CAA3B;AACEA,WAAAW,MAAA,EAAA;AADF;AAGA,WAAOX,KAAAI,OAAP,GAAsB,CAAtB,IAA2BM,OAAA,CAAQV,KAAA,CAAMA,KAAAI,OAAN,GAAqB,CAArB,CAAR,CAA3B;AACEJ,WAAAY,IAAA,EAAA;AADF;AAKA,WAAOZ,KAAAa,KAAA,CAAW,IAAX,CAAP;AAhCmC;AAmCrCN,UAASA,kBAAiB,CAACO,GAAD,CAAM;AAC9B,QAAIX,IAAI,CAAR;AACA,WAAOA,CAAP,GAAWW,GAAAV,OAAX,KAA0BU,GAAA,CAAIX,CAAJ,CAA1B,KAAqC,GAArC,IAA4CW,GAAA,CAAIX,CAAJ,CAA5C,KAAuD,IAAvD;AACEA,OAAA,EAAA;AADF;AAGA,WAAOA,CAAP;AAL8B;AAQhCO,UAASA,QAAO,CAACI,GAAD,CAAM;AACpB,WAAOP,iBAAA,CAAkBO,GAAlB,CAAP,KAAkCA,GAAAV,OAAlC;AADoB;AAjEoG,CAA1H;;",
"sources":["node_modules/graphql/language/blockStringValue.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$language$blockStringValue\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = blockStringValue;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * Coffeescript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nfunction blockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g);\n\n  // Remove common indentation from all lines but first.\n  var commonIndent = null;\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  }\n\n  // Remove leading and trailing blank lines.\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  }\n\n  // Return a string of the lines joined with U+000A.\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","default","blockStringValue","rawString","lines","split","commonIndent","i","length","line","indent","leadingWhitespace","_i","slice","isBlank","shift","pop","join","str"]
}
