{
"version":3,
"file":"module$node_modules$graphql$validation$rules$FragmentsOnCompositeTypes.js",
"lineCount":33,
"mappings":"AAAAA,cAAA,CAAe,wEAAf,CAAA,GAA2F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,OAAhB,EAAwBC,MAAxB,EAA+BC,OAA/B,CAAwC;AAG3IC,QAAAC,eAAA,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,IADoC,CAA7C,CAAA;AAGAH,SAAAI,yCAAA,GAAmDA,wCAAnD;AACAJ,SAAAK,mCAAA,GAA6CA,kCAA7C;AACAL,SAAAM,0BAAA,GAAoCA,yBAApC;AAEA,MAAIC,SAAST,OAAA,CAAQ,yCAAR,CAAb;AAEA,MAAIU,WAAWV,OAAA,CAAQ,8CAAR,CAAf;AAEA,MAAIW,cAAcX,OAAA,CAAQ,6CAAR,CAAlB;AAEA,MAAIY,eAAeZ,OAAA,CAAQ,mDAAR,CAAnB;AAEAM,UAASA,yCAAwC,CAACO,IAAD,CAAO;AACtD,WAAO,mDAAP,GAA6DC,MAAA,CAAOD,IAAP,CAA7D,GAA4E,IAA5E;AADsD;AAWxDN,UAASA,mCAAkC,CAACQ,QAAD,EAAWF,IAAX,CAAiB;AAC1D,WAAO,YAAP,GAAsBE,QAAtB,GAAiC,sCAAjC,IAA2E,QAA3E,GAAsFD,MAAA,CAAOD,IAAP,CAAtF,GAAqG,IAArG;AAD0D;AAW5DL,UAASA,0BAAyB,CAACQ,OAAD,CAAU;AAC1C,WAAO,CACLC,eAAgBA,QAASA,eAAc,CAACC,IAAD,CAAO;AAC5C,UAAIC,gBAAgBD,IAAAC,cAApB;AACA,UAAIA,aAAJ,CAAmB;AACjB,YAAIN,OAAO,CAAC,CAAA,EAAGD,YAAAQ,YAAJ,EAA8BJ,OAAAK,UAAA,EAA9B,EAAmDF,aAAnD,CAAX;AACA,YAAIN,IAAJ,IAAY,CAAC,CAAC,CAAA,EAAGF,WAAAW,gBAAJ,EAAiCT,IAAjC,CAAb;AACEG,iBAAAO,YAAA,CAAoB,IAAId,MAAAe,aAAJ,CAAwBlB,wCAAA,CAAyC,CAAC,CAAA,EAAGI,QAAAe,MAAJ,EAAoBN,aAApB,CAAzC,CAAxB,EAAsG,CAACA,aAAD,CAAtG,CAApB,CAAA;AADF;AAFiB;AAFyB,KADzC,EAULO,mBAAoBA,QAASA,mBAAkB,CAACR,IAAD,CAAO;AACpD,UAAIL,OAAO,CAAC,CAAA,EAAGD,YAAAQ,YAAJ,EAA8BJ,OAAAK,UAAA,EAA9B,EAAmDH,IAAAC,cAAnD,CAAX;AACA,UAAIN,IAAJ,IAAY,CAAC,CAAC,CAAA,EAAGF,WAAAW,gBAAJ,EAAiCT,IAAjC,CAAb;AACEG,eAAAO,YAAA,CAAoB,IAAId,MAAAe,aAAJ,CAAwBjB,kCAAA,CAAmCW,IAAAS,KAAAtB,MAAnC,EAAoD,CAAC,CAAA,EAAGK,QAAAe,MAAJ,EAAoBP,IAAAC,cAApB,CAApD,CAAxB,EAAsH,CAACD,IAAAC,cAAD,CAAtH,CAApB,CAAA;AADF;AAFoD,KAVjD,CAAP;AAD0C;AAxC+F,CAA3I;;",
"sources":["node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$FragmentsOnCompositeTypes\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineFragmentOnNonCompositeErrorMessage = inlineFragmentOnNonCompositeErrorMessage;\nexports.fragmentOnNonCompositeErrorMessage = fragmentOnNonCompositeErrorMessage;\nexports.FragmentsOnCompositeTypes = FragmentsOnCompositeTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction inlineFragmentOnNonCompositeErrorMessage(type) {\n  return 'Fragment cannot condition on non composite type \"' + String(type) + '\".';\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\nfunction fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return 'Fragment \"' + fragName + '\" cannot condition on non composite ' + ('type \"' + String(type) + '\".');\n}\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nfunction FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n      if (typeCondition) {\n        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);\n        if (type && !(0, _definition.isCompositeType)(type)) {\n          context.reportError(new _error.GraphQLError(inlineFragmentOnNonCompositeErrorMessage((0, _printer.print)(typeCondition)), [typeCondition]));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n      if (type && !(0, _definition.isCompositeType)(type)) {\n        context.reportError(new _error.GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, (0, _printer.print)(node.typeCondition)), [node.typeCondition]));\n      }\n    }\n  };\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","inlineFragmentOnNonCompositeErrorMessage","fragmentOnNonCompositeErrorMessage","FragmentsOnCompositeTypes","_error","_printer","_definition","_typeFromAST","type","String","fragName","context","InlineFragment","node","typeCondition","typeFromAST","getSchema","isCompositeType","reportError","GraphQLError","print","FragmentDefinition","name"]
}
