{
"version":3,
"file":"module$node_modules$graphql$utilities$valueFromAST.js",
"lineCount":120,
"mappings":"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",
"sources":["node_modules/graphql/utilities/valueFromAST.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$valueFromAST\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.valueFromAST = valueFromAST;\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\nfunction valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if ((0, _definition.isNonNullType)(type)) {\n    if (valueNode.kind === _kinds.Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === _kinds.Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (valueNode.kind === _kinds.Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n    if (!variables || (0, _isInvalid2.default)(variables[variableName])) {\n      // No valid return value.\n      return;\n    }\n    // Note: we're not doing any checking that this variable is correct. We're\n    // assuming that this query has been validated and the variable usage here\n    // is of the correct type.\n    return variables[variableName];\n  }\n\n  if ((0, _definition.isListType)(type)) {\n    var itemType = type.ofType;\n    if (valueNode.kind === _kinds.Kind.LIST) {\n      var coercedValues = [];\n      var itemNodes = valueNode.values;\n      for (var i = 0; i < itemNodes.length; i++) {\n        if (isMissingVariable(itemNodes[i], variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if ((0, _definition.isNonNullType)(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNodes[i], itemType, variables);\n          if ((0, _isInvalid2.default)(itemValue)) {\n            return; // Invalid: intentionally return no value.\n          }\n          coercedValues.push(itemValue);\n        }\n      }\n      return coercedValues;\n    }\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n    if ((0, _isInvalid2.default)(coercedValue)) {\n      return; // Invalid: intentionally return no value.\n    }\n    return [coercedValue];\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (valueNode.kind !== _kinds.Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n    var coercedObj = Object.create(null);\n    var fieldNodes = (0, _keyMap2.default)(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n    var fields = (0, _objectValues2.default)(type.getFields());\n    for (var _i = 0; _i < fields.length; _i++) {\n      var field = fields[_i];\n      var fieldNode = fieldNodes[field.name];\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (!(0, _isInvalid2.default)(field.defaultValue)) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if ((0, _definition.isNonNullType)(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n        continue;\n      }\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n      if ((0, _isInvalid2.default)(fieldValue)) {\n        return; // Invalid: intentionally return no value.\n      }\n      coercedObj[field.name] = fieldValue;\n    }\n    return coercedObj;\n  }\n\n  if ((0, _definition.isEnumType)(type)) {\n    if (valueNode.kind !== _kinds.Kind.ENUM) {\n      return; // Invalid: intentionally return no value.\n    }\n    var enumValue = type.getValue(valueNode.value);\n    if (!enumValue) {\n      return; // Invalid: intentionally return no value.\n    }\n    return enumValue.value;\n  }\n\n  if ((0, _definition.isScalarType)(type)) {\n    // Scalars fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result = void 0;\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n    if ((0, _isInvalid2.default)(result)) {\n      return; // Invalid: intentionally return no value.\n    }\n    return result;\n  }\n\n  /* istanbul ignore next */\n  throw new Error('Unknown type: ' + type + '.');\n}\n\n// Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === _kinds.Kind.VARIABLE && (!variables || (0, _isInvalid2.default)(variables[valueNode.name.value]));\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","valueFromAST","_keyMap","_keyMap2","_interopRequireDefault","_isInvalid","_isInvalid2","_objectValues","_objectValues2","_kinds","_definition","obj","__esModule","default","valueNode","type","variables","isNonNullType","kind","Kind","NULL","ofType","VARIABLE","variableName","name","isListType","itemType","LIST","coercedValues","itemNodes","values","i","length","isMissingVariable","push","itemValue","coercedValue","isInputObjectType","OBJECT","coercedObj","create","fieldNodes","fields","field","getFields","_i","fieldNode","defaultValue","fieldValue","isEnumType","ENUM","enumValue","getValue","isScalarType","result","parseLiteral","_error","Error"]
}
