shadow$provide["module$node_modules$graphql$type$directives"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.specifiedDirectives = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = undefined;
  exports.isDirective = isDirective;
  exports.isSpecifiedDirective = isSpecifiedDirective;
  var _definition = require("module$node_modules$graphql$type$definition");
  var _scalars = require("module$node_modules$graphql$type$scalars");
  var _instanceOf = require("module$node_modules$graphql$jsutils$instanceOf");
  var _instanceOf2 = _interopRequireDefault(_instanceOf);
  var _invariant = require("module$node_modules$graphql$jsutils$invariant");
  var _invariant2 = _interopRequireDefault(_invariant);
  var _directiveLocation = require("module$node_modules$graphql$language$directiveLocation");
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function isDirective(directive) {
    return (0, _instanceOf2.default)(directive, GraphQLDirective);
  }
  var GraphQLDirective = exports.GraphQLDirective = function GraphQLDirective(config) {
    _classCallCheck(this, GraphQLDirective);
    this.name = config.name;
    this.description = config.description;
    this.locations = config.locations;
    this.astNode = config.astNode;
    !config.name ? (0, _invariant2.default)(0, "Directive must be named.") : void 0;
    !Array.isArray(config.locations) ? (0, _invariant2.default)(0, "Must provide locations for directive.") : void 0;
    var args = config.args;
    if (!args) {
      this.args = [];
    } else {
      !!Array.isArray(args) ? (0, _invariant2.default)(0, "@" + config.name + " args must be an object with argument names as keys.") : void 0;
      this.args = Object.keys(args).map(function(argName) {
        var arg = args[argName];
        return {name:argName, description:arg.description === undefined ? null : arg.description, type:arg.type, defaultValue:arg.defaultValue, astNode:arg.astNode};
      });
    }
  };
  var GraphQLIncludeDirective = exports.GraphQLIncludeDirective = new GraphQLDirective({name:"include", description:"Directs the executor to include this field or fragment only when " + "the `if` argument is true.", locations:[_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT], args:{if:{type:(0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean), description:"Included when true."}}});
  var GraphQLSkipDirective = exports.GraphQLSkipDirective = new GraphQLDirective({name:"skip", description:"Directs the executor to skip this field or fragment when the `if` " + "argument is true.", locations:[_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT], args:{if:{type:(0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean), description:"Skipped when true."}}});
  var DEFAULT_DEPRECATION_REASON = exports.DEFAULT_DEPRECATION_REASON = "No longer supported";
  var GraphQLDeprecatedDirective = exports.GraphQLDeprecatedDirective = new GraphQLDirective({name:"deprecated", description:"Marks an element of a GraphQL schema as no longer supported.", locations:[_directiveLocation.DirectiveLocation.FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ENUM_VALUE], args:{reason:{type:_scalars.GraphQLString, description:"Explains why this element was deprecated, usually also including a " + "suggestion for how to access supported similar data. Formatted " + "in [Markdown](https://daringfireball.net/projects/markdown/).", 
  defaultValue:DEFAULT_DEPRECATION_REASON}}});
  var specifiedDirectives = exports.specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective];
  function isSpecifiedDirective(directive) {
    return specifiedDirectives.some(function(specifiedDirective) {
      return specifiedDirective.name === directive.name;
    });
  }
};

//# sourceMappingURL=module$node_modules$graphql$type$directives.js.map
