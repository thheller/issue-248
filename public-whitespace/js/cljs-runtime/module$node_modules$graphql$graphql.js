shadow$provide["module$node_modules$graphql$graphql"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.graphql = graphql;
  exports.graphqlSync = graphqlSync;
  var _validate = require("module$node_modules$graphql$type$validate");
  var _parser = require("module$node_modules$graphql$language$parser");
  var _validate2 = require("module$node_modules$graphql$validation$validate");
  var _execute = require("module$node_modules$graphql$execution$execute");
  function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
    var _arguments = arguments;
    return new Promise(function(resolve) {
      return resolve(_arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));
    });
  }
  function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
    var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver);
    if (result.then) {
      throw new Error("GraphQL execution failed to complete synchronously.");
    }
    return result;
  }
  function graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
    var schemaValidationErrors = (0, _validate.validateSchema)(schema);
    if (schemaValidationErrors.length > 0) {
      return {errors:schemaValidationErrors};
    }
    var document = void 0;
    try {
      document = (0, _parser.parse)(source);
    } catch (syntaxError) {
      return {errors:[syntaxError]};
    }
    var validationErrors = (0, _validate2.validate)(schema, document);
    if (validationErrors.length > 0) {
      return {errors:validationErrors};
    }
    return (0, _execute.execute)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);
  }
};

//# sourceMappingURL=module$node_modules$graphql$graphql.js.map
