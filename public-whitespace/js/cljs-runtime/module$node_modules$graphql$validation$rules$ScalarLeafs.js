shadow$provide["module$node_modules$graphql$validation$rules$ScalarLeafs"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.noSubselectionAllowedMessage = noSubselectionAllowedMessage;
  exports.requiredSubselectionMessage = requiredSubselectionMessage;
  exports.ScalarLeafs = ScalarLeafs;
  var _error = require("module$node_modules$graphql$error$index");
  var _definition = require("module$node_modules$graphql$type$definition");
  function noSubselectionAllowedMessage(fieldName, type) {
    return 'Field "' + fieldName + '" must not have a selection since ' + ('type "' + String(type) + '" has no subfields.');
  }
  function requiredSubselectionMessage(fieldName, type) {
    return 'Field "' + fieldName + '" of type "' + String(type) + '" must have a ' + ('selection of subfields. Did you mean "' + fieldName + ' { ... }"?');
  }
  function ScalarLeafs(context) {
    return {Field:function Field(node) {
      var type = context.getType();
      var selectionSet = node.selectionSet;
      if (type) {
        if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {
          if (selectionSet) {
            context.reportError(new _error.GraphQLError(noSubselectionAllowedMessage(node.name.value, type), [selectionSet]));
          }
        } else {
          if (!selectionSet) {
            context.reportError(new _error.GraphQLError(requiredSubselectionMessage(node.name.value, type), [node]));
          }
        }
      }
    }};
  }
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$ScalarLeafs.js.map
