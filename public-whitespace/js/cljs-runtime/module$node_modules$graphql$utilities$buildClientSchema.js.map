{
"version":3,
"file":"module$node_modules$graphql$utilities$buildClientSchema.js",
"lineCount":182,
"mappings":"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",
"sources":["node_modules/graphql/utilities/buildClientSchema.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$buildClientSchema\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildClientSchema = buildClientSchema;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _keyValMap = require('../jsutils/keyValMap');\n\nvar _keyValMap2 = _interopRequireDefault(_keyValMap);\n\nvar _valueFromAST = require('./valueFromAST');\n\nvar _parser = require('../language/parser');\n\nvar _schema = require('../type/schema');\n\nvar _directiveLocation = require('../language/directiveLocation');\n\nvar _definition = require('../type/definition');\n\nvar _directives = require('../type/directives');\n\nvar _introspection = require('../type/introspection');\n\nvar _scalars = require('../type/scalars');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\nfunction buildClientSchema(introspection, options) {\n  // Get the schema from the introspection result.\n  var schemaIntrospection = introspection.__schema;\n\n  // Converts the list of types into a keyMap based on the type names.\n  var typeIntrospectionMap = (0, _keyMap2.default)(schemaIntrospection.types, function (type) {\n    return type.name;\n  });\n\n  // A cache to use to store the actual GraphQLType definition objects by name.\n  // Initialize to the GraphQL built in scalars. All functions below are inline\n  // so that this type def cache is within the scope of the closure.\n  var typeDefCache = (0, _keyMap2.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function (type) {\n    return type.name;\n  });\n\n  // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n  function getType(typeRef) {\n    if (typeRef.kind === _introspection.TypeKind.LIST) {\n      var itemRef = typeRef.ofType;\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n      return (0, _definition.GraphQLList)(getType(itemRef));\n    }\n    if (typeRef.kind === _introspection.TypeKind.NON_NULL) {\n      var nullableRef = typeRef.ofType;\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n      var nullableType = getType(nullableRef);\n      return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(nullableType));\n    }\n    if (!typeRef.name) {\n      throw new Error('Unknown type reference: ' + JSON.stringify(typeRef));\n    }\n    return getNamedType(typeRef.name);\n  }\n\n  function getNamedType(typeName) {\n    if (typeDefCache[typeName]) {\n      return typeDefCache[typeName];\n    }\n    var typeIntrospection = typeIntrospectionMap[typeName];\n    if (!typeIntrospection) {\n      throw new Error('Invalid or incomplete schema, unknown type: ' + typeName + '. Ensure ' + 'that a full introspection query is used in order to build a ' + 'client schema.');\n    }\n    var typeDef = buildType(typeIntrospection);\n    typeDefCache[typeName] = typeDef;\n    return typeDef;\n  }\n\n  function getInputType(typeRef) {\n    var type = getType(typeRef);\n    !(0, _definition.isInputType)(type) ? (0, _invariant2.default)(0, 'Introspection must provide input type for arguments.') : void 0;\n    return type;\n  }\n\n  function getOutputType(typeRef) {\n    var type = getType(typeRef);\n    !(0, _definition.isOutputType)(type) ? (0, _invariant2.default)(0, 'Introspection must provide output type for fields.') : void 0;\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    var type = getType(typeRef);\n    return (0, _definition.assertObjectType)(type);\n  }\n\n  function getInterfaceType(typeRef) {\n    var type = getType(typeRef);\n    return (0, _definition.assertInterfaceType)(type);\n  }\n\n  // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n  function buildType(type) {\n    if (type && type.name && type.kind) {\n      switch (type.kind) {\n        case _introspection.TypeKind.SCALAR:\n          return buildScalarDef(type);\n        case _introspection.TypeKind.OBJECT:\n          return buildObjectDef(type);\n        case _introspection.TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n        case _introspection.TypeKind.UNION:\n          return buildUnionDef(type);\n        case _introspection.TypeKind.ENUM:\n          return buildEnumDef(type);\n        case _introspection.TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n    throw new Error('Invalid or incomplete introspection result. Ensure that a full ' + 'introspection query is used in order to build a client schema:' + JSON.stringify(type));\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new _definition.GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      serialize: function serialize(value) {\n        return value;\n      }\n    });\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    if (!objectIntrospection.interfaces) {\n      throw new Error('Introspection result missing interfaces: ' + JSON.stringify(objectIntrospection));\n    }\n    return new _definition.GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: objectIntrospection.interfaces.map(getInterfaceType),\n      fields: function fields() {\n        return buildFieldDefMap(objectIntrospection);\n      }\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new _definition.GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      fields: function fields() {\n        return buildFieldDefMap(interfaceIntrospection);\n      }\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      throw new Error('Introspection result missing possibleTypes: ' + JSON.stringify(unionIntrospection));\n    }\n    return new _definition.GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: unionIntrospection.possibleTypes.map(getObjectType)\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      throw new Error('Introspection result missing enumValues: ' + JSON.stringify(enumIntrospection));\n    }\n    return new _definition.GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: (0, _keyValMap2.default)(enumIntrospection.enumValues, function (valueIntrospection) {\n        return valueIntrospection.name;\n      }, function (valueIntrospection) {\n        return {\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason\n        };\n      })\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      throw new Error('Introspection result missing inputFields: ' + JSON.stringify(inputObjectIntrospection));\n    }\n    return new _definition.GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: function fields() {\n        return buildInputValueDefMap(inputObjectIntrospection.inputFields);\n      }\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error('Introspection result missing fields: ' + JSON.stringify(typeIntrospection));\n    }\n    return (0, _keyValMap2.default)(typeIntrospection.fields, function (fieldIntrospection) {\n      return fieldIntrospection.name;\n    }, function (fieldIntrospection) {\n      if (!fieldIntrospection.args) {\n        throw new Error('Introspection result missing field args: ' + JSON.stringify(fieldIntrospection));\n      }\n      return {\n        description: fieldIntrospection.description,\n        deprecationReason: fieldIntrospection.deprecationReason,\n        type: getOutputType(fieldIntrospection.type),\n        args: buildInputValueDefMap(fieldIntrospection.args)\n      };\n    });\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return (0, _keyValMap2.default)(inputValueIntrospections, function (inputValue) {\n      return inputValue.name;\n    }, buildInputValue);\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    var type = getInputType(inputValueIntrospection.type);\n    var defaultValue = inputValueIntrospection.defaultValue ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;\n    return {\n      name: inputValueIntrospection.name,\n      description: inputValueIntrospection.description,\n      type: type,\n      defaultValue: defaultValue\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    // Support deprecated `on****` fields for building `locations`, as this\n    // is used by GraphiQL which may need to support outdated servers.\n    var locations = directiveIntrospection.locations ? directiveIntrospection.locations.slice() : [].concat(!directiveIntrospection.onField ? [] : [_directiveLocation.DirectiveLocation.FIELD], !directiveIntrospection.onOperation ? [] : [_directiveLocation.DirectiveLocation.QUERY, _directiveLocation.DirectiveLocation.MUTATION, _directiveLocation.DirectiveLocation.SUBSCRIPTION], !directiveIntrospection.onFragment ? [] : [_directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT]);\n    if (!directiveIntrospection.args) {\n      throw new Error('Introspection result missing directive args: ' + JSON.stringify(directiveIntrospection));\n    }\n    return new _directives.GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      locations: locations,\n      args: buildInputValueDefMap(directiveIntrospection.args)\n    });\n  }\n\n  // Iterate through all types, getting the type definition for each, ensuring\n  // that any type not directly referenced by a field will get created.\n  var types = schemaIntrospection.types.map(function (typeIntrospection) {\n    return getNamedType(typeIntrospection.name);\n  });\n\n  // Get the root Query, Mutation, and Subscription types.\n  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;\n\n  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;\n\n  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null;\n\n  // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];\n\n  // Then produce and return a Schema with these types.\n  return new _schema.GraphQLSchema({\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: types,\n    directives: directives,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  });\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","buildClientSchema","_invariant","_invariant2","_interopRequireDefault","_keyMap","_keyMap2","_keyValMap","_keyValMap2","_valueFromAST","_parser","_schema","_directiveLocation","_definition","_directives","_introspection","_scalars","obj","__esModule","default","introspection","options","schemaIntrospection","__schema","typeIntrospectionMap","types","type","name","typeDefCache","specifiedScalarTypes","concat","introspectionTypes","getType","typeRef","kind","TypeKind","LIST","itemRef","ofType","Error","GraphQLList","NON_NULL","nullableRef","nullableType","GraphQLNonNull","assertNullableType","JSON","stringify","getNamedType","typeName","typeIntrospection","typeDef","buildType","getInputType","isInputType","getOutputType","isOutputType","getObjectType","assertObjectType","getInterfaceType","assertInterfaceType","SCALAR","buildScalarDef","OBJECT","buildObjectDef","INTERFACE","buildInterfaceDef","UNION","buildUnionDef","ENUM","buildEnumDef","INPUT_OBJECT","buildInputObjectDef","scalarIntrospection","GraphQLScalarType","description","serialize","objectIntrospection","interfaces","GraphQLObjectType","map","fields","buildFieldDefMap","interfaceIntrospection","GraphQLInterfaceType","unionIntrospection","possibleTypes","GraphQLUnionType","enumIntrospection","enumValues","GraphQLEnumType","values","valueIntrospection","deprecationReason","inputObjectIntrospection","inputFields","GraphQLInputObjectType","buildInputValueDefMap","fieldIntrospection","args","inputValueIntrospections","inputValue","buildInputValue","inputValueIntrospection","defaultValue","valueFromAST","parseValue","undefined","buildDirective","directiveIntrospection","locations","slice","onField","DirectiveLocation","FIELD","onOperation","QUERY","MUTATION","SUBSCRIPTION","onFragment","FRAGMENT_DEFINITION","FRAGMENT_SPREAD","INLINE_FRAGMENT","GraphQLDirective","queryType","mutationType","subscriptionType","directives","GraphQLSchema","query","mutation","subscription","assumeValid","allowedLegacyNames"]
}
