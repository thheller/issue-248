{
"version":3,
"file":"module$node_modules$graphql$validation$rules$PossibleFragmentSpreads.js",
"lineCount":42,
"mappings":"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",
"sources":["node_modules/graphql/validation/rules/PossibleFragmentSpreads.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$PossibleFragmentSpreads\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeIncompatibleSpreadMessage = typeIncompatibleSpreadMessage;\nexports.typeIncompatibleAnonSpreadMessage = typeIncompatibleAnonSpreadMessage;\nexports.PossibleFragmentSpreads = PossibleFragmentSpreads;\n\nvar _error = require('../../error');\n\nvar _typeComparators = require('../../utilities/typeComparators');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nvar _definition = require('../../type/definition');\n\nfunction typeIncompatibleSpreadMessage(fragName, parentType, fragType) {\n  return 'Fragment \"' + fragName + '\" cannot be spread here as objects of ' + ('type \"' + String(parentType) + '\" can never be of type \"' + String(fragType) + '\".');\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\nfunction typeIncompatibleAnonSpreadMessage(parentType, fragType) {\n  return 'Fragment cannot be spread here as objects of ' + ('type \"' + String(parentType) + '\" can never be of type \"' + String(fragType) + '\".');\n}\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nfunction PossibleFragmentSpreads(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n      if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {\n        context.reportError(new _error.GraphQLError(typeIncompatibleAnonSpreadMessage(parentType, fragType), [node]));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n      if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {\n        context.reportError(new _error.GraphQLError(typeIncompatibleSpreadMessage(fragName, parentType, fragType), [node]));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n  if (frag) {\n    var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);\n    if ((0, _definition.isCompositeType)(type)) {\n      return type;\n    }\n  }\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","typeIncompatibleSpreadMessage","typeIncompatibleAnonSpreadMessage","PossibleFragmentSpreads","_error","_typeComparators","_typeFromAST","_definition","fragName","parentType","fragType","String","context","InlineFragment","node","getType","getParentType","isCompositeType","doTypesOverlap","getSchema","reportError","GraphQLError","FragmentSpread","name","getFragmentType","frag","getFragment","type","typeFromAST","typeCondition"]
}
