{
"version":3,
"file":"module$node_modules$graphql$utilities$astFromValue.js",
"lineCount":91,
"mappings":"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",
"sources":["node_modules/graphql/utilities/astFromValue.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$astFromValue\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  strict\n                                                                                                                                                                                                                                                                               */\n\nexports.astFromValue = astFromValue;\n\nvar _iterall = require('iterall');\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\nvar _scalars = require('../type/scalars');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\nfunction astFromValue(value, type) {\n  if ((0, _definition.isNonNullType)(type)) {\n    var astValue = astFromValue(value, type.ofType);\n    if (astValue && astValue.kind === _kinds.Kind.NULL) {\n      return null;\n    }\n    return astValue;\n  }\n\n  // only explicit null, not undefined, NaN\n  if (value === null) {\n    return { kind: _kinds.Kind.NULL };\n  }\n\n  // undefined, NaN\n  if ((0, _isInvalid2.default)(value)) {\n    return null;\n  }\n\n  // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n  if ((0, _definition.isListType)(type)) {\n    var itemType = type.ofType;\n    if ((0, _iterall.isCollection)(value)) {\n      var valuesNodes = [];\n      (0, _iterall.forEach)(value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return { kind: _kinds.Kind.LIST, values: valuesNodes };\n    }\n    return astFromValue(value, itemType);\n  }\n\n  // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (value === null || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n      return null;\n    }\n    var fields = (0, _objectValues2.default)(type.getFields());\n    var fieldNodes = [];\n    fields.forEach(function (field) {\n      var fieldValue = astFromValue(value[field.name], field.type);\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: _kinds.Kind.OBJECT_FIELD,\n          name: { kind: _kinds.Kind.NAME, value: field.name },\n          value: fieldValue\n        });\n      }\n    });\n    return { kind: _kinds.Kind.OBJECT, fields: fieldNodes };\n  }\n\n  if ((0, _definition.isScalarType)(type) || (0, _definition.isEnumType)(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n    if ((0, _isNullish2.default)(serialized)) {\n      return null;\n    }\n\n    // Others serialize based on their corresponding JavaScript scalar types.\n    if (typeof serialized === 'boolean') {\n      return { kind: _kinds.Kind.BOOLEAN, value: serialized };\n    }\n\n    // JavaScript numbers can be Int or Float values.\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? { kind: _kinds.Kind.INT, value: stringNum } : { kind: _kinds.Kind.FLOAT, value: stringNum };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if ((0, _definition.isEnumType)(type)) {\n        return { kind: _kinds.Kind.ENUM, value: serialized };\n      }\n\n      // ID types can use Int literals.\n      if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {\n        return { kind: _kinds.Kind.INT, value: serialized };\n      }\n\n      return {\n        kind: _kinds.Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError('Cannot convert value to AST: ' + String(serialized));\n  }\n\n  /* istanbul ignore next */\n  throw new Error('Unknown type: ' + type + '.');\n}\n\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\nvar integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","_typeof","Symbol","iterator","obj","constructor","prototype","astFromValue","_iterall","_isNullish","_isNullish2","_interopRequireDefault","_isInvalid","_isInvalid2","_objectValues","_objectValues2","_kinds","_definition","_scalars","__esModule","default","type","isNonNullType","astValue","ofType","kind","Kind","NULL","isListType","itemType","isCollection","valuesNodes","forEach","item","itemNode","push","LIST","values","isInputObjectType","fields","getFields","fieldNodes","field","fieldValue","name","OBJECT_FIELD","NAME","OBJECT","isScalarType","isEnumType","serialized","serialize","BOOLEAN","stringNum","String","integerStringRegExp","test","INT","FLOAT","ENUM","GraphQLID","STRING","TypeError","Error"]
}
