{
"version":3,
"file":"module$node_modules$graphql$execution$execute.js",
"lineCount":499,
"mappings":"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",
"sources":["node_modules/graphql/execution/execute.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$execution$execute\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultFieldResolver = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  strict\n                                                                                                                                                                                                                                                                               */\n\nexports.execute = execute;\nexports.responsePathAsArray = responsePathAsArray;\nexports.addPath = addPath;\nexports.assertValidExecutionArguments = assertValidExecutionArguments;\nexports.buildExecutionContext = buildExecutionContext;\nexports.getOperationRootType = getOperationRootType;\nexports.collectFields = collectFields;\nexports.buildResolveInfo = buildResolveInfo;\nexports.resolveFieldValueOrError = resolveFieldValueOrError;\nexports.getFieldDef = getFieldDef;\n\nvar _iterall = require('iterall');\n\nvar _error = require('../error');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isPromise = require('../jsutils/isPromise');\n\nvar _isPromise2 = _interopRequireDefault(_isPromise);\n\nvar _memoize = require('../jsutils/memoize3');\n\nvar _memoize2 = _interopRequireDefault(_memoize);\n\nvar _promiseForObject = require('../jsutils/promiseForObject');\n\nvar _promiseForObject2 = _interopRequireDefault(_promiseForObject);\n\nvar _promiseReduce = require('../jsutils/promiseReduce');\n\nvar _promiseReduce2 = _interopRequireDefault(_promiseReduce);\n\nvar _typeFromAST = require('../utilities/typeFromAST');\n\nvar _kinds = require('../language/kinds');\n\nvar _values = require('./values');\n\nvar _definition = require('../type/definition');\n\nvar _schema = require('../type/schema');\n\nvar _introspection = require('../type/introspection');\n\nvar _directives = require('../type/directives');\n\nvar _validate = require('../type/validate');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n\n/**\n * The result of GraphQL execution.\n *\n *   - `errors` is included when any errors occurred as a non-empty array.\n *   - `data` is the result of a successful execution of the query.\n */\n\n\n/**\n * Implements the \"Evaluating requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\n/* eslint-disable no-redeclare */\nfunction execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues);\n\n  // If a valid context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n  var context = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n\n  // Return early errors if execution context failed.\n  if (Array.isArray(context)) {\n    return { errors: context };\n  }\n\n  // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  var data = executeOperation(context, context.operation, rootValue);\n  return buildResponse(context, data);\n}\n\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\nfunction buildResponse(context, data) {\n  if ((0, _isPromise2.default)(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(context, resolved);\n    });\n  }\n  return context.errors.length === 0 ? { data: data } : { errors: context.errors, data: data };\n}\n\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\nfunction responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n  return flattened.reverse();\n}\n\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\nfunction addPath(prev, key) {\n  return { prev: prev, key: key };\n}\n\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\nfunction assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? (0, _invariant2.default)(0, 'Must provide document') : void 0;\n\n  // If the schema used for execution is invalid, throw an error.\n  (0, _validate.assertValidSchema)(schema);\n\n  // Variables, if provided, must be an object.\n  !(!rawVariableValues || (typeof rawVariableValues === 'undefined' ? 'undefined' : _typeof(rawVariableValues)) === 'object') ? (0, _invariant2.default)(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\nfunction buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation = void 0;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n    switch (definition.kind) {\n      case _kinds.Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n        break;\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      errors.push(new _error.GraphQLError('Unknown operation named \"' + operationName + '\".'));\n    } else {\n      errors.push(new _error.GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new _error.GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));\n  }\n\n  var variableValues = void 0;\n  if (operation) {\n    var coercedVariableValues = (0, _values.getVariableValues)(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n\n  if (errors.length !== 0) {\n    return errors;\n  }\n\n  !operation ? (0, _invariant2.default)(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? (0, _invariant2.default)(0, 'Has variables if no errors.') : void 0;\n\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n\n  var path = undefined;\n\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n    if ((0, _isPromise2.default)(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nfunction getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      var queryType = schema.getQueryType();\n      if (!queryType) {\n        throw new _error.GraphQLError('Schema does not define the required query root type.', [operation]);\n      }\n      return queryType;\n    case 'mutation':\n      var mutationType = schema.getMutationType();\n      if (!mutationType) {\n        throw new _error.GraphQLError('Schema is not configured for mutations.', [operation]);\n      }\n      return mutationType;\n    case 'subscription':\n      var subscriptionType = schema.getSubscriptionType();\n      if (!subscriptionType) {\n        throw new _error.GraphQLError('Schema is not configured for subscriptions.', [operation]);\n      }\n      return subscriptionType;\n    default:\n      throw new _error.GraphQLError('Can only execute queries, mutations and subscriptions.', [operation]);\n  }\n}\n\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return (0, _promiseReduce2.default)(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    if ((0, _isPromise2.default)(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var containsPromise = false;\n\n  var finalResults = Object.keys(fields).reduce(function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    results[responseName] = result;\n    if (!containsPromise && (0, _isPromise2.default)(result)) {\n      containsPromise = true;\n    }\n    return results;\n  }, Object.create(null));\n\n  // If there are no promises, we can just return the object\n  if (!containsPromise) {\n    return finalResults;\n  }\n\n  // Otherwise, results is a map from field name to the result\n  // of resolving that field, which is possibly a promise. Return\n  // a promise that will return this same map, but with any\n  // promises replaced with the values they resolved to.\n  return (0, _promiseForObject2.default)(finalResults);\n}\n\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\nfunction collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n    switch (selection.kind) {\n      case _kinds.Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        var name = getFieldEntryKey(selection);\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n        fields[name].push(selection);\n        break;\n      case _kinds.Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n      case _kinds.Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n  return fields;\n}\n\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, exeContext.variableValues);\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, exeContext.variableValues);\n  if (include && include.if === false) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Determines if a fragment is applicable to the given type.\n */\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n  if (!typeConditionNode) {\n    return true;\n  }\n  var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);\n  if (conditionalType === type) {\n    return true;\n  }\n  if ((0, _definition.isAbstractType)(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n  return false;\n}\n\n/**\n * Implements the logic to compute the key of a given field's entry\n */\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);\n\n  // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nfunction buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldNodes[0].name.value,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\n\n// Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\nfunction resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues);\n\n    // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n    var context = exeContext.contextValue;\n\n    var result = resolveFn(source, args, context, info);\n    return (0, _isPromise2.default)(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n}\n\n// Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\nfunction asErrorInstance(error) {\n  return error instanceof Error ? error : new Error(error || undefined);\n}\n\n// This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if ((0, _definition.isNonNullType)(returnType)) {\n    return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n  try {\n    var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n    if ((0, _isPromise2.default)(completed)) {\n      // If `completeValueWithLocatedError` returned a rejected promise, log\n      // the rejection error and resolve to null.\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return completed;\n  } catch (error) {\n    // If `completeValueWithLocatedError` returned abruptly (threw an error),\n    // log the error and return null.\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n\n// This is a small wrapper around completeValue which annotates errors with\n// location information.\nfunction completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    if ((0, _isPromise2.default)(completed)) {\n      return completed.then(undefined, function (error) {\n        return Promise.reject((0, _error.locatedError)(asErrorInstance(error), fieldNodes, responsePathAsArray(path)));\n      });\n    }\n    return completed;\n  } catch (error) {\n    throw (0, _error.locatedError)(asErrorInstance(error), fieldNodes, responsePathAsArray(path));\n  }\n}\n\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is a Promise, apply-lift over completeValue.\n  if ((0, _isPromise2.default)(result)) {\n    return result.then(function (resolved) {\n      return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n    });\n  }\n\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  }\n\n  // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n  if ((0, _definition.isNonNullType)(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n    if (completed === null) {\n      throw new Error('Cannot return null for non-nullable field ' + info.parentType.name + '.' + info.fieldName + '.');\n    }\n    return completed;\n  }\n\n  // If result value is null-ish (null, undefined, or NaN) then return null.\n  if ((0, _isNullish2.default)(result)) {\n    return null;\n  }\n\n  // If field type is List, complete each item in the list with the inner type\n  if ((0, _definition.isListType)(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n  if ((0, _definition.isLeafType)(returnType)) {\n    return completeLeafValue(returnType, result);\n  }\n\n  // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n  if ((0, _definition.isAbstractType)(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // If field type is Object, execute and complete all sub-selections.\n  if ((0, _definition.isObjectType)(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // Not reachable. All possible output types have been considered.\n  /* istanbul ignore next */\n  throw new Error('Cannot complete value of unexpected type \"' + String(returnType) + '\".');\n}\n\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !(0, _iterall.isCollection)(result) ? (0, _invariant2.default)(0, 'Expected Iterable, but did not find one for field ' + info.parentType.name + '.' + info.fieldName + '.') : void 0;\n\n  // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  (0, _iterall.forEach)(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && (0, _isPromise2.default)(completedItem)) {\n      containsPromise = true;\n    }\n    completedResults.push(completedItem);\n  });\n\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? (0, _invariant2.default)(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n  if ((0, _isInvalid2.default)(serializedResult)) {\n    throw new Error('Expected a value of type \"' + String(returnType) + '\" but ' + ('received: ' + String(result)));\n  }\n  return serializedResult;\n}\n\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n\n  if ((0, _isPromise2.default)(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!(0, _definition.isObjectType)(runtimeType)) {\n    throw new _error.GraphQLError('Abstract type ' + returnType.name + ' must resolve to an Object type at ' + ('runtime for field ' + info.parentType.name + '.' + info.fieldName + ' with ') + ('value \"' + String(result) + '\", received \"' + String(runtimeType) + '\". ') + ('Either the ' + returnType.name + ' type should provide a \"resolveType\" ') + 'function or each possible types should provide an ' + '\"isTypeOf\" function.', fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new _error.GraphQLError('Runtime Object type \"' + runtimeType.name + '\" is not a possible type ' + ('for \"' + returnType.name + '\".'), fieldNodes);\n  }\n\n  return runtimeType;\n}\n\n/**\n * Complete an Object value by executing all sub-selections.\n */\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if ((0, _isPromise2.default)(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new _error.GraphQLError('Expected value of type \"' + returnType.name + '\" but got: ' + String(result) + '.', fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\n/**\n * A memoized collection of relevant subfields in the context of the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\nvar collectSubfields = (0, _memoize2.default)(_collectSubfields);\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n  return subFieldNodes;\n}\n\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\nfunction defaultResolveTypeFn(value, context, info, abstractType) {\n  // First, look for `__typename`.\n  if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.__typename === 'string') {\n    return value.__typename;\n  }\n\n  // Otherwise, test each possible type.\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, context, info);\n\n      if ((0, _isPromise2.default)(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context.\n */\nvar defaultFieldResolver = exports.defaultFieldResolver = function defaultFieldResolver(source, args, context, info) {\n  // ensure source is a value for which property access is acceptable.\n  if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, context, info);\n    }\n    return property;\n  }\n};\n\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\nfunction getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.SchemaMetaFieldDef;\n  } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.TypeMetaFieldDef;\n  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n  return parentType.getFields()[fieldName];\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","defaultFieldResolver","undefined","_typeof","Symbol","iterator","obj","constructor","prototype","execute","responsePathAsArray","addPath","assertValidExecutionArguments","buildExecutionContext","getOperationRootType","collectFields","buildResolveInfo","resolveFieldValueOrError","getFieldDef","_iterall","_error","_invariant","_invariant2","_interopRequireDefault","_isInvalid","_isInvalid2","_isNullish","_isNullish2","_isPromise","_isPromise2","_memoize","_memoize2","_promiseForObject","_promiseForObject2","_promiseReduce","_promiseReduce2","_typeFromAST","_kinds","_values","_definition","_schema","_introspection","_directives","_validate","__esModule","default","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","arguments","length","executeImpl","schema","context","Array","isArray","errors","data","executeOperation","operation","buildResponse","then","resolved","path","flattened","curr","push","key","prev","reverse","rawVariableValues","assertValidSchema","hasMultipleAssumedOperations","fragments","create","i","definitions","definition","kind","Kind","OPERATION_DEFINITION","name","FRAGMENT_DEFINITION","GraphQLError","coercedVariableValues","getVariableValues","variableDefinitions","apply","coerced","exeContext","type","fields","selectionSet","result","executeFieldsSerially","executeFields","error","Promise","resolve","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType","parentType","sourceValue","keys","results","responseName","fieldNodes","fieldPath","resolveField","resolvedResult","containsPromise","finalResults","reduce","runtimeType","visitedFragmentNames","selections","selection","FIELD","shouldIncludeNode","getFieldEntryKey","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","fragment","node","skip","getDirectiveValues","GraphQLSkipDirective","if","include","GraphQLIncludeDirective","typeConditionNode","typeCondition","conditionalType","typeFromAST","isAbstractType","isPossibleType","alias","source","fieldNode","fieldName","fieldDef","resolveFn","info","completeValueCatchingError","returnType","args","getArgumentValues","asErrorInstance","Error","isNonNullType","completeValueWithLocatedError","completed","completeValue","reject","locatedError","ofType","isListType","completeListValue","isLeafType","completeLeafValue","completeAbstractValue","isObjectType","completeObjectValue","String","isCollection","itemType","completedResults","forEach","item","index","completedItem","all","serialize","serializedResult","resolveType","defaultResolveTypeFn","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","getType","isTypeOf","resolvedIsTypeOf","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","collectSubfields","_collectSubfields","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","isTypeOfResult","isTypeOfResults","_i","exports.defaultFieldResolver","property","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","getFields"]
}
