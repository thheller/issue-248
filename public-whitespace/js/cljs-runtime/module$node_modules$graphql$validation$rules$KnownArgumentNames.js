shadow$provide["module$node_modules$graphql$validation$rules$KnownArgumentNames"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.unknownArgMessage = unknownArgMessage;
  exports.unknownDirectiveArgMessage = unknownDirectiveArgMessage;
  exports.KnownArgumentNames = KnownArgumentNames;
  var _error = require("module$node_modules$graphql$error$index");
  var _suggestionList = require("module$node_modules$graphql$jsutils$suggestionList");
  var _suggestionList2 = _interopRequireDefault(_suggestionList);
  var _quotedOrList = require("module$node_modules$graphql$jsutils$quotedOrList");
  var _quotedOrList2 = _interopRequireDefault(_quotedOrList);
  var _kinds = require("module$node_modules$graphql$language$kinds");
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function unknownArgMessage(argName, fieldName, typeName, suggestedArgs) {
    var message = 'Unknown argument "' + argName + '" on field "' + fieldName + '" of ' + ('type "' + typeName + '".');
    if (suggestedArgs.length) {
      message += " Did you mean " + (0, _quotedOrList2.default)(suggestedArgs) + "?";
    }
    return message;
  }
  function unknownDirectiveArgMessage(argName, directiveName, suggestedArgs) {
    var message = 'Unknown argument "' + argName + '" on directive "@' + directiveName + '".';
    if (suggestedArgs.length) {
      message += " Did you mean " + (0, _quotedOrList2.default)(suggestedArgs) + "?";
    }
    return message;
  }
  function KnownArgumentNames(context) {
    return {Argument:function Argument(node, key, parent, path, ancestors) {
      var argDef = context.getArgument();
      if (!argDef) {
        var argumentOf = ancestors[ancestors.length - 1];
        if (argumentOf.kind === _kinds.Kind.FIELD) {
          var fieldDef = context.getFieldDef();
          var parentType = context.getParentType();
          if (fieldDef && parentType) {
            context.reportError(new _error.GraphQLError(unknownArgMessage(node.name.value, fieldDef.name, parentType.name, (0, _suggestionList2.default)(node.name.value, fieldDef.args.map(function(arg) {
              return arg.name;
            }))), [node]));
          }
        } else {
          if (argumentOf.kind === _kinds.Kind.DIRECTIVE) {
            var directive = context.getDirective();
            if (directive) {
              context.reportError(new _error.GraphQLError(unknownDirectiveArgMessage(node.name.value, directive.name, (0, _suggestionList2.default)(node.name.value, directive.args.map(function(arg) {
                return arg.name;
              }))), [node]));
            }
          }
        }
      }
    }};
  }
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$KnownArgumentNames.js.map
