{
"version":3,
"file":"module$node_modules$graphql$subscription$subscribe.js",
"lineCount":69,
"mappings":"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",
"sources":["node_modules/graphql/subscription/subscribe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$subscription$subscribe\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.subscribe = subscribe;\nexports.createSourceEventStream = createSourceEventStream;\n\nvar _iterall = require('iterall');\n\nvar _GraphQLError = require('../error/GraphQLError');\n\nvar _locatedError = require('../error/locatedError');\n\nvar _execute = require('../execution/execute');\n\nvar _schema = require('../type/schema');\n\nvar _mapAsyncIterator = require('./mapAsyncIterator');\n\nvar _mapAsyncIterator2 = _interopRequireDefault(_mapAsyncIterator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (client error). The promise will be rejected if a\n * server error occurs.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\n/* eslint-disable no-redeclare */\n/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? subscribeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver, argsOrSchema.subscribeFieldResolver) : subscribeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver);\n}\n\n/**\n * This function checks if the error is a GraphQLError. If it is, report it as\n * an ExecutionResult, containing only errors and no data. Otherwise treat the\n * error as a system-class error and re-throw it.\n */\nfunction reportGraphQLError(error) {\n  if (error instanceof _GraphQLError.GraphQLError) {\n    return { errors: [error] };\n  }\n  throw error;\n}\n\nfunction subscribeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);\n\n  // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n  var mapSourceToResponse = function mapSourceToResponse(payload) {\n    return (0, _execute.execute)(schema, document, payload, contextValue, variableValues, operationName, fieldResolver);\n  };\n\n  // Resolve the Source Stream, then map every source value to a\n  // ExecutionResult value as described above.\n  return sourcePromise.then(function (resultOrStream) {\n    return (\n      // Note: Flow can't refine isAsyncIterable, so explicit casts are used.\n      (0, _iterall.isAsyncIterable)(resultOrStream) ? (0, _mapAsyncIterator2.default)(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream\n    );\n  }, reportGraphQLError);\n}\n\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise<AsyncIterable>.\n *\n * If the client-provided invalid arguments, the source stream could not be\n * created, or the resolver did not return an AsyncIterable, this function will\n * will throw an error, which should be caught and handled by the caller.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\nfunction createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  (0, _execute.assertValidExecutionArguments)(schema, document, variableValues);\n\n  try {\n    // If a valid context cannot be created due to incorrect arguments,\n    // this will throw an error.\n    var exeContext = (0, _execute.buildExecutionContext)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n\n    // Return early errors if execution context failed.\n    if (Array.isArray(exeContext)) {\n      return Promise.resolve({ errors: exeContext });\n    }\n\n    var type = (0, _execute.getOperationRootType)(schema, exeContext.operation);\n    var fields = (0, _execute.collectFields)(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));\n    var responseNames = Object.keys(fields);\n    var responseName = responseNames[0];\n    var fieldNodes = fields[responseName];\n    var fieldNode = fieldNodes[0];\n    var fieldName = fieldNode.name.value;\n    var fieldDef = (0, _execute.getFieldDef)(schema, type, fieldName);\n\n    if (!fieldDef) {\n      throw new _GraphQLError.GraphQLError('The subscription field \"' + fieldName + '\" is not defined.', fieldNodes);\n    }\n\n    // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n    var resolveFn = fieldDef.subscribe || exeContext.fieldResolver;\n\n    var path = (0, _execute.addPath)(undefined, responseName);\n\n    var info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, type, path);\n\n    // resolveFieldValueOrError implements the \"ResolveFieldEventStream\"\n    // algorithm from GraphQL specification. It differs from\n    // \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    var result = (0, _execute.resolveFieldValueOrError)(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info);\n\n    // Coerce to Promise for easier error handling and consistent return type.\n    return Promise.resolve(result).then(function (eventStream) {\n      // If eventStream is an Error, rethrow a located error.\n      if (eventStream instanceof Error) {\n        throw (0, _locatedError.locatedError)(eventStream, fieldNodes, (0, _execute.responsePathAsArray)(path));\n      }\n\n      // Assert field returned an event stream, otherwise yield an error.\n      if ((0, _iterall.isAsyncIterable)(eventStream)) {\n        // Note: isAsyncIterable above ensures this will be correct.\n        return eventStream;\n      }\n      throw new Error('Subscription field must return Async Iterable. Received: ' + String(eventStream));\n    });\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","subscribe","createSourceEventStream","_iterall","_GraphQLError","_locatedError","_execute","_schema","_mapAsyncIterator","_mapAsyncIterator2","_interopRequireDefault","obj","__esModule","default","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","subscribeFieldResolver","arguments","length","subscribeImpl","schema","reportGraphQLError","error","GraphQLError","errors","sourcePromise","mapSourceToResponse","payload","execute","then","resultOrStream","isAsyncIterable","assertValidExecutionArguments","exeContext","buildExecutionContext","Array","isArray","Promise","resolve","type","getOperationRootType","operation","fields","collectFields","selectionSet","create","responseNames","keys","responseName","fieldNodes","fieldNode","fieldName","name","fieldDef","getFieldDef","resolveFn","path","addPath","undefined","info","buildResolveInfo","result","resolveFieldValueOrError","eventStream","Error","locatedError","responsePathAsArray","String","reject"]
}
