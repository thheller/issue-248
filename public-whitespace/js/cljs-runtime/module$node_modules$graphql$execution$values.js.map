{
"version":3,
"file":"module$node_modules$graphql$execution$values.js",
"lineCount":119,
"mappings":"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",
"sources":["node_modules/graphql/execution/values.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$execution$values\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getVariableValues = getVariableValues;\nexports.getArgumentValues = getArgumentValues;\nexports.getDirectiveValues = getDirectiveValues;\n\nvar _error = require('../error');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _coerceValue = require('../utilities/coerceValue');\n\nvar _typeFromAST = require('../utilities/typeFromAST');\n\nvar _valueFromAST = require('../utilities/valueFromAST');\n\nvar _kinds = require('../language/kinds');\n\nvar _printer = require('../language/printer');\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction getVariableValues(schema, varDefNodes, inputs) {\n  var errors = [];\n  var coercedValues = {};\n  for (var i = 0; i < varDefNodes.length; i++) {\n    var varDefNode = varDefNodes[i];\n    var varName = varDefNode.variable.name.value;\n    var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);\n    if (!(0, _definition.isInputType)(varType)) {\n      errors.push(new _error.GraphQLError('Variable \"$' + varName + '\" expected value of type ' + ('\"' + (0, _printer.print)(varDefNode.type) + '\" which cannot be used as an input type.'), [varDefNode.type]));\n    } else {\n      var value = inputs[varName];\n      if ((0, _isInvalid2.default)(value)) {\n        if ((0, _definition.isNonNullType)(varType)) {\n          errors.push(new _error.GraphQLError('Variable \"$' + varName + '\" of required type ' + ('\"' + String(varType) + '\" was not provided.'), [varDefNode]));\n        } else if (varDefNode.defaultValue) {\n          coercedValues[varName] = (0, _valueFromAST.valueFromAST)(varDefNode.defaultValue, varType);\n        }\n      } else {\n        var _coerced = (0, _coerceValue.coerceValue)(value, varType, varDefNode);\n        var coercionErrors = _coerced.errors;\n        if (coercionErrors) {\n          (function () {\n            var messagePrelude = 'Variable \"$' + varName + '\" got invalid value ' + JSON.stringify(value) + '; ';\n            coercionErrors.forEach(function (error) {\n              error.message = messagePrelude + error.message;\n            });\n            errors.push.apply(errors, coercionErrors);\n          })();\n        } else {\n          coercedValues[varName] = _coerced.value;\n        }\n      }\n    }\n  }\n  return errors.length === 0 ? { errors: undefined, coerced: coercedValues } : { errors: errors, coerced: undefined };\n}\n\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getArgumentValues(def, node, variableValues) {\n  var coercedValues = {};\n  var argDefs = def.args;\n  var argNodes = node.arguments;\n  if (!argDefs || !argNodes) {\n    return coercedValues;\n  }\n  var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {\n    return arg.name.value;\n  });\n  for (var i = 0; i < argDefs.length; i++) {\n    var argDef = argDefs[i];\n    var name = argDef.name;\n    var argType = argDef.type;\n    var argumentNode = argNodeMap[name];\n    var defaultValue = argDef.defaultValue;\n    if (!argumentNode) {\n      if (!(0, _isInvalid2.default)(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if ((0, _definition.isNonNullType)(argType)) {\n        throw new _error.GraphQLError('Argument \"' + name + '\" of required type ' + ('\"' + String(argType) + '\" was not provided.'), [node]);\n      }\n    } else if (argumentNode.value.kind === _kinds.Kind.VARIABLE) {\n      var variableName = argumentNode.value.name.value;\n      if (variableValues && Object.prototype.hasOwnProperty.call(variableValues, variableName) && !(0, _isInvalid2.default)(variableValues[variableName])) {\n        // Note: this does not check that this variable value is correct.\n        // This assumes that this query has been validated and the variable\n        // usage here is of the correct type.\n        coercedValues[name] = variableValues[variableName];\n      } else if (!(0, _isInvalid2.default)(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if ((0, _definition.isNonNullType)(argType)) {\n        throw new _error.GraphQLError('Argument \"' + name + '\" of required type \"' + String(argType) + '\" was ' + ('provided the variable \"$' + variableName + '\" which was not provided ') + 'a runtime value.', [argumentNode.value]);\n      }\n    } else {\n      var valueNode = argumentNode.value;\n      var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);\n      if ((0, _isInvalid2.default)(coercedValue)) {\n        // Note: ValuesOfCorrectType validation should catch this before\n        // execution. This is a runtime check to ensure execution does not\n        // continue with an invalid argument value.\n        throw new _error.GraphQLError('Argument \"' + name + '\" has invalid value ' + (0, _printer.print)(valueNode) + '.', [argumentNode.value]);\n      }\n      coercedValues[name] = coercedValue;\n    }\n  }\n  return coercedValues;\n}\n\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getDirectiveValues(directiveDef, node, variableValues) {\n  var directiveNode = node.directives && (0, _find2.default)(node.directives, function (directive) {\n    return directive.name.value === directiveDef.name;\n  });\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","getVariableValues","getArgumentValues","getDirectiveValues","_error","_find","_find2","_interopRequireDefault","_isInvalid","_isInvalid2","_keyMap","_keyMap2","_coerceValue","_typeFromAST","_valueFromAST","_kinds","_printer","_definition","obj","__esModule","default","schema","varDefNodes","inputs","errors","coercedValues","i","length","varDefNode","varName","variable","name","varType","typeFromAST","type","isInputType","push","GraphQLError","print","isNonNullType","String","defaultValue","valueFromAST","_coerced","coerceValue","coercionErrors","messagePrelude","JSON","stringify","forEach","error","message","apply","undefined","coerced","def","node","variableValues","argDefs","args","argNodes","arguments","argNodeMap","arg","argDef","argType","argumentNode","kind","Kind","VARIABLE","variableName","prototype","hasOwnProperty","call","valueNode","coercedValue","directiveDef","directiveNode","directives","directive"]
}
