shadow$provide["module$node_modules$graphql$validation$validate"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.validate = validate;
  var _invariant = require("module$node_modules$graphql$jsutils$invariant");
  var _invariant2 = _interopRequireDefault(_invariant);
  var _error = require("module$node_modules$graphql$error$index");
  var _visitor = require("module$node_modules$graphql$language$visitor");
  var _schema = require("module$node_modules$graphql$type$schema");
  var _validate = require("module$node_modules$graphql$type$validate");
  var _TypeInfo = require("module$node_modules$graphql$utilities$TypeInfo");
  var _specifiedRules = require("module$node_modules$graphql$validation$specifiedRules");
  var _ValidationContext = require("module$node_modules$graphql$validation$ValidationContext");
  var _ValidationContext2 = _interopRequireDefault(_ValidationContext);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function validate(schema, ast, rules, typeInfo) {
    !ast ? (0, _invariant2.default)(0, "Must provide document") : void 0;
    (0, _validate.assertValidSchema)(schema);
    return visitUsingRules(schema, typeInfo || new _TypeInfo.TypeInfo(schema), ast, rules || _specifiedRules.specifiedRules);
  }
  function visitUsingRules(schema, typeInfo, documentAST, rules) {
    var context = new _ValidationContext2.default(schema, documentAST, typeInfo);
    var visitors = rules.map(function(rule) {
      return rule(context);
    });
    (0, _visitor.visit)(documentAST, (0, _visitor.visitWithTypeInfo)(typeInfo, (0, _visitor.visitInParallel)(visitors)));
    return context.getErrors();
  }
};

//# sourceMappingURL=module$node_modules$graphql$validation$validate.js.map
