shadow$provide["module$node_modules$graphql$utilities$findDeprecatedUsages"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.findDeprecatedUsages = findDeprecatedUsages;
  var _GraphQLError = require("module$node_modules$graphql$error$GraphQLError");
  var _visitor = require("module$node_modules$graphql$language$visitor");
  var _definition = require("module$node_modules$graphql$type$definition");
  var _schema = require("module$node_modules$graphql$type$schema");
  var _TypeInfo = require("module$node_modules$graphql$utilities$TypeInfo");
  function findDeprecatedUsages(schema, ast) {
    var errors = [];
    var typeInfo = new _TypeInfo.TypeInfo(schema);
    (0, _visitor.visit)(ast, (0, _visitor.visitWithTypeInfo)(typeInfo, {Field:function Field(node) {
      var fieldDef = typeInfo.getFieldDef();
      if (fieldDef && fieldDef.isDeprecated) {
        var parentType = typeInfo.getParentType();
        if (parentType) {
          var reason = fieldDef.deprecationReason;
          errors.push(new _GraphQLError.GraphQLError("The field " + parentType.name + "." + fieldDef.name + " is deprecated." + (reason ? " " + reason : ""), [node]));
        }
      }
    }, EnumValue:function EnumValue(node) {
      var enumVal = typeInfo.getEnumValue();
      if (enumVal && enumVal.isDeprecated) {
        var type = (0, _definition.getNamedType)(typeInfo.getInputType());
        if (type) {
          var reason = enumVal.deprecationReason;
          errors.push(new _GraphQLError.GraphQLError("The enum value " + type.name + "." + enumVal.name + " is deprecated." + (reason ? " " + reason : ""), [node]));
        }
      }
    }}));
    return errors;
  }
};

//# sourceMappingURL=module$node_modules$graphql$utilities$findDeprecatedUsages.js.map
