shadow$provide["module$node_modules$graphql$utilities$separateOperations"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.separateOperations = separateOperations;
  var _visitor = require("module$node_modules$graphql$language$visitor");
  function separateOperations(documentAST) {
    var operations = [];
    var fragments = Object.create(null);
    var positions = new Map;
    var depGraph = Object.create(null);
    var fromName = void 0;
    var idx = 0;
    (0, _visitor.visit)(documentAST, {OperationDefinition:function OperationDefinition(node) {
      fromName = opName(node);
      operations.push(node);
      positions.set(node, idx++);
    }, FragmentDefinition:function FragmentDefinition(node) {
      fromName = node.name.value;
      fragments[fromName] = node;
      positions.set(node, idx++);
    }, FragmentSpread:function FragmentSpread(node) {
      var toName = node.name.value;
      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;
    }});
    var separatedDocumentASTs = Object.create(null);
    operations.forEach(function(operation) {
      var operationName = opName(operation);
      var dependencies = Object.create(null);
      collectTransitiveDependencies(dependencies, depGraph, operationName);
      var definitions = [operation];
      Object.keys(dependencies).forEach(function(name) {
        definitions.push(fragments[name]);
      });
      definitions.sort(function(n1, n2) {
        return (positions.get(n1) || 0) - (positions.get(n2) || 0);
      });
      separatedDocumentASTs[operationName] = {kind:"Document", definitions:definitions};
    });
    return separatedDocumentASTs;
  }
  function opName(operation) {
    return operation.name ? operation.name.value : "";
  }
  function collectTransitiveDependencies(collected, depGraph, fromName) {
    var immediateDeps = depGraph[fromName];
    if (immediateDeps) {
      Object.keys(immediateDeps).forEach(function(toName) {
        if (!collected[toName]) {
          collected[toName] = true;
          collectTransitiveDependencies(collected, depGraph, toName);
        }
      });
    }
  }
};

//# sourceMappingURL=module$node_modules$graphql$utilities$separateOperations.js.map
