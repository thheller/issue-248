{
"version":3,
"file":"module$node_modules$graphql$type$validate.js",
"lineCount":374,
"mappings":"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",
"sources":["node_modules/graphql/type/validate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$type$validate\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateSchema = validateSchema;\nexports.assertValidSchema = assertValidSchema;\n\nvar _definition = require('./definition');\n\nvar _directives = require('./directives');\n\nvar _introspection = require('./introspection');\n\nvar _schema = require('./schema');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _GraphQLError = require('../error/GraphQLError');\n\nvar _assertValidName = require('../utilities/assertValidName');\n\nvar _typeComparators = require('../utilities/typeComparators');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\nfunction validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  !(0, _schema.isSchema)(schema) ? (0, _invariant2.default)(0, 'Expected ' + String(schema) + ' to be a GraphQL schema.') : void 0;\n\n  // If this Schema has already been validated, return the previous results.\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  }\n\n  // Validate the schema, producing a list of errors.\n  var context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context);\n\n  // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n  var errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\nfunction assertValidSchema(schema) {\n  var errors = validateSchema(schema);\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n\nvar SchemaValidationContext = function () {\n  function SchemaValidationContext(schema) {\n    _classCallCheck(this, SchemaValidationContext);\n\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  SchemaValidationContext.prototype.reportError = function reportError(message, nodes) {\n    var _nodes = (Array.isArray(nodes) ? nodes : [nodes]).filter(Boolean);\n    this.addError(new _GraphQLError.GraphQLError(message, _nodes));\n  };\n\n  SchemaValidationContext.prototype.addError = function addError(error) {\n    this._errors.push(error);\n  };\n\n  SchemaValidationContext.prototype.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  return SchemaValidationContext;\n}();\n\nfunction validateRootTypes(context) {\n  var schema = context.schema;\n  var queryType = schema.getQueryType();\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!(0, _definition.isObjectType)(queryType)) {\n    context.reportError('Query root type must be Object type, it cannot be ' + String(queryType) + '.', getOperationTypeNode(schema, queryType, 'query'));\n  }\n\n  var mutationType = schema.getMutationType();\n  if (mutationType && !(0, _definition.isObjectType)(mutationType)) {\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + (String(mutationType) + '.'), getOperationTypeNode(schema, mutationType, 'mutation'));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n  if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + (String(subscriptionType) + '.'), getOperationTypeNode(schema, subscriptionType, 'subscription'));\n  }\n}\n\nfunction getOperationTypeNode(schema, type, operation) {\n  var astNode = schema.astNode;\n  var operationTypeNode = astNode && astNode.operationTypes.find(function (operationType) {\n    return operationType.operation === operation;\n  });\n  return operationTypeNode ? operationTypeNode.type : type && type.astNode;\n}\n\nfunction validateDirectives(context) {\n  var directives = context.schema.getDirectives();\n  directives.forEach(function (directive) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!(0, _directives.isDirective)(directive)) {\n      context.reportError('Expected directive but got: ' + String(directive) + '.', directive && directive.astNode);\n      return;\n    }\n\n    // Ensure they are named correctly.\n    validateName(context, directive);\n\n    // TODO: Ensure proper locations.\n\n    // Ensure the arguments are valid.\n    var argNames = Object.create(null);\n    directive.args.forEach(function (arg) {\n      var argName = arg.name;\n\n      // Ensure they are named correctly.\n      validateName(context, arg);\n\n      // Ensure they are unique per directive.\n      if (argNames[argName]) {\n        context.reportError('Argument @' + directive.name + '(' + argName + ':) can only be defined once.', getAllDirectiveArgNodes(directive, argName));\n        return; // continue loop\n      }\n      argNames[argName] = true;\n\n      // Ensure the type is an input type.\n      if (!(0, _definition.isInputType)(arg.type)) {\n        context.reportError('The type of @' + directive.name + '(' + argName + ':) must be Input Type ' + ('but got: ' + String(arg.type) + '.'), getDirectiveArgTypeNode(directive, argName));\n      }\n    });\n  });\n}\n\nfunction validateName(context, node) {\n  // If a schema explicitly allows some legacy name which is no longer valid,\n  // allow it to be assumed valid.\n  if (context.schema.__allowedLegacyNames && context.schema.__allowedLegacyNames.indexOf(node.name) !== -1) {\n    return;\n  }\n  // Ensure names are valid, however introspection types opt out.\n  var error = (0, _assertValidName.isValidNameError)(node.name, node.astNode || undefined);\n  if (error) {\n    context.addError(error);\n  }\n}\n\nfunction validateTypes(context) {\n  var typeMap = context.schema.getTypeMap();\n  (0, _objectValues2.default)(typeMap).forEach(function (type) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!(0, _definition.isNamedType)(type)) {\n      context.reportError('Expected GraphQL named type but got: ' + String(type) + '.', type && type.astNode);\n      return;\n    }\n\n    // Ensure it is named correctly (excluding introspection types).\n    if (!(0, _introspection.isIntrospectionType)(type)) {\n      validateName(context, type);\n    }\n\n    if ((0, _definition.isObjectType)(type)) {\n      // Ensure fields are valid\n      validateFields(context, type);\n\n      // Ensure objects implement the interfaces they claim to.\n      validateObjectInterfaces(context, type);\n    } else if ((0, _definition.isInterfaceType)(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type);\n    } else if ((0, _definition.isUnionType)(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if ((0, _definition.isEnumType)(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if ((0, _definition.isInputObjectType)(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type);\n    }\n  });\n}\n\nfunction validateFields(context, type) {\n  var fields = (0, _objectValues2.default)(type.getFields());\n\n  // Objects and Interfaces both must define one or more fields.\n  if (fields.length === 0) {\n    context.reportError('Type ' + type.name + ' must define one or more fields.', getAllObjectOrInterfaceNodes(type));\n  }\n\n  fields.forEach(function (field) {\n    // Ensure they are named correctly.\n    validateName(context, field);\n\n    // Ensure they were defined at most once.\n    var fieldNodes = getAllFieldNodes(type, field.name);\n    if (fieldNodes.length > 1) {\n      context.reportError('Field ' + type.name + '.' + field.name + ' can only be defined once.', fieldNodes);\n      return; // continue loop\n    }\n\n    // Ensure the type is an output type\n    if (!(0, _definition.isOutputType)(field.type)) {\n      context.reportError('The type of ' + type.name + '.' + field.name + ' must be Output Type ' + ('but got: ' + String(field.type) + '.'), getFieldTypeNode(type, field.name));\n    }\n\n    // Ensure the arguments are valid\n    var argNames = Object.create(null);\n    field.args.forEach(function (arg) {\n      var argName = arg.name;\n\n      // Ensure they are named correctly.\n      validateName(context, arg);\n\n      // Ensure they are unique per field.\n      if (argNames[argName]) {\n        context.reportError('Field argument ' + type.name + '.' + field.name + '(' + argName + ':) can only ' + 'be defined once.', getAllFieldArgNodes(type, field.name, argName));\n      }\n      argNames[argName] = true;\n\n      // Ensure the type is an input type\n      if (!(0, _definition.isInputType)(arg.type)) {\n        context.reportError('The type of ' + type.name + '.' + field.name + '(' + argName + ':) must be Input ' + ('Type but got: ' + String(arg.type) + '.'), getFieldArgTypeNode(type, field.name, argName));\n      }\n    });\n  });\n}\n\nfunction validateObjectInterfaces(context, object) {\n  var implementedTypeNames = Object.create(null);\n  object.getInterfaces().forEach(function (iface) {\n    if (!(0, _definition.isInterfaceType)(iface)) {\n      context.reportError('Type ' + String(object) + ' must only implement Interface types, ' + ('it cannot implement ' + String(iface) + '.'), getImplementsInterfaceNode(object, iface));\n      return;\n    }\n\n    if (implementedTypeNames[iface.name]) {\n      context.reportError('Type ' + object.name + ' can only implement ' + iface.name + ' once.', getAllImplementsInterfaceNodes(object, iface));\n      return; // continue loop\n    }\n    implementedTypeNames[iface.name] = true;\n    validateObjectImplementsInterface(context, object, iface);\n  });\n}\n\nfunction validateObjectImplementsInterface(context, object, iface) {\n  var objectFieldMap = object.getFields();\n  var ifaceFieldMap = iface.getFields();\n\n  // Assert each interface field is implemented.\n  Object.keys(ifaceFieldMap).forEach(function (fieldName) {\n    var objectField = objectFieldMap[fieldName];\n    var ifaceField = ifaceFieldMap[fieldName];\n\n    // Assert interface field exists on object.\n    if (!objectField) {\n      context.reportError('Interface field ' + iface.name + '.' + fieldName + ' expected but ' + (object.name + ' does not provide it.'), [getFieldNode(iface, fieldName), object.astNode]);\n      // Continue loop over fields.\n      return;\n    }\n\n    // Assert interface field type is satisfied by object field type, by being\n    // a valid subtype. (covariant)\n    if (!(0, _typeComparators.isTypeSubTypeOf)(context.schema, objectField.type, ifaceField.type)) {\n      context.reportError('Interface field ' + iface.name + '.' + fieldName + ' expects type ' + (String(ifaceField.type) + ' but ' + object.name + '.' + fieldName + ' ') + ('is type ' + String(objectField.type) + '.'), [getFieldTypeNode(iface, fieldName), getFieldTypeNode(object, fieldName)]);\n    }\n\n    // Assert each interface field arg is implemented.\n    ifaceField.args.forEach(function (ifaceArg) {\n      var argName = ifaceArg.name;\n      var objectArg = (0, _find2.default)(objectField.args, function (arg) {\n        return arg.name === argName;\n      });\n\n      // Assert interface field arg exists on object field.\n      if (!objectArg) {\n        context.reportError('Interface field argument ' + iface.name + '.' + fieldName + '(' + argName + ':) ' + ('expected but ' + object.name + '.' + fieldName + ' does not provide it.'), [getFieldArgNode(iface, fieldName, argName), getFieldNode(object, fieldName)]);\n        // Continue loop over arguments.\n        return;\n      }\n\n      // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n      if (!(0, _typeComparators.isEqualType)(ifaceArg.type, objectArg.type)) {\n        context.reportError('Interface field argument ' + iface.name + '.' + fieldName + '(' + argName + ':) ' + ('expects type ' + String(ifaceArg.type) + ' but ') + (object.name + '.' + fieldName + '(' + argName + ':) is type ') + (String(objectArg.type) + '.'), [getFieldArgTypeNode(iface, fieldName, argName), getFieldArgTypeNode(object, fieldName, argName)]);\n      }\n\n      // TODO: validate default values?\n    });\n\n    // Assert additional arguments must not be required.\n    objectField.args.forEach(function (objectArg) {\n      var argName = objectArg.name;\n      var ifaceArg = (0, _find2.default)(ifaceField.args, function (arg) {\n        return arg.name === argName;\n      });\n      if (!ifaceArg && (0, _definition.isNonNullType)(objectArg.type)) {\n        context.reportError('Object field argument ' + object.name + '.' + fieldName + '(' + argName + ':) ' + ('is of required type ' + String(objectArg.type) + ' but is not also ') + ('provided by the Interface field ' + iface.name + '.' + fieldName + '.'), [getFieldArgTypeNode(object, fieldName, argName), getFieldNode(iface, fieldName)]);\n      }\n    });\n  });\n}\n\nfunction validateUnionMembers(context, union) {\n  var memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError('Union type ' + union.name + ' must define one or more member types.', union.astNode);\n  }\n\n  var includedTypeNames = Object.create(null);\n  memberTypes.forEach(function (memberType) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError('Union type ' + union.name + ' can only include type ' + (memberType.name + ' once.'), getUnionMemberTypeNodes(union, memberType.name));\n      return; // continue loop\n    }\n    includedTypeNames[memberType.name] = true;\n    if (!(0, _definition.isObjectType)(memberType)) {\n      context.reportError('Union type ' + union.name + ' can only include Object types, ' + ('it cannot include ' + String(memberType) + '.'), getUnionMemberTypeNodes(union, String(memberType)));\n    }\n  });\n}\n\nfunction validateEnumValues(context, enumType) {\n  var enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError('Enum type ' + enumType.name + ' must define one or more values.', enumType.astNode);\n  }\n\n  enumValues.forEach(function (enumValue) {\n    var valueName = enumValue.name;\n\n    // Ensure no duplicates.\n    var allNodes = getEnumValueNodes(enumType, valueName);\n    if (allNodes && allNodes.length > 1) {\n      context.reportError('Enum type ' + enumType.name + ' can include value ' + valueName + ' only once.', allNodes);\n    }\n\n    // Ensure valid name.\n    validateName(context, enumValue);\n    if (valueName === 'true' || valueName === 'false' || valueName === 'null') {\n      context.reportError('Enum type ' + enumType.name + ' cannot include value: ' + valueName + '.', enumValue.astNode);\n    }\n  });\n}\n\nfunction validateInputFields(context, inputObj) {\n  var fields = (0, _objectValues2.default)(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError('Input Object type ' + inputObj.name + ' must define one or more fields.', inputObj.astNode);\n  }\n\n  // Ensure the arguments are valid\n  fields.forEach(function (field) {\n    // Ensure they are named correctly.\n    validateName(context, field);\n\n    // TODO: Ensure they are unique per field.\n\n    // Ensure the type is an input type\n    if (!(0, _definition.isInputType)(field.type)) {\n      context.reportError('The type of ' + inputObj.name + '.' + field.name + ' must be Input Type ' + ('but got: ' + String(field.type) + '.'), field.astNode && field.astNode.type);\n    }\n  });\n}\n\nfunction getAllObjectNodes(type) {\n  return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];\n}\n\nfunction getAllObjectOrInterfaceNodes(type) {\n  return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];\n}\n\nfunction getImplementsInterfaceNode(type, iface) {\n  return getAllImplementsInterfaceNodes(type, iface)[0];\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  var implementsNodes = [];\n  var astNodes = getAllObjectNodes(type);\n  for (var i = 0; i < astNodes.length; i++) {\n    var _astNode = astNodes[i];\n    if (_astNode && _astNode.interfaces) {\n      _astNode.interfaces.forEach(function (node) {\n        if (node.name.value === iface.name) {\n          implementsNodes.push(node);\n        }\n      });\n    }\n  }\n  return implementsNodes;\n}\n\nfunction getFieldNode(type, fieldName) {\n  return getAllFieldNodes(type, fieldName)[0];\n}\n\nfunction getAllFieldNodes(type, fieldName) {\n  var fieldNodes = [];\n  var astNodes = getAllObjectOrInterfaceNodes(type);\n  for (var i = 0; i < astNodes.length; i++) {\n    var _astNode2 = astNodes[i];\n    if (_astNode2 && _astNode2.fields) {\n      _astNode2.fields.forEach(function (node) {\n        if (node.name.value === fieldName) {\n          fieldNodes.push(node);\n        }\n      });\n    }\n  }\n  return fieldNodes;\n}\n\nfunction getFieldTypeNode(type, fieldName) {\n  var fieldNode = getFieldNode(type, fieldName);\n  return fieldNode && fieldNode.type;\n}\n\nfunction getFieldArgNode(type, fieldName, argName) {\n  return getAllFieldArgNodes(type, fieldName, argName)[0];\n}\n\nfunction getAllFieldArgNodes(type, fieldName, argName) {\n  var argNodes = [];\n  var fieldNode = getFieldNode(type, fieldName);\n  if (fieldNode && fieldNode.arguments) {\n    fieldNode.arguments.forEach(function (node) {\n      if (node.name.value === argName) {\n        argNodes.push(node);\n      }\n    });\n  }\n  return argNodes;\n}\n\nfunction getFieldArgTypeNode(type, fieldName, argName) {\n  var fieldArgNode = getFieldArgNode(type, fieldName, argName);\n  return fieldArgNode && fieldArgNode.type;\n}\n\nfunction getAllDirectiveArgNodes(directive, argName) {\n  var argNodes = [];\n  var directiveNode = directive.astNode;\n  if (directiveNode && directiveNode.arguments) {\n    directiveNode.arguments.forEach(function (node) {\n      if (node.name.value === argName) {\n        argNodes.push(node);\n      }\n    });\n  }\n  return argNodes;\n}\n\nfunction getDirectiveArgTypeNode(directive, argName) {\n  var argNode = getAllDirectiveArgNodes(directive, argName)[0];\n  return argNode && argNode.type;\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  return union.astNode && union.astNode.types && union.astNode.types.filter(function (type) {\n    return type.name.value === typeName;\n  });\n}\n\nfunction getEnumValueNodes(enumType, valueName) {\n  return enumType.astNode && enumType.astNode.values && enumType.astNode.values.filter(function (value) {\n    return value.name.value === valueName;\n  });\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","validateSchema","assertValidSchema","_definition","_directives","_introspection","_schema","_find","_find2","_interopRequireDefault","_invariant","_invariant2","_objectValues","_objectValues2","_GraphQLError","_assertValidName","_typeComparators","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","schema","isSchema","String","__validationErrors","context","SchemaValidationContext","validateRootTypes","validateDirectives","validateTypes","errors","getErrors","length","Error","map","error","message","join","_errors","prototype","reportError","SchemaValidationContext.prototype.reportError","nodes","_nodes","filter","Array","isArray","Boolean","addError","GraphQLError","SchemaValidationContext.prototype.addError","push","SchemaValidationContext.prototype.getErrors","queryType","getQueryType","astNode","isObjectType","getOperationTypeNode","mutationType","getMutationType","subscriptionType","getSubscriptionType","type","operation","operationTypeNode","operationTypes","find","operationType","directives","getDirectives","forEach","directive","isDirective","validateName","argNames","create","args","arg","argName","name","getAllDirectiveArgNodes","isInputType","getDirectiveArgTypeNode","node","__allowedLegacyNames","indexOf","isValidNameError","undefined","typeMap","getTypeMap","isNamedType","isIntrospectionType","validateFields","validateObjectInterfaces","isInterfaceType","isUnionType","validateUnionMembers","isEnumType","validateEnumValues","isInputObjectType","validateInputFields","fields","getFields","getAllObjectOrInterfaceNodes","field","fieldNodes","getAllFieldNodes","isOutputType","getFieldTypeNode","getAllFieldArgNodes","getFieldArgTypeNode","object","implementedTypeNames","getInterfaces","iface","getImplementsInterfaceNode","getAllImplementsInterfaceNodes","validateObjectImplementsInterface","objectFieldMap","ifaceFieldMap","keys","fieldName","objectField","ifaceField","getFieldNode","isTypeSubTypeOf","ifaceArg","objectArg","getFieldArgNode","isEqualType","isNonNullType","union","memberTypes","getTypes","includedTypeNames","memberType","getUnionMemberTypeNodes","enumType","enumValues","getValues","enumValue","valueName","allNodes","getEnumValueNodes","inputObj","getAllObjectNodes","extensionASTNodes","concat","implementsNodes","astNodes","i","_astNode","interfaces","_astNode2","fieldNode","argNodes","arguments","fieldArgNode","directiveNode","argNode","typeName","types","values"]
}
