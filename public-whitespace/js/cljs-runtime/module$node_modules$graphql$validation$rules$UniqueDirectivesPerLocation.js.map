{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueDirectivesPerLocation.js",
"lineCount":26,
"mappings":"AAAAA,cAAA,CAAe,0EAAf,CAAA,GAA6F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,OAAhB,EAAwBC,MAAxB,EAA+BC,OAA/B,CAAwC;AAG7IC,QAAAC,eAAA,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,IADoC,CAA7C,CAAA;AAGAH,SAAAI,0BAAA,GAAoCA,yBAApC;AACAJ,SAAAK,4BAAA,GAAsCA,2BAAtC;AAEA,MAAIC,SAASR,OAAA,CAAQ,yCAAR,CAAb;AAWAM,UAASA,0BAAyB,CAACG,aAAD,CAAgB;AAChD,WAAO,iBAAP,GAA2BA,aAA3B,GAA2C,6BAA3C,GAA2E,gBAA3E;AADgD;AAUlDF,UAASA,4BAA2B,CAACG,OAAD,CAAU;AAC5C,WAAO,CAILC,MAAOA,QAASA,MAAK,CAACC,IAAD,CAAO;AAE1B,UAAIC,aAAaD,IAAAC,WAAjB;AACA,UAAIA,UAAJ,CAAgB;AACd,YAAIC,kBAAkBX,MAAAY,OAAA,CAAc,IAAd,CAAtB;AACAF,kBAAAG,QAAA,CAAmB,QAAS,CAACC,SAAD,CAAY;AACtC,cAAIR,gBAAgBQ,SAAAC,KAAAb,MAApB;AACA,cAAIS,eAAA,CAAgBL,aAAhB,CAAJ;AACEC,mBAAAS,YAAA,CAAoB,IAAIX,MAAAY,aAAJ,CAAwBd,yBAAA,CAA0BG,aAA1B,CAAxB,EAAkE,CAACK,eAAA,CAAgBL,aAAhB,CAAD,EAAiCQ,SAAjC,CAAlE,CAApB,CAAA;AADF;AAGEH,2BAAA,CAAgBL,aAAhB,CAAA,GAAiCQ,SAAjC;AAHF;AAFsC,SAAxC,CAAA;AAFc;AAHU,KAJvB,CAAP;AAD4C;AA9B+F,CAA7I;;",
"sources":["node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueDirectivesPerLocation\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateDirectiveMessage = duplicateDirectiveMessage;\nexports.UniqueDirectivesPerLocation = UniqueDirectivesPerLocation;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction duplicateDirectiveMessage(directiveName) {\n  return 'The directive \"' + directiveName + '\" can only be used once at ' + 'this location.';\n}\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all directives at a given location\n * are uniquely named.\n */\nfunction UniqueDirectivesPerLocation(context) {\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      var directives = node.directives;\n      if (directives) {\n        var knownDirectives = Object.create(null);\n        directives.forEach(function (directive) {\n          var directiveName = directive.name.value;\n          if (knownDirectives[directiveName]) {\n            context.reportError(new _error.GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));\n          } else {\n            knownDirectives[directiveName] = directive;\n          }\n        });\n      }\n    }\n  };\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","duplicateDirectiveMessage","UniqueDirectivesPerLocation","_error","directiveName","context","enter","node","directives","knownDirectives","create","forEach","directive","name","reportError","GraphQLError"]
}
