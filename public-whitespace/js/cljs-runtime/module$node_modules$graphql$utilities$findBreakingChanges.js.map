{
"version":3,
"file":"module$node_modules$graphql$utilities$findBreakingChanges.js",
"lineCount":464,
"mappings":"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",
"sources":["node_modules/graphql/utilities/findBreakingChanges.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$findBreakingChanges\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DangerousChangeType = exports.BreakingChangeType = undefined;\nexports.findBreakingChanges = findBreakingChanges;\nexports.findDangerousChanges = findDangerousChanges;\nexports.findRemovedTypes = findRemovedTypes;\nexports.findTypesThatChangedKind = findTypesThatChangedKind;\nexports.findArgChanges = findArgChanges;\nexports.findFieldsThatChangedTypeOnObjectOrInterfaceTypes = findFieldsThatChangedTypeOnObjectOrInterfaceTypes;\nexports.findFieldsThatChangedTypeOnInputObjectTypes = findFieldsThatChangedTypeOnInputObjectTypes;\nexports.findTypesRemovedFromUnions = findTypesRemovedFromUnions;\nexports.findTypesAddedToUnions = findTypesAddedToUnions;\nexports.findValuesRemovedFromEnums = findValuesRemovedFromEnums;\nexports.findValuesAddedToEnums = findValuesAddedToEnums;\nexports.findInterfacesRemovedFromObjectTypes = findInterfacesRemovedFromObjectTypes;\nexports.findInterfacesAddedToObjectTypes = findInterfacesAddedToObjectTypes;\nexports.findRemovedDirectives = findRemovedDirectives;\nexports.findRemovedDirectiveArgs = findRemovedDirectiveArgs;\nexports.findAddedNonNullDirectiveArgs = findAddedNonNullDirectiveArgs;\nexports.findRemovedLocationsForDirective = findRemovedLocationsForDirective;\nexports.findRemovedDirectiveLocations = findRemovedDirectiveLocations;\n\nvar _definition = require('../type/definition');\n\nvar _directives = require('../type/directives');\n\nvar _schema = require('../type/schema');\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2016-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar BreakingChangeType = exports.BreakingChangeType = {\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  NON_NULL_ARG_ADDED: 'NON_NULL_ARG_ADDED',\n  NON_NULL_INPUT_FIELD_ADDED: 'NON_NULL_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',\n  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',\n  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',\n  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED',\n  NON_NULL_DIRECTIVE_ARG_ADDED: 'NON_NULL_DIRECTIVE_ARG_ADDED'\n};\n\nvar DangerousChangeType = exports.DangerousChangeType = {\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE',\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',\n  NULLABLE_INPUT_FIELD_ADDED: 'NULLABLE_INPUT_FIELD_ADDED',\n  NULLABLE_ARG_ADDED: 'NULLABLE_ARG_ADDED'\n};\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nfunction findBreakingChanges(oldSchema, newSchema) {\n  return [].concat(findRemovedTypes(oldSchema, newSchema), findTypesThatChangedKind(oldSchema, newSchema), findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).breakingChanges, findTypesRemovedFromUnions(oldSchema, newSchema), findValuesRemovedFromEnums(oldSchema, newSchema), findArgChanges(oldSchema, newSchema).breakingChanges, findInterfacesRemovedFromObjectTypes(oldSchema, newSchema), findRemovedDirectives(oldSchema, newSchema), findRemovedDirectiveArgs(oldSchema, newSchema), findAddedNonNullDirectiveArgs(oldSchema, newSchema), findRemovedDirectiveLocations(oldSchema, newSchema));\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\nfunction findDangerousChanges(oldSchema, newSchema) {\n  return [].concat(findArgChanges(oldSchema, newSchema).dangerousChanges, findValuesAddedToEnums(oldSchema, newSchema), findInterfacesAddedToObjectTypes(oldSchema, newSchema), findTypesAddedToUnions(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).dangerousChanges);\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing an entire type.\n */\nfunction findRemovedTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    if (!newTypeMap[typeName]) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED,\n        description: typeName + ' was removed.'\n      });\n    }\n  });\n  return breakingChanges;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to changing the type of a type.\n */\nfunction findTypesThatChangedKind(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    if (!newTypeMap[typeName]) {\n      return;\n    }\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (oldType.constructor !== newType.constructor) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: typeName + ' changed from ' + (typeKindName(oldType) + ' to ' + typeKindName(newType) + '.')\n      });\n    }\n  });\n  return breakingChanges;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any\n * breaking or dangerous changes in the newSchema related to arguments\n * (such as removal or change of type of an argument, or a change in an\n * argument's default value).\n */\nfunction findArgChanges(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  var dangerousChanges = [];\n\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!((0, _definition.isObjectType)(oldType) || (0, _definition.isInterfaceType)(oldType)) || !((0, _definition.isObjectType)(newType) || (0, _definition.isInterfaceType)(newType)) || newType.constructor !== oldType.constructor) {\n      return;\n    }\n\n    var oldTypeFields = oldType.getFields();\n    var newTypeFields = newType.getFields();\n\n    Object.keys(oldTypeFields).forEach(function (fieldName) {\n      if (!newTypeFields[fieldName]) {\n        return;\n      }\n\n      oldTypeFields[fieldName].args.forEach(function (oldArgDef) {\n        var newArgs = newTypeFields[fieldName].args;\n        var newArgDef = newArgs.find(function (arg) {\n          return arg.name === oldArgDef.name;\n        });\n\n        // Arg not present\n        if (!newArgDef) {\n          breakingChanges.push({\n            type: BreakingChangeType.ARG_REMOVED,\n            description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' was removed')\n          });\n        } else {\n          var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldArgDef.type, newArgDef.type);\n          if (!isSafe) {\n            breakingChanges.push({\n              type: BreakingChangeType.ARG_CHANGED_KIND,\n              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed type from ') + (oldArgDef.type.toString() + ' to ' + newArgDef.type.toString())\n            });\n          } else if (oldArgDef.defaultValue !== undefined && oldArgDef.defaultValue !== newArgDef.defaultValue) {\n            dangerousChanges.push({\n              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed defaultValue')\n            });\n          }\n        }\n      });\n      // Check if a non-null arg was added to the field\n      newTypeFields[fieldName].args.forEach(function (newArgDef) {\n        var oldArgs = oldTypeFields[fieldName].args;\n        var oldArgDef = oldArgs.find(function (arg) {\n          return arg.name === newArgDef.name;\n        });\n        if (!oldArgDef) {\n          if ((0, _definition.isNonNullType)(newArgDef.type)) {\n            breakingChanges.push({\n              type: BreakingChangeType.NON_NULL_ARG_ADDED,\n              description: 'A non-null arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')\n            });\n          } else {\n            dangerousChanges.push({\n              type: DangerousChangeType.NULLABLE_ARG_ADDED,\n              description: 'A nullable arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')\n            });\n          }\n        }\n      });\n    });\n  });\n\n  return {\n    breakingChanges: breakingChanges,\n    dangerousChanges: dangerousChanges\n  };\n}\n\nfunction typeKindName(type) {\n  if ((0, _definition.isScalarType)(type)) {\n    return 'a Scalar type';\n  }\n  if ((0, _definition.isObjectType)(type)) {\n    return 'an Object type';\n  }\n  if ((0, _definition.isInterfaceType)(type)) {\n    return 'an Interface type';\n  }\n  if ((0, _definition.isUnionType)(type)) {\n    return 'a Union type';\n  }\n  if ((0, _definition.isEnumType)(type)) {\n    return 'an Enum type';\n  }\n  if ((0, _definition.isInputObjectType)(type)) {\n    return 'an Input type';\n  }\n  throw new TypeError('Unknown type ' + type.constructor.name);\n}\n\nfunction findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!((0, _definition.isObjectType)(oldType) || (0, _definition.isInterfaceType)(oldType)) || !((0, _definition.isObjectType)(newType) || (0, _definition.isInterfaceType)(newType)) || newType.constructor !== oldType.constructor) {\n      return;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: typeName + '.' + fieldName + ' was removed.'\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n        var isSafe = isChangeSafeForObjectOrInterfaceField(oldFieldType, newFieldType);\n        if (!isSafe) {\n          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')\n          });\n        }\n      }\n    });\n  });\n  return breakingChanges;\n}\n\nfunction findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  var dangerousChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isInputObjectType)(oldType) || !(0, _definition.isInputObjectType)(newType)) {\n      return;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: typeName + '.' + fieldName + ' was removed.'\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n\n        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldFieldType, newFieldType);\n        if (!isSafe) {\n          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')\n          });\n        }\n      }\n    });\n    // Check if a field was added to the input object type\n    Object.keys(newTypeFieldsDef).forEach(function (fieldName) {\n      if (!(fieldName in oldTypeFieldsDef)) {\n        if ((0, _definition.isNonNullType)(newTypeFieldsDef[fieldName].type)) {\n          breakingChanges.push({\n            type: BreakingChangeType.NON_NULL_INPUT_FIELD_ADDED,\n            description: 'A non-null field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')\n          });\n        } else {\n          dangerousChanges.push({\n            type: DangerousChangeType.NULLABLE_INPUT_FIELD_ADDED,\n            description: 'A nullable field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')\n          });\n        }\n      }\n    });\n  });\n  return {\n    breakingChanges: breakingChanges,\n    dangerousChanges: dangerousChanges\n  };\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if ((0, _definition.isNamedType)(oldType)) {\n    return (\n      // if they're both named types, see if their names are equivalent\n      (0, _definition.isNamedType)(newType) && oldType.name === newType.name ||\n      // moving from nullable to non-null of the same underlying type is safe\n      (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if ((0, _definition.isListType)(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) ||\n      // moving from nullable to non-null of the same underlying type is safe\n      (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if ((0, _definition.isNonNullType)(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n  return false;\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if ((0, _definition.isNamedType)(oldType)) {\n    // if they're both named types, see if their names are equivalent\n    return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;\n  } else if ((0, _definition.isListType)(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  } else if ((0, _definition.isNonNullType)(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) ||\n      // moving from non-null to nullable of the same underlying type is safe\n      !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  }\n  return false;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing types from a union type.\n */\nfunction findTypesRemovedFromUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var typesRemovedFromUnion = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isUnionType)(oldType) || !(0, _definition.isUnionType)(newType)) {\n      return;\n    }\n    var typeNamesInNewUnion = Object.create(null);\n    newType.getTypes().forEach(function (type) {\n      typeNamesInNewUnion[type.name] = true;\n    });\n    oldType.getTypes().forEach(function (type) {\n      if (!typeNamesInNewUnion[type.name]) {\n        typesRemovedFromUnion.push({\n          type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n          description: type.name + ' was removed from union type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return typesRemovedFromUnion;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding types to a union type.\n */\nfunction findTypesAddedToUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var typesAddedToUnion = [];\n  Object.keys(newTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isUnionType)(oldType) || !(0, _definition.isUnionType)(newType)) {\n      return;\n    }\n    var typeNamesInOldUnion = Object.create(null);\n    oldType.getTypes().forEach(function (type) {\n      typeNamesInOldUnion[type.name] = true;\n    });\n    newType.getTypes().forEach(function (type) {\n      if (!typeNamesInOldUnion[type.name]) {\n        typesAddedToUnion.push({\n          type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n          description: type.name + ' was added to union type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return typesAddedToUnion;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing values from an enum type.\n */\nfunction findValuesRemovedFromEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var valuesRemovedFromEnums = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isEnumType)(oldType) || !(0, _definition.isEnumType)(newType)) {\n      return;\n    }\n    var valuesInNewEnum = Object.create(null);\n    newType.getValues().forEach(function (value) {\n      valuesInNewEnum[value.name] = true;\n    });\n    oldType.getValues().forEach(function (value) {\n      if (!valuesInNewEnum[value.name]) {\n        valuesRemovedFromEnums.push({\n          type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n          description: value.name + ' was removed from enum type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return valuesRemovedFromEnums;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding values to an enum type.\n */\nfunction findValuesAddedToEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var valuesAddedToEnums = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isEnumType)(oldType) || !(0, _definition.isEnumType)(newType)) {\n      return;\n    }\n\n    var valuesInOldEnum = Object.create(null);\n    oldType.getValues().forEach(function (value) {\n      valuesInOldEnum[value.name] = true;\n    });\n    newType.getValues().forEach(function (value) {\n      if (!valuesInOldEnum[value.name]) {\n        valuesAddedToEnums.push({\n          type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n          description: value.name + ' was added to enum type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return valuesAddedToEnums;\n}\n\nfunction findInterfacesRemovedFromObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isObjectType)(oldType) || !(0, _definition.isObjectType)(newType)) {\n      return;\n    }\n\n    var oldInterfaces = oldType.getInterfaces();\n    var newInterfaces = newType.getInterfaces();\n    oldInterfaces.forEach(function (oldInterface) {\n      if (!newInterfaces.some(function (int) {\n        return int.name === oldInterface.name;\n      })) {\n        breakingChanges.push({\n          type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n          description: typeName + ' no longer implements interface ' + (oldInterface.name + '.')\n        });\n      }\n    });\n  });\n  return breakingChanges;\n}\n\nfunction findInterfacesAddedToObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var interfacesAddedToObjectTypes = [];\n\n  Object.keys(newTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isObjectType)(oldType) || !(0, _definition.isObjectType)(newType)) {\n      return;\n    }\n\n    var oldInterfaces = oldType.getInterfaces();\n    var newInterfaces = newType.getInterfaces();\n    newInterfaces.forEach(function (newInterface) {\n      if (!oldInterfaces.some(function (int) {\n        return int.name === newInterface.name;\n      })) {\n        interfacesAddedToObjectTypes.push({\n          type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,\n          description: newInterface.name + ' added to interfaces implemented ' + ('by ' + typeName + '.')\n        });\n      }\n    });\n  });\n  return interfacesAddedToObjectTypes;\n}\n\nfunction findRemovedDirectives(oldSchema, newSchema) {\n  var removedDirectives = [];\n\n  var newSchemaDirectiveMap = getDirectiveMapForSchema(newSchema);\n  oldSchema.getDirectives().forEach(function (directive) {\n    if (!newSchemaDirectiveMap[directive.name]) {\n      removedDirectives.push({\n        type: BreakingChangeType.DIRECTIVE_REMOVED,\n        description: directive.name + ' was removed'\n      });\n    }\n  });\n\n  return removedDirectives;\n}\n\nfunction findRemovedArgsForDirective(oldDirective, newDirective) {\n  var removedArgs = [];\n  var newArgMap = getArgumentMapForDirective(newDirective);\n\n  oldDirective.args.forEach(function (arg) {\n    if (!newArgMap[arg.name]) {\n      removedArgs.push(arg);\n    }\n  });\n\n  return removedArgs;\n}\n\nfunction findRemovedDirectiveArgs(oldSchema, newSchema) {\n  var removedDirectiveArgs = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n\n  newSchema.getDirectives().forEach(function (newDirective) {\n    var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n    if (!oldDirective) {\n      return;\n    }\n\n    findRemovedArgsForDirective(oldDirective, newDirective).forEach(function (arg) {\n      removedDirectiveArgs.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: arg.name + ' was removed from ' + newDirective.name\n      });\n    });\n  });\n\n  return removedDirectiveArgs;\n}\n\nfunction findAddedArgsForDirective(oldDirective, newDirective) {\n  var addedArgs = [];\n  var oldArgMap = getArgumentMapForDirective(oldDirective);\n\n  newDirective.args.forEach(function (arg) {\n    if (!oldArgMap[arg.name]) {\n      addedArgs.push(arg);\n    }\n  });\n\n  return addedArgs;\n}\n\nfunction findAddedNonNullDirectiveArgs(oldSchema, newSchema) {\n  var addedNonNullableArgs = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n\n  newSchema.getDirectives().forEach(function (newDirective) {\n    var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n    if (!oldDirective) {\n      return;\n    }\n\n    findAddedArgsForDirective(oldDirective, newDirective).forEach(function (arg) {\n      if (!(0, _definition.isNonNullType)(arg.type)) {\n        return;\n      }\n\n      addedNonNullableArgs.push({\n        type: BreakingChangeType.NON_NULL_DIRECTIVE_ARG_ADDED,\n        description: 'A non-null arg ' + arg.name + ' on directive ' + (newDirective.name + ' was added')\n      });\n    });\n  });\n\n  return addedNonNullableArgs;\n}\n\nfunction findRemovedLocationsForDirective(oldDirective, newDirective) {\n  var removedLocations = [];\n  var newLocationSet = new Set(newDirective.locations);\n\n  oldDirective.locations.forEach(function (oldLocation) {\n    if (!newLocationSet.has(oldLocation)) {\n      removedLocations.push(oldLocation);\n    }\n  });\n\n  return removedLocations;\n}\n\nfunction findRemovedDirectiveLocations(oldSchema, newSchema) {\n  var removedLocations = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n\n  newSchema.getDirectives().forEach(function (newDirective) {\n    var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n    if (!oldDirective) {\n      return;\n    }\n\n    findRemovedLocationsForDirective(oldDirective, newDirective).forEach(function (location) {\n      removedLocations.push({\n        type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n        description: location + ' was removed from ' + newDirective.name\n      });\n    });\n  });\n\n  return removedLocations;\n}\n\nfunction getDirectiveMapForSchema(schema) {\n  return (0, _keyMap2.default)(schema.getDirectives(), function (dir) {\n    return dir.name;\n  });\n}\n\nfunction getArgumentMapForDirective(directive) {\n  return (0, _keyMap2.default)(directive.args, function (arg) {\n    return arg.name;\n  });\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","DangerousChangeType","BreakingChangeType","undefined","findBreakingChanges","findDangerousChanges","findRemovedTypes","findTypesThatChangedKind","findArgChanges","findFieldsThatChangedTypeOnObjectOrInterfaceTypes","findFieldsThatChangedTypeOnInputObjectTypes","findTypesRemovedFromUnions","findTypesAddedToUnions","findValuesRemovedFromEnums","findValuesAddedToEnums","findInterfacesRemovedFromObjectTypes","findInterfacesAddedToObjectTypes","findRemovedDirectives","findRemovedDirectiveArgs","findAddedNonNullDirectiveArgs","findRemovedLocationsForDirective","findRemovedDirectiveLocations","_definition","_directives","_schema","_keyMap","_keyMap2","_interopRequireDefault","obj","__esModule","default","FIELD_CHANGED_KIND","FIELD_REMOVED","TYPE_CHANGED_KIND","TYPE_REMOVED","TYPE_REMOVED_FROM_UNION","VALUE_REMOVED_FROM_ENUM","ARG_REMOVED","ARG_CHANGED_KIND","NON_NULL_ARG_ADDED","NON_NULL_INPUT_FIELD_ADDED","INTERFACE_REMOVED_FROM_OBJECT","DIRECTIVE_REMOVED","DIRECTIVE_ARG_REMOVED","DIRECTIVE_LOCATION_REMOVED","NON_NULL_DIRECTIVE_ARG_ADDED","ARG_DEFAULT_VALUE_CHANGE","VALUE_ADDED_TO_ENUM","INTERFACE_ADDED_TO_OBJECT","TYPE_ADDED_TO_UNION","NULLABLE_INPUT_FIELD_ADDED","NULLABLE_ARG_ADDED","oldSchema","newSchema","concat","breakingChanges","dangerousChanges","oldTypeMap","getTypeMap","newTypeMap","keys","forEach","typeName","push","type","description","oldType","newType","constructor","typeKindName","isObjectType","isInterfaceType","oldTypeFields","getFields","newTypeFields","fieldName","args","oldArgDef","newArgs","newArgDef","find","arg","name","isSafe","isChangeSafeForInputObjectFieldOrFieldArg","toString","defaultValue","oldArgs","isNonNullType","isScalarType","isUnionType","isEnumType","isInputObjectType","TypeError","oldTypeFieldsDef","newTypeFieldsDef","oldFieldType","newFieldType","isChangeSafeForObjectOrInterfaceField","oldFieldTypeString","isNamedType","newFieldTypeString","ofType","isListType","typesRemovedFromUnion","typeNamesInNewUnion","create","getTypes","typesAddedToUnion","typeNamesInOldUnion","valuesRemovedFromEnums","valuesInNewEnum","getValues","valuesAddedToEnums","valuesInOldEnum","oldInterfaces","getInterfaces","newInterfaces","oldInterface","some","int","interfacesAddedToObjectTypes","newInterface","removedDirectives","newSchemaDirectiveMap","getDirectiveMapForSchema","getDirectives","directive","findRemovedArgsForDirective","oldDirective","newDirective","removedArgs","newArgMap","getArgumentMapForDirective","removedDirectiveArgs","oldSchemaDirectiveMap","findAddedArgsForDirective","addedArgs","oldArgMap","addedNonNullableArgs","removedLocations","newLocationSet","Set","locations","oldLocation","has","location","schema","dir"]
}
