shadow$provide["module$node_modules$graphql$validation$rules$FragmentsOnCompositeTypes"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.inlineFragmentOnNonCompositeErrorMessage = inlineFragmentOnNonCompositeErrorMessage;
  exports.fragmentOnNonCompositeErrorMessage = fragmentOnNonCompositeErrorMessage;
  exports.FragmentsOnCompositeTypes = FragmentsOnCompositeTypes;
  var _error = require("module$node_modules$graphql$error$index");
  var _printer = require("module$node_modules$graphql$language$printer");
  var _definition = require("module$node_modules$graphql$type$definition");
  var _typeFromAST = require("module$node_modules$graphql$utilities$typeFromAST");
  function inlineFragmentOnNonCompositeErrorMessage(type) {
    return 'Fragment cannot condition on non composite type "' + String(type) + '".';
  }
  function fragmentOnNonCompositeErrorMessage(fragName, type) {
    return 'Fragment "' + fragName + '" cannot condition on non composite ' + ('type "' + String(type) + '".');
  }
  function FragmentsOnCompositeTypes(context) {
    return {InlineFragment:function InlineFragment(node) {
      var typeCondition = node.typeCondition;
      if (typeCondition) {
        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);
        if (type && !(0, _definition.isCompositeType)(type)) {
          context.reportError(new _error.GraphQLError(inlineFragmentOnNonCompositeErrorMessage((0, _printer.print)(typeCondition)), [typeCondition]));
        }
      }
    }, FragmentDefinition:function FragmentDefinition(node) {
      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);
      if (type && !(0, _definition.isCompositeType)(type)) {
        context.reportError(new _error.GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, (0, _printer.print)(node.typeCondition)), [node.typeCondition]));
      }
    }};
  }
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$FragmentsOnCompositeTypes.js.map
