{
"version":3,
"file":"module$node_modules$graphql$utilities$TypeInfo.js",
"lineCount":216,
"mappings":"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",
"sources":["node_modules/graphql/utilities/TypeInfo.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$TypeInfo\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeInfo = undefined;\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\nvar _introspection = require('../type/introspection');\n\nvar _typeFromAST = require('./typeFromAST');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\nvar TypeInfo = exports.TypeInfo = function () {\n  function TypeInfo(schema,\n  // NOTE: this experimental optional second parameter is only needed in order\n  // to support non-spec-compliant codebases. You should never need to use it.\n  getFieldDefFn,\n  // Initial type may be provided in rare cases to facilitate traversals\n  initialType) {\n    _classCallCheck(this, TypeInfo);\n\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn || getFieldDef;\n    if (initialType) {\n      if ((0, _definition.isInputType)(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n      if ((0, _definition.isCompositeType)(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n      if ((0, _definition.isOutputType)(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  TypeInfo.prototype.getType = function getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getParentType = function getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getInputType = function getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getParentInputType = function getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  };\n\n  TypeInfo.prototype.getFieldDef = function getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getDirective = function getDirective() {\n    return this._directive;\n  };\n\n  TypeInfo.prototype.getArgument = function getArgument() {\n    return this._argument;\n  };\n\n  TypeInfo.prototype.getEnumValue = function getEnumValue() {\n    return this._enumValue;\n  };\n\n  // Flow does not yet handle this case.\n\n\n  TypeInfo.prototype.enter = function enter(node /* ASTNode */) {\n    var schema = this._schema;\n    // Note: many of the types below are explicitly typed as \"mixed\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n    switch (node.kind) {\n      case _kinds.Kind.SELECTION_SET:\n        var namedType = (0, _definition.getNamedType)(this.getType());\n        this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : undefined);\n        break;\n      case _kinds.Kind.FIELD:\n        var parentType = this.getParentType();\n        var fieldDef = void 0;\n        var fieldType = void 0;\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n        this._fieldDefStack.push(fieldDef);\n        this._typeStack.push((0, _definition.isOutputType)(fieldType) ? fieldType : undefined);\n        break;\n      case _kinds.Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n      case _kinds.Kind.OPERATION_DEFINITION:\n        var type = void 0;\n        if (node.operation === 'query') {\n          type = schema.getQueryType();\n        } else if (node.operation === 'mutation') {\n          type = schema.getMutationType();\n        } else if (node.operation === 'subscription') {\n          type = schema.getSubscriptionType();\n        }\n        this._typeStack.push((0, _definition.isObjectType)(type) ? type : undefined);\n        break;\n      case _kinds.Kind.INLINE_FRAGMENT:\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        var typeConditionAST = node.typeCondition;\n        var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : (0, _definition.getNamedType)(this.getType());\n        this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : undefined);\n        break;\n      case _kinds.Kind.VARIABLE_DEFINITION:\n        var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);\n        this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : undefined);\n        break;\n      case _kinds.Kind.ARGUMENT:\n        var argDef = void 0;\n        var argType = void 0;\n        var fieldOrDirective = this.getDirective() || this.getFieldDef();\n        if (fieldOrDirective) {\n          argDef = (0, _find2.default)(fieldOrDirective.args, function (arg) {\n            return arg.name === node.name.value;\n          });\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n        this._argument = argDef;\n        this._inputTypeStack.push((0, _definition.isInputType)(argType) ? argType : undefined);\n        break;\n      case _kinds.Kind.LIST:\n        var listType = (0, _definition.getNullableType)(this.getInputType());\n        var itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType;\n        this._inputTypeStack.push((0, _definition.isInputType)(itemType) ? itemType : undefined);\n        break;\n      case _kinds.Kind.OBJECT_FIELD:\n        var objectType = (0, _definition.getNamedType)(this.getInputType());\n        var inputFieldType = void 0;\n        if ((0, _definition.isInputObjectType)(objectType)) {\n          var inputField = objectType.getFields()[node.name.value];\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n        this._inputTypeStack.push((0, _definition.isInputType)(inputFieldType) ? inputFieldType : undefined);\n        break;\n      case _kinds.Kind.ENUM:\n        var enumType = (0, _definition.getNamedType)(this.getInputType());\n        var enumValue = void 0;\n        if ((0, _definition.isEnumType)(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n        this._enumValue = enumValue;\n        break;\n    }\n  };\n\n  TypeInfo.prototype.leave = function leave(node) {\n    switch (node.kind) {\n      case _kinds.Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n        break;\n      case _kinds.Kind.FIELD:\n        this._fieldDefStack.pop();\n        this._typeStack.pop();\n        break;\n      case _kinds.Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n      case _kinds.Kind.OPERATION_DEFINITION:\n      case _kinds.Kind.INLINE_FRAGMENT:\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n        break;\n      case _kinds.Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n        break;\n      case _kinds.Kind.ARGUMENT:\n        this._argument = null;\n        this._inputTypeStack.pop();\n        break;\n      case _kinds.Kind.LIST:\n      case _kinds.Kind.OBJECT_FIELD:\n        this._inputTypeStack.pop();\n        break;\n      case _kinds.Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  };\n\n  return TypeInfo;\n}();\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\n\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  var name = fieldNode.name.value;\n  if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.SchemaMetaFieldDef;\n  }\n  if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.TypeMetaFieldDef;\n  }\n  if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n  if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","TypeInfo","undefined","_kinds","_definition","_introspection","_typeFromAST","_find","_find2","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","schema","getFieldDefFn","initialType","_schema","_typeStack","_parentTypeStack","_inputTypeStack","_fieldDefStack","_directive","_argument","_enumValue","_getFieldDef","getFieldDef","isInputType","push","isCompositeType","isOutputType","prototype","getType","TypeInfo.prototype.getType","length","getParentType","TypeInfo.prototype.getParentType","getInputType","TypeInfo.prototype.getInputType","getParentInputType","TypeInfo.prototype.getParentInputType","TypeInfo.prototype.getFieldDef","getDirective","TypeInfo.prototype.getDirective","getArgument","TypeInfo.prototype.getArgument","getEnumValue","TypeInfo.prototype.getEnumValue","enter","TypeInfo.prototype.enter","node","kind","Kind","SELECTION_SET","namedType","getNamedType","FIELD","parentType","fieldDef","fieldType","type","DIRECTIVE","name","OPERATION_DEFINITION","operation","getQueryType","getMutationType","getSubscriptionType","isObjectType","INLINE_FRAGMENT","FRAGMENT_DEFINITION","typeConditionAST","typeCondition","outputType","typeFromAST","VARIABLE_DEFINITION","inputType","ARGUMENT","argDef","argType","fieldOrDirective","args","arg","LIST","listType","getNullableType","itemType","isListType","ofType","OBJECT_FIELD","objectType","inputFieldType","isInputObjectType","inputField","getFields","ENUM","enumType","enumValue","isEnumType","getValue","leave","TypeInfo.prototype.leave","pop","fieldNode","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","isInterfaceType"]
}
