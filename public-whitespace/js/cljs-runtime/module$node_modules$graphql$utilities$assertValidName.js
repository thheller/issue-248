shadow$provide["module$node_modules$graphql$utilities$assertValidName"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.assertValidName = assertValidName;
  exports.isValidNameError = isValidNameError;
  var _GraphQLError = require("module$node_modules$graphql$error$GraphQLError");
  var _invariant = require("module$node_modules$graphql$jsutils$invariant");
  var _invariant2 = _interopRequireDefault(_invariant);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
  function assertValidName(name) {
    var error = isValidNameError(name);
    if (error) {
      throw error;
    }
    return name;
  }
  function isValidNameError(name, node) {
    !(typeof name === "string") ? (0, _invariant2.default)(0, "Expected string") : void 0;
    if (name.length > 1 && name[0] === "_" && name[1] === "_") {
      return new _GraphQLError.GraphQLError('Name "' + name + '" must not begin with "__", which is reserved by ' + "GraphQL introspection.", node);
    }
    if (!NAME_RX.test(name)) {
      return new _GraphQLError.GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but "' + name + '" does not.', node);
    }
  }
};

//# sourceMappingURL=module$node_modules$graphql$utilities$assertValidName.js.map
