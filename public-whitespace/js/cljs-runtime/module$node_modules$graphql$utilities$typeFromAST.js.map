{
"version":3,
"file":"module$node_modules$graphql$utilities$typeFromAST.js",
"lineCount":22,
"mappings":"AAAAA,cAAA,CAAe,mDAAf,CAAA,GAAsE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,OAAhB,EAAwBC,MAAxB,EAA+BC,OAA/B,CAAwC;AAGtHC,QAAAC,eAAA,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,IADoC,CAA7C,CAAA;AAGAH,SAAAI,YAAA,GAAsBA,WAAtB;AAEA,MAAIC,SAASP,OAAA,CAAQ,4CAAR,CAAb;AAEA,MAAIQ,cAAcR,OAAA,CAAQ,6CAAR,CAAlB;AAmBAM,UAASA,YAAW,CAACG,MAAD,EAASC,QAAT,CAAmB;AAErC,QAAIC,YAAY,IAAK,EAArB;AACA,QAAID,QAAAE,KAAJ,KAAsBL,MAAAM,KAAAC,UAAtB,CAA6C;AAC3CH,eAAA,GAAYL,WAAA,CAAYG,MAAZ,EAAoBC,QAAAK,KAApB,CAAZ;AACA,aAAOJ,SAAP,IAAoB,CAAC,CAAA,EAAGH,WAAAQ,YAAJ,EAA6BL,SAA7B,CAApB;AAF2C;AAI7C,QAAID,QAAAE,KAAJ,KAAsBL,MAAAM,KAAAI,cAAtB,CAAiD;AAC/CN,eAAA,GAAYL,WAAA,CAAYG,MAAZ,EAAoBC,QAAAK,KAApB,CAAZ;AACA,aAAOJ,SAAP,IAAoB,CAAC,CAAA,EAAGH,WAAAU,eAAJ,EAAgCP,SAAhC,CAApB;AAF+C;AAIjD,QAAID,QAAAE,KAAJ,KAAsBL,MAAAM,KAAAM,WAAtB;AACE,aAAOV,MAAAW,QAAA,CAAeV,QAAAW,KAAAhB,MAAf,CAAP;AADF;AAIA,UAAM,IAAIiB,KAAJ,CAAU,wBAAV,GAAqCZ,QAAAE,KAArC,GAAqD,GAArD,CAAN;AAfqC;AA7B+E,CAAtH;;",
"sources":["node_modules/graphql/utilities/typeFromAST.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$typeFromAST\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeFromAST = typeFromAST;\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n/* eslint-disable no-redeclare */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType = void 0;\n  if (typeNode.kind === _kinds.Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && (0, _definition.GraphQLList)(innerType);\n  }\n  if (typeNode.kind === _kinds.Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && (0, _definition.GraphQLNonNull)(innerType);\n  }\n  if (typeNode.kind === _kinds.Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  }\n  /* istanbul ignore next */\n  throw new Error('Unexpected type kind: ' + typeNode.kind + '.');\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","typeFromAST","_kinds","_definition","schema","typeNode","innerType","kind","Kind","LIST_TYPE","type","GraphQLList","NON_NULL_TYPE","GraphQLNonNull","NAMED_TYPE","getType","name","Error"]
}
