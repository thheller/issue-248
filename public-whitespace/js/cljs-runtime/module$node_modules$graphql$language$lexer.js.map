{
"version":3,
"file":"module$node_modules$graphql$language$lexer.js",
"lineCount":366,
"mappings":"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",
"sources":["node_modules/graphql/language/lexer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$language$lexer\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenKind = undefined;\nexports.createLexer = createLexer;\nexports.getTokenDesc = getTokenDesc;\n\nvar _error = require('../error');\n\nvar _blockStringValue = require('./blockStringValue');\n\nvar _blockStringValue2 = _interopRequireDefault(_blockStringValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n  return token;\n}\n\n/**\n * The return type of createLexer.\n */\n\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind = exports.TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n\n/**\n * The enum type representing the token kinds values.\n */\n\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? token.kind + ' \"' + value + '\"' : token.kind;\n}\n\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n\n/**\n * Helper function for constructing the Token object.\n */\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n}\n\n// Print a simplified form when appearing in JSON/util.inspect.\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (\n    // NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    '\"\\\\u' + ('00' + code.toString(16).toUpperCase()).slice(-4) + '\"'\n  );\n}\n\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos);\n\n  // SourceCharacter\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    throw (0, _error.syntaxError)(source, pos, 'Cannot contain the invalid character ' + printCharCode(code) + '.');\n  }\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n      break;\n    // :\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw (0, _error.syntaxError)(source, pos, unexpectedCharacterMessage(code));\n}\n\n/**\n * Report a message that an unexpected character was encountered.\n */\nfunction unexpectedCharacterMessage(code) {\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return 'Cannot parse the unexpected character ' + printCharCode(code) + '.';\n}\n\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position);\n    // tab | space | comma | BOM\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n  return position;\n}\n\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code = void 0;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && (\n  // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n    if (code >= 48 && code <= 57) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n\n    code = charCodeAt.call(body, ++position);\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n\n/**\n * Returns the new position in the source after reading digits.\n */\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n    return position;\n  }\n  throw (0, _error.syntaxError)(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');\n}\n\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null &&\n  // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    }\n\n    // SourceCharacter\n    if (code < 0x0020 && code !== 0x0009) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    ++position;\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n        case 47:\n          value += '/';\n          break;\n        case 92:\n          value += '\\\\';\n          break;\n        case 98:\n          value += '\\b';\n          break;\n        case 102:\n          value += '\\f';\n          break;\n        case 110:\n          value += '\\n';\n          break;\n        case 114:\n          value += '\\r';\n          break;\n        case 116:\n          value += '\\t';\n          break;\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n          if (charCode < 0) {\n            throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: ' + ('\\\\u' + body.slice(position + 1, position + 5) + '.'));\n          }\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n        default:\n          throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: \\\\' + String.fromCharCode(code) + '.');\n      }\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockStringValue2.default)(rawValue));\n    }\n\n    // SourceCharacter\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    // Escape Triple-Quote (\\\"\"\")\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","TokenKind","undefined","createLexer","getTokenDesc","_error","_blockStringValue","_blockStringValue2","_interopRequireDefault","obj","__esModule","default","source","options","startOfFileToken","Tok","SOF","lexer","lastToken","token","line","lineStart","advance","advanceLexer","lookahead","kind","EOF","next","readToken","COMMENT","freeze","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","NAME","INT","FLOAT","STRING","BLOCK_STRING","charCodeAt","String","prototype","slice","start","end","column","prev","toJSON","inspect","Tok.prototype.inspect","printCharCode","code","isNaN","JSON","stringify","fromCharCode","toString","toUpperCase","body","bodyLength","length","pos","positionAfterWhitespace","col","call","syntaxError","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","position","firstCode","isFloat","readDigits","chunkStart","charCode","uniCharCode","rawValue","a","b","c","d","char2hex"]
}
