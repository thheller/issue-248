{
"version":3,
"file":"module$node_modules$graphql$utilities$typeComparators.js",
"lineCount":64,
"mappings":"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",
"sources":["node_modules/graphql/utilities/typeComparators.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$typeComparators\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEqualType = isEqualType;\nexports.isTypeSubTypeOf = isTypeSubTypeOf;\nexports.doTypesOverlap = doTypesOverlap;\n\nvar _definition = require('../type/definition');\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nfunction isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  }\n\n  // If either type is non-null, the other must also be non-null.\n  if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  }\n\n  // If either type is a list, the other must also be a list.\n  if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  }\n\n  // Otherwise the types are not equal.\n  return false;\n}\n\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  }\n\n  // If superType is non-null, maybeSubType must also be non-null.\n  if ((0, _definition.isNonNullType)(superType)) {\n    if ((0, _definition.isNonNullType)(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n    return false;\n  }\n  if ((0, _definition.isNonNullType)(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  }\n\n  // If superType type is a list, maybeSubType type must also be a list.\n  if ((0, _definition.isListType)(superType)) {\n    if ((0, _definition.isListType)(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n    return false;\n  }\n  if ((0, _definition.isListType)(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  }\n\n  // If superType type is an abstract type, maybeSubType type may be a currently\n  // possible object type.\n  if ((0, _definition.isAbstractType)(superType) && (0, _definition.isObjectType)(maybeSubType) && schema.isPossibleType(superType, maybeSubType)) {\n    return true;\n  }\n\n  // Otherwise, the child type is not a valid subtype of the parent type.\n  return false;\n}\n\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\nfunction doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if ((0, _definition.isAbstractType)(typeA)) {\n    if ((0, _definition.isAbstractType)(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema.getPossibleTypes(typeA).some(function (type) {\n        return schema.isPossibleType(typeB, type);\n      });\n    }\n    // Determine if the latter type is a possible concrete type of the former.\n    return schema.isPossibleType(typeA, typeB);\n  }\n\n  if ((0, _definition.isAbstractType)(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isPossibleType(typeB, typeA);\n  }\n\n  // Otherwise the types do not overlap.\n  return false;\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","isEqualType","isTypeSubTypeOf","doTypesOverlap","_definition","typeA","typeB","isNonNullType","ofType","isListType","schema","maybeSubType","superType","isAbstractType","isObjectType","isPossibleType","getPossibleTypes","some","type"]
}
