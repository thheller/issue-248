{
"version":3,
"file":"module$node_modules$graphql$type$scalars.js",
"lineCount":65,
"mappings":"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",
"sources":["node_modules/graphql/type/scalars.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$type$scalars\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.specifiedScalarTypes = exports.GraphQLID = exports.GraphQLBoolean = exports.GraphQLString = exports.GraphQLFloat = exports.GraphQLInt = undefined;\nexports.isSpecifiedScalarType = isSpecifiedScalarType;\n\nvar _definition = require('./definition');\n\nvar _kinds = require('../language/kinds');\n\n// As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction coerceInt(value) {\n  if (value === '') {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: (empty string)');\n  }\n  var num = Number(value);\n  if (num !== num || num > MAX_INT || num < MIN_INT) {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: ' + String(value));\n  }\n  var int = Math.floor(num);\n  if (int !== num) {\n    throw new TypeError('Int cannot represent non-integer value: ' + String(value));\n  }\n  return int;\n}\n\nvar GraphQLInt = exports.GraphQLInt = new _definition.GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: coerceInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === _kinds.Kind.INT) {\n      var num = parseInt(ast.value, 10);\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n    return undefined;\n  }\n});\n\nfunction coerceFloat(value) {\n  if (value === '') {\n    throw new TypeError('Float cannot represent non numeric value: (empty string)');\n  }\n  var num = Number(value);\n  if (num === num) {\n    return num;\n  }\n  throw new TypeError('Float cannot represent non numeric value: ' + String(value));\n}\n\nvar GraphQLFloat = exports.GraphQLFloat = new _definition.GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: coerceFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.FLOAT || ast.kind === _kinds.Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n});\n\nfunction coerceString(value) {\n  if (Array.isArray(value)) {\n    throw new TypeError('String cannot represent an array value: [' + String(value) + ']');\n  }\n  return String(value);\n}\n\nvar GraphQLString = exports.GraphQLString = new _definition.GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',\n  serialize: coerceString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.STRING ? ast.value : undefined;\n  }\n});\n\nvar GraphQLBoolean = exports.GraphQLBoolean = new _definition.GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: Boolean,\n  parseValue: Boolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\n\nvar GraphQLID = exports.GraphQLID = new _definition.GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',\n  serialize: String,\n  parseValue: String,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.STRING || ast.kind === _kinds.Kind.INT ? ast.value : undefined;\n  }\n});\n\nvar specifiedScalarTypes = exports.specifiedScalarTypes = [GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID];\n\nfunction isSpecifiedScalarType(type) {\n  return (0, _definition.isNamedType)(type) && (\n  // Would prefer to use specifiedScalarTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === GraphQLString.name || type.name === GraphQLInt.name || type.name === GraphQLFloat.name || type.name === GraphQLBoolean.name || type.name === GraphQLID.name);\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","specifiedScalarTypes","GraphQLID","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","undefined","isSpecifiedScalarType","_definition","_kinds","MAX_INT","MIN_INT","coerceInt","TypeError","num","Number","String","int","Math","floor","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","ast","kind","Kind","INT","parseInt","coerceFloat","FLOAT","parseFloat","coerceString","Array","isArray","STRING","Boolean","BOOLEAN","type","isNamedType"]
}
