{
"version":3,
"file":"module$node_modules$graphql$utilities$extendSchema.js",
"lineCount":199,
"mappings":"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",
"sources":["node_modules/graphql/utilities/extendSchema.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$extendSchema\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendSchema = extendSchema;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _buildASTSchema = require('./buildASTSchema');\n\nvar _GraphQLError = require('../error/GraphQLError');\n\nvar _schema = require('../type/schema');\n\nvar _introspection = require('../type/introspection');\n\nvar _definition = require('../type/definition');\n\nvar _directives = require('../type/directives');\n\nvar _kinds = require('../language/kinds');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n *\n * Accepts options as a third argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction extendSchema(schema, documentAST, options) {\n  !(0, _schema.isSchema)(schema) ? (0, _invariant2.default)(0, 'Must provide valid GraphQLSchema') : void 0;\n\n  !(documentAST && documentAST.kind === _kinds.Kind.DOCUMENT) ? (0, _invariant2.default)(0, 'Must provide valid Document AST') : void 0;\n\n  // Collect the type definitions and extensions found in the document.\n  var typeDefinitionMap = Object.create(null);\n  var typeExtensionsMap = Object.create(null);\n\n  // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n  var directiveDefinitions = [];\n\n  for (var i = 0; i < documentAST.definitions.length; i++) {\n    var def = documentAST.definitions[i];\n    switch (def.kind) {\n      case _kinds.Kind.OBJECT_TYPE_DEFINITION:\n      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:\n      case _kinds.Kind.ENUM_TYPE_DEFINITION:\n      case _kinds.Kind.UNION_TYPE_DEFINITION:\n      case _kinds.Kind.SCALAR_TYPE_DEFINITION:\n      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        // Sanity check that none of the defined types conflict with the\n        // schema's existing types.\n        var typeName = def.name.value;\n        if (schema.getType(typeName)) {\n          throw new _GraphQLError.GraphQLError('Type \"' + typeName + '\" already exists in the schema. It cannot also ' + 'be defined in this type definition.', [def]);\n        }\n        typeDefinitionMap[typeName] = def;\n        break;\n      case _kinds.Kind.OBJECT_TYPE_EXTENSION:\n      case _kinds.Kind.INTERFACE_TYPE_EXTENSION:\n        // Sanity check that this type extension exists within the\n        // schema's existing types.\n        var extendedTypeName = def.name.value;\n        var existingType = schema.getType(extendedTypeName);\n        if (!existingType) {\n          throw new _GraphQLError.GraphQLError('Cannot extend type \"' + extendedTypeName + '\" because it does not ' + 'exist in the existing schema.', [def]);\n        }\n        checkExtensionNode(existingType, def);\n\n        var existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n        typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];\n        break;\n      case _kinds.Kind.DIRECTIVE_DEFINITION:\n        var directiveName = def.name.value;\n        var existingDirective = schema.getDirective(directiveName);\n        if (existingDirective) {\n          throw new _GraphQLError.GraphQLError('Directive \"' + directiveName + '\" already exists in the schema. It ' + 'cannot be redefined.', [def]);\n        }\n        directiveDefinitions.push(def);\n        break;\n      case _kinds.Kind.SCALAR_TYPE_EXTENSION:\n      case _kinds.Kind.UNION_TYPE_EXTENSION:\n      case _kinds.Kind.ENUM_TYPE_EXTENSION:\n      case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:\n        throw new Error('The ' + def.kind + ' kind is not yet supported by extendSchema().');\n    }\n  }\n\n  // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n  if (Object.keys(typeExtensionsMap).length === 0 && Object.keys(typeDefinitionMap).length === 0 && directiveDefinitions.length === 0) {\n    return schema;\n  }\n\n  var astBuilder = new _buildASTSchema.ASTDefinitionBuilder(typeDefinitionMap, options, function (typeRef) {\n    var typeName = typeRef.name.value;\n    var existingType = schema.getType(typeName);\n    if (existingType) {\n      return getExtendedType(existingType);\n    }\n\n    throw new _GraphQLError.GraphQLError('Unknown type: \"' + typeName + '\". Ensure that this type exists ' + 'either in the original schema, or is added in a type definition.', [typeRef]);\n  });\n\n  var extendTypeCache = Object.create(null);\n\n  // Get the root Query, Mutation, and Subscription object types.\n  var existingQueryType = schema.getQueryType();\n  var queryType = existingQueryType ? getExtendedType(existingQueryType) : null;\n\n  var existingMutationType = schema.getMutationType();\n  var mutationType = existingMutationType ? getExtendedType(existingMutationType) : null;\n\n  var existingSubscriptionType = schema.getSubscriptionType();\n  var subscriptionType = existingSubscriptionType ? getExtendedType(existingSubscriptionType) : null;\n\n  var types = [].concat((0, _objectValues2.default)(schema.getTypeMap()).map(function (type) {\n    return getExtendedType(type);\n  }), astBuilder.buildTypes((0, _objectValues2.default)(typeDefinitionMap)));\n\n  // Support both original legacy names and extended legacy names.\n  var schemaAllowedLegacyNames = schema.__allowedLegacyNames;\n  var extendAllowedLegacyNames = options && options.allowedLegacyNames;\n  var allowedLegacyNames = schemaAllowedLegacyNames && extendAllowedLegacyNames ? schemaAllowedLegacyNames.concat(extendAllowedLegacyNames) : schemaAllowedLegacyNames || extendAllowedLegacyNames;\n\n  // Then produce and return a Schema with these types.\n  return new _schema.GraphQLSchema({\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: types,\n    directives: getMergedDirectives(),\n    astNode: schema.astNode,\n    allowedLegacyNames: allowedLegacyNames\n  });\n\n  // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function getMergedDirectives() {\n    var existingDirectives = schema.getDirectives();\n    !existingDirectives ? (0, _invariant2.default)(0, 'schema must have default directives') : void 0;\n\n    return existingDirectives.concat(directiveDefinitions.map(function (node) {\n      return astBuilder.buildDirective(node);\n    }));\n  }\n\n  function getExtendedType(type) {\n    if (!extendTypeCache[type.name]) {\n      extendTypeCache[type.name] = extendType(type);\n    }\n    return extendTypeCache[type.name];\n  }\n\n  // To be called at most once per type. Only getExtendedType should call this.\n  function extendType(type) {\n    if ((0, _introspection.isIntrospectionType)(type)) {\n      // Introspection types are not extended.\n      return type;\n    }\n    if ((0, _definition.isObjectType)(type)) {\n      return extendObjectType(type);\n    }\n    if ((0, _definition.isInterfaceType)(type)) {\n      return extendInterfaceType(type);\n    }\n    if ((0, _definition.isUnionType)(type)) {\n      return extendUnionType(type);\n    }\n    // This type is not yet extendable.\n    return type;\n  }\n\n  function extendObjectType(type) {\n    var name = type.name;\n    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;\n    return new _definition.GraphQLObjectType({\n      name: name,\n      description: type.description,\n      interfaces: function interfaces() {\n        return extendImplementedInterfaces(type);\n      },\n      fields: function fields() {\n        return extendFieldMap(type);\n      },\n      astNode: type.astNode,\n      extensionASTNodes: extensionASTNodes,\n      isTypeOf: type.isTypeOf\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var name = type.name;\n    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;\n    return new _definition.GraphQLInterfaceType({\n      name: type.name,\n      description: type.description,\n      fields: function fields() {\n        return extendFieldMap(type);\n      },\n      astNode: type.astNode,\n      extensionASTNodes: extensionASTNodes,\n      resolveType: type.resolveType\n    });\n  }\n\n  function extendUnionType(type) {\n    return new _definition.GraphQLUnionType({\n      name: type.name,\n      description: type.description,\n      types: type.getTypes().map(getExtendedType),\n      astNode: type.astNode,\n      resolveType: type.resolveType\n    });\n  }\n\n  function extendImplementedInterfaces(type) {\n    var interfaces = type.getInterfaces().map(getExtendedType);\n\n    // If there are any extensions to the interfaces, apply those here.\n    var extensions = typeExtensionsMap[type.name];\n    if (extensions) {\n      extensions.forEach(function (extension) {\n        extension.interfaces.forEach(function (namedType) {\n          // Note: While this could make early assertions to get the correctly\n          // typed values, that would throw immediately while type system\n          // validation with validateSchema() will produce more actionable results.\n          interfaces.push(astBuilder.buildType(namedType));\n        });\n      });\n    }\n\n    return interfaces;\n  }\n\n  function extendFieldMap(type) {\n    var newFieldMap = Object.create(null);\n    var oldFieldMap = type.getFields();\n    Object.keys(oldFieldMap).forEach(function (fieldName) {\n      var field = oldFieldMap[fieldName];\n      newFieldMap[fieldName] = {\n        description: field.description,\n        deprecationReason: field.deprecationReason,\n        type: extendFieldType(field.type),\n        args: (0, _keyMap2.default)(field.args, function (arg) {\n          return arg.name;\n        }),\n        astNode: field.astNode,\n        resolve: field.resolve\n      };\n    });\n\n    // If there are any extensions to the fields, apply those here.\n    var extensions = typeExtensionsMap[type.name];\n    if (extensions) {\n      extensions.forEach(function (extension) {\n        extension.fields.forEach(function (field) {\n          var fieldName = field.name.value;\n          if (oldFieldMap[fieldName]) {\n            throw new _GraphQLError.GraphQLError('Field \"' + type.name + '.' + fieldName + '\" already exists in the ' + 'schema. It cannot also be defined in this type extension.', [field]);\n          }\n          newFieldMap[fieldName] = astBuilder.buildField(field);\n        });\n      });\n    }\n\n    return newFieldMap;\n  }\n\n  function extendFieldType(typeDef) {\n    if ((0, _definition.isListType)(typeDef)) {\n      return (0, _definition.GraphQLList)(extendFieldType(typeDef.ofType));\n    }\n    if ((0, _definition.isNonNullType)(typeDef)) {\n      return (0, _definition.GraphQLNonNull)(extendFieldType(typeDef.ofType));\n    }\n    return getExtendedType(typeDef);\n  }\n}\n\nfunction checkExtensionNode(type, node) {\n  switch (node.kind) {\n    case _kinds.Kind.OBJECT_TYPE_EXTENSION:\n      if (!(0, _definition.isObjectType)(type)) {\n        throw new _GraphQLError.GraphQLError('Cannot extend non-object type \"' + type.name + '\".', [node]);\n      }\n      break;\n    case _kinds.Kind.INTERFACE_TYPE_EXTENSION:\n      if (!(0, _definition.isInterfaceType)(type)) {\n        throw new _GraphQLError.GraphQLError('Cannot extend non-interface type \"' + type.name + '\".', [node]);\n      }\n      break;\n  }\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","extendSchema","_invariant","_invariant2","_interopRequireDefault","_keyMap","_keyMap2","_objectValues","_objectValues2","_buildASTSchema","_GraphQLError","_schema","_introspection","_definition","_directives","_kinds","obj","__esModule","default","schema","documentAST","options","isSchema","kind","Kind","DOCUMENT","typeDefinitionMap","create","typeExtensionsMap","directiveDefinitions","i","definitions","length","def","OBJECT_TYPE_DEFINITION","INTERFACE_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","UNION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","typeName","name","getType","GraphQLError","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","extendedTypeName","existingType","checkExtensionNode","existingTypeExtensions","concat","DIRECTIVE_DEFINITION","directiveName","existingDirective","getDirective","push","SCALAR_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","Error","keys","astBuilder","ASTDefinitionBuilder","typeRef","getExtendedType","extendTypeCache","existingQueryType","getQueryType","queryType","existingMutationType","getMutationType","mutationType","existingSubscriptionType","getSubscriptionType","subscriptionType","types","getTypeMap","map","type","buildTypes","schemaAllowedLegacyNames","__allowedLegacyNames","extendAllowedLegacyNames","allowedLegacyNames","GraphQLSchema","query","mutation","subscription","directives","getMergedDirectives","astNode","existingDirectives","getDirectives","node","buildDirective","extendType","isIntrospectionType","isObjectType","extendObjectType","isInterfaceType","extendInterfaceType","isUnionType","extendUnionType","extensionASTNodes","GraphQLObjectType","description","interfaces","extendImplementedInterfaces","fields","extendFieldMap","isTypeOf","GraphQLInterfaceType","resolveType","GraphQLUnionType","getTypes","getInterfaces","extensions","forEach","extension","namedType","buildType","newFieldMap","oldFieldMap","getFields","fieldName","field","deprecationReason","extendFieldType","args","arg","resolve","buildField","typeDef","isListType","GraphQLList","ofType","isNonNullType","GraphQLNonNull"]
}
