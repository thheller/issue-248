shadow$provide["module$node_modules$graphql$utilities$valueFromAST"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.valueFromAST = valueFromAST;
  var _keyMap = require("module$node_modules$graphql$jsutils$keyMap");
  var _keyMap2 = _interopRequireDefault(_keyMap);
  var _isInvalid = require("module$node_modules$graphql$jsutils$isInvalid");
  var _isInvalid2 = _interopRequireDefault(_isInvalid);
  var _objectValues = require("module$node_modules$graphql$jsutils$objectValues");
  var _objectValues2 = _interopRequireDefault(_objectValues);
  var _kinds = require("module$node_modules$graphql$language$kinds");
  var _definition = require("module$node_modules$graphql$type$definition");
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function valueFromAST(valueNode, type, variables) {
    if (!valueNode) {
      return;
    }
    if ((0, _definition.isNonNullType)(type)) {
      if (valueNode.kind === _kinds.Kind.NULL) {
        return;
      }
      return valueFromAST(valueNode, type.ofType, variables);
    }
    if (valueNode.kind === _kinds.Kind.NULL) {
      return null;
    }
    if (valueNode.kind === _kinds.Kind.VARIABLE) {
      var variableName = valueNode.name.value;
      if (!variables || (0, _isInvalid2.default)(variables[variableName])) {
        return;
      }
      return variables[variableName];
    }
    if ((0, _definition.isListType)(type)) {
      var itemType = type.ofType;
      if (valueNode.kind === _kinds.Kind.LIST) {
        var coercedValues = [];
        var itemNodes = valueNode.values;
        for (var i = 0; i < itemNodes.length; i++) {
          if (isMissingVariable(itemNodes[i], variables)) {
            if ((0, _definition.isNonNullType)(itemType)) {
              return;
            }
            coercedValues.push(null);
          } else {
            var itemValue = valueFromAST(itemNodes[i], itemType, variables);
            if ((0, _isInvalid2.default)(itemValue)) {
              return;
            }
            coercedValues.push(itemValue);
          }
        }
        return coercedValues;
      }
      var coercedValue = valueFromAST(valueNode, itemType, variables);
      if ((0, _isInvalid2.default)(coercedValue)) {
        return;
      }
      return [coercedValue];
    }
    if ((0, _definition.isInputObjectType)(type)) {
      if (valueNode.kind !== _kinds.Kind.OBJECT) {
        return;
      }
      var coercedObj = Object.create(null);
      var fieldNodes = (0, _keyMap2.default)(valueNode.fields, function(field) {
        return field.name.value;
      });
      var fields = (0, _objectValues2.default)(type.getFields());
      for (var _i = 0; _i < fields.length; _i++) {
        var field = fields[_i];
        var fieldNode = fieldNodes[field.name];
        if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
          if (!(0, _isInvalid2.default)(field.defaultValue)) {
            coercedObj[field.name] = field.defaultValue;
          } else {
            if ((0, _definition.isNonNullType)(field.type)) {
              return;
            }
          }
          continue;
        }
        var fieldValue = valueFromAST(fieldNode.value, field.type, variables);
        if ((0, _isInvalid2.default)(fieldValue)) {
          return;
        }
        coercedObj[field.name] = fieldValue;
      }
      return coercedObj;
    }
    if ((0, _definition.isEnumType)(type)) {
      if (valueNode.kind !== _kinds.Kind.ENUM) {
        return;
      }
      var enumValue = type.getValue(valueNode.value);
      if (!enumValue) {
        return;
      }
      return enumValue.value;
    }
    if ((0, _definition.isScalarType)(type)) {
      var result = void 0;
      try {
        result = type.parseLiteral(valueNode, variables);
      } catch (_error) {
        return;
      }
      if ((0, _isInvalid2.default)(result)) {
        return;
      }
      return result;
    }
    throw new Error("Unknown type: " + type + ".");
  }
  function isMissingVariable(valueNode, variables) {
    return valueNode.kind === _kinds.Kind.VARIABLE && (!variables || (0, _isInvalid2.default)(variables[valueNode.name.value]));
  }
};

//# sourceMappingURL=module$node_modules$graphql$utilities$valueFromAST.js.map
