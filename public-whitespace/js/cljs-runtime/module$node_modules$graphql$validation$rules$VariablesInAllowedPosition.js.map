{
"version":3,
"file":"module$node_modules$graphql$validation$rules$VariablesInAllowedPosition.js",
"lineCount":38,
"mappings":"AAAAA,cAAA,CAAe,yEAAf,CAAA,GAA4F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,OAAhB,EAAwBC,MAAxB,EAA+BC,OAA/B,CAAwC;AAG5IC,QAAAC,eAAA,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,IADoC,CAA7C,CAAA;AAGAH,SAAAI,iBAAA,GAA2BA,gBAA3B;AACAJ,SAAAK,2BAAA,GAAqCA,0BAArC;AAEA,MAAIC,SAASR,OAAA,CAAQ,yCAAR,CAAb;AAEA,MAAIS,cAAcT,OAAA,CAAQ,6CAAR,CAAlB;AAEA,MAAIU,mBAAmBV,OAAA,CAAQ,uDAAR,CAAvB;AAEA,MAAIW,eAAeX,OAAA,CAAQ,mDAAR,CAAnB;AAEAM,UAASA,iBAAgB,CAACM,OAAD,EAAUC,OAAV,EAAmBC,YAAnB,CAAiC;AACxD,WAAO,aAAP,GAAuBF,OAAvB,GAAiC,aAAjC,GAAiDG,MAAA,CAAOF,OAAP,CAAjD,GAAmE,YAAnE,IAAmF,2BAAnF,GAAiHE,MAAA,CAAOD,YAAP,CAAjH,GAAwI,IAAxI;AADwD;AAgB1DP,UAASA,2BAA0B,CAACS,OAAD,CAAU;AAC3C,QAAIC,YAAYd,MAAAe,OAAA,CAAc,IAAd,CAAhB;AAEA,WAAO,CACLC,oBAAqB,CACnBC,MAAOA,QAASA,MAAK,EAAG;AACtBH,eAAA,GAAYd,MAAAe,OAAA,CAAc,IAAd,CAAZ;AADsB,KADL,EAInBG,MAAOA,QAASA,MAAK,CAACC,SAAD,CAAY;AAC/B,UAAIC,SAASP,OAAAQ,2BAAA,CAAmCF,SAAnC,CAAb;AAEAC,YAAAE,QAAA,CAAe,QAAS,CAACC,IAAD,CAAO;AAC7B,YAAIC,OAAOD,IAAAC,KAAX,EACIC,OAAOF,IAAAE,KADX;AAGA,YAAIhB,UAAUe,IAAAE,KAAAxB,MAAd;AACA,YAAIyB,SAASb,SAAA,CAAUL,OAAV,CAAb;AACA,YAAIkB,MAAJ,IAAcF,IAAd,CAAoB;AAMlB,cAAIG,SAASf,OAAAgB,UAAA,EAAb;AACA,cAAInB,UAAU,CAAC,CAAA,EAAGF,YAAAsB,YAAJ,EAA8BF,MAA9B,EAAsCD,MAAAF,KAAtC,CAAd;AACA,cAAIf,OAAJ,IAAe,CAAC,CAAC,CAAA,EAAGH,gBAAAwB,gBAAJ,EAAsCH,MAAtC,EAA8CI,aAAA,CAActB,OAAd,EAAuBiB,MAAvB,CAA9C,EAA8EF,IAA9E,CAAhB;AACEZ,mBAAAoB,YAAA,CAAoB,IAAI5B,MAAA6B,aAAJ,CAAwB/B,gBAAA,CAAiBM,OAAjB,EAA0BC,OAA1B,EAAmCe,IAAnC,CAAxB,EAAkE,CAACE,MAAD,EAASH,IAAT,CAAlE,CAApB,CAAA;AADF;AARkB;AANS,OAA/B,CAAA;AAH+B,KAJd,CADhB,EA6BLW,mBAAoBA,QAASA,mBAAkB,CAACX,IAAD,CAAO;AACpDV,eAAA,CAAUU,IAAAY,SAAAV,KAAAxB,MAAV,CAAA,GAAsCsB,IAAtC;AADoD,KA7BjD,CAAP;AAH2C;AAuC7CQ,UAASA,cAAa,CAACtB,OAAD,EAAUiB,MAAV,CAAkB;AACtC,WAAO,CAACA,MAAAU,aAAD,IAAwB,CAAC,CAAA,EAAG/B,WAAAgC,cAAJ,EAA+B5B,OAA/B,CAAxB,GAAkEA,OAAlE,GAA4E,CAAC,CAAA,EAAGJ,WAAAiC,eAAJ,EAAgC7B,OAAhC,CAAnF;AADsC;AAxEoG,CAA5I;;",
"sources":["node_modules/graphql/validation/rules/VariablesInAllowedPosition.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$VariablesInAllowedPosition\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.badVarPosMessage = badVarPosMessage;\nexports.VariablesInAllowedPosition = VariablesInAllowedPosition;\n\nvar _error = require('../../error');\n\nvar _definition = require('../../type/definition');\n\nvar _typeComparators = require('../../utilities/typeComparators');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction badVarPosMessage(varName, varType, expectedType) {\n  return 'Variable \"$' + varName + '\" of type \"' + String(varType) + '\" used in ' + ('position expecting type \"' + String(expectedType) + '\".');\n}\n\n/**\n * Variables passed to field arguments conform to type\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        usages.forEach(function (_ref) {\n          var node = _ref.node,\n              type = _ref.type;\n\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);\n            if (varType && !(0, _typeComparators.isTypeSubTypeOf)(schema, effectiveType(varType, varDef), type)) {\n              context.reportError(new _error.GraphQLError(badVarPosMessage(varName, varType, type), [varDef, node]));\n            }\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n\n// If a variable definition has a default value, it's effectively non-null.\nfunction effectiveType(varType, varDef) {\n  return !varDef.defaultValue || (0, _definition.isNonNullType)(varType) ? varType : (0, _definition.GraphQLNonNull)(varType);\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","badVarPosMessage","VariablesInAllowedPosition","_error","_definition","_typeComparators","_typeFromAST","varName","varType","expectedType","String","context","varDefMap","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","forEach","_ref","node","type","name","varDef","schema","getSchema","typeFromAST","isTypeSubTypeOf","effectiveType","reportError","GraphQLError","VariableDefinition","variable","defaultValue","isNonNullType","GraphQLNonNull"]
}
