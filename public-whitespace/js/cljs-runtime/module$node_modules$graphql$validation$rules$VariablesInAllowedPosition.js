shadow$provide["module$node_modules$graphql$validation$rules$VariablesInAllowedPosition"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.badVarPosMessage = badVarPosMessage;
  exports.VariablesInAllowedPosition = VariablesInAllowedPosition;
  var _error = require("module$node_modules$graphql$error$index");
  var _definition = require("module$node_modules$graphql$type$definition");
  var _typeComparators = require("module$node_modules$graphql$utilities$typeComparators");
  var _typeFromAST = require("module$node_modules$graphql$utilities$typeFromAST");
  function badVarPosMessage(varName, varType, expectedType) {
    return 'Variable "$' + varName + '" of type "' + String(varType) + '" used in ' + ('position expecting type "' + String(expectedType) + '".');
  }
  function VariablesInAllowedPosition(context) {
    var varDefMap = Object.create(null);
    return {OperationDefinition:{enter:function enter() {
      varDefMap = Object.create(null);
    }, leave:function leave(operation) {
      var usages = context.getRecursiveVariableUsages(operation);
      usages.forEach(function(_ref) {
        var node = _ref.node, type = _ref.type;
        var varName = node.name.value;
        var varDef = varDefMap[varName];
        if (varDef && type) {
          var schema = context.getSchema();
          var varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);
          if (varType && !(0, _typeComparators.isTypeSubTypeOf)(schema, effectiveType(varType, varDef), type)) {
            context.reportError(new _error.GraphQLError(badVarPosMessage(varName, varType, type), [varDef, node]));
          }
        }
      });
    }}, VariableDefinition:function VariableDefinition(node) {
      varDefMap[node.variable.name.value] = node;
    }};
  }
  function effectiveType(varType, varDef) {
    return !varDef.defaultValue || (0, _definition.isNonNullType)(varType) ? varType : (0, _definition.GraphQLNonNull)(varType);
  }
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$VariablesInAllowedPosition.js.map
