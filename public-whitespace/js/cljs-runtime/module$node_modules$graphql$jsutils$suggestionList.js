shadow$provide["module$node_modules$graphql$jsutils$suggestionList"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.default = suggestionList;
  function suggestionList(input, options) {
    var optionsByDistance = Object.create(null);
    var oLength = options.length;
    var inputThreshold = input.length / 2;
    for (var i = 0; i < oLength; i++) {
      var distance = lexicalDistance(input, options[i]);
      var threshold = Math.max(inputThreshold, options[i].length / 2, 1);
      if (distance <= threshold) {
        optionsByDistance[options[i]] = distance;
      }
    }
    return Object.keys(optionsByDistance).sort(function(a, b) {
      return optionsByDistance[a] - optionsByDistance[b];
    });
  }
  function lexicalDistance(aStr, bStr) {
    if (aStr === bStr) {
      return 0;
    }
    var i = void 0;
    var j = void 0;
    var d = [];
    var a = aStr.toLowerCase();
    var b = bStr.toLowerCase();
    var aLength = a.length;
    var bLength = b.length;
    if (a === b) {
      return 1;
    }
    for (i = 0; i <= aLength; i++) {
      d[i] = [i];
    }
    for (j = 1; j <= bLength; j++) {
      d[0][j] = j;
    }
    for (i = 1; i <= aLength; i++) {
      for (j = 1; j <= bLength; j++) {
        var cost = a[i - 1] === b[j - 1] ? 0 : 1;
        d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);
        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
          d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
        }
      }
    }
    return d[aLength][bLength];
  }
};

//# sourceMappingURL=module$node_modules$graphql$jsutils$suggestionList.js.map
