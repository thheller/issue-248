{
"version":3,
"file":"module$node_modules$graphql$language$visitor.js",
"lineCount":223,
"mappings":"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",
"sources":["node_modules/graphql/language/visitor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$language$visitor\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visit = visit;\nexports.visitInParallel = visitInParallel;\nexports.visitWithTypeInfo = visitWithTypeInfo;\nexports.getVisitFn = getVisitFn;\n\n\n/**\n * A visitor is comprised of visit functions, which are called on each node\n * during the visitor's traversal.\n */\n\n\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar QueryDocumentKeys = exports.QueryDocumentKeys = {\n  Name: [],\n\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name',\n  // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n\n  Directive: ['name', 'arguments'],\n\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations']\n};\n\n/**\n * A KeyMap describes each the traversable properties of each kind of node.\n */\nvar BREAK = exports.BREAK = {};\n\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\nfunction visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n          for (var k in node) {\n            if (node.hasOwnProperty(k)) {\n              clone[k] = node[k];\n            }\n          }\n          node = clone;\n        }\n        var editOffset = 0;\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n          if (inArray) {\n            editKey -= editOffset;\n          }\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n      if (node === null || node === undefined) {\n        continue;\n      }\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + JSON.stringify(node));\n      }\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = { inArray: inArray, index: index, keys: keys, edits: edits, prev: stack };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n      if (parent) {\n        ancestors.push(parent);\n      }\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\nfunction visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */false);\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */true);\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\nfunction visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */false);\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n        if (result !== undefined) {\n          typeInfo.leave(node);\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */true);\n      var result = void 0;\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\nfunction getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n      var specificKindVisitor = specificVisitor[kind];\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","visit","visitInParallel","visitWithTypeInfo","getVisitFn","QueryDocumentKeys","Name","Document","OperationDefinition","VariableDefinition","Variable","SelectionSet","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","FieldDefinition","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","DirectiveDefinition","BREAK","root","visitor","visitorKeys","arguments","length","undefined","stack","inArray","Array","isArray","keys","index","edits","node","key","parent","path","ancestors","newRoot","isLeaving","isEdited","pop","slice","clone","k","hasOwnProperty","editOffset","ii","editKey","editValue","splice","prev","push","result","isNode","Error","JSON","stringify","visitFn","kind","call","maybeNode","Boolean","visitors","skipping","enter","i","fn","apply","leave","typeInfo","kindVisitor","kindSpecificVisitor","specificVisitor","specificKindVisitor"]
}
