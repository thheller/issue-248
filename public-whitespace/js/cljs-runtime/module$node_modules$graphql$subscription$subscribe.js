shadow$provide["module$node_modules$graphql$subscription$subscribe"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.subscribe = subscribe;
  exports.createSourceEventStream = createSourceEventStream;
  var _iterall = require("module$node_modules$iterall$index");
  var _GraphQLError = require("module$node_modules$graphql$error$GraphQLError");
  var _locatedError = require("module$node_modules$graphql$error$locatedError");
  var _execute = require("module$node_modules$graphql$execution$execute");
  var _schema = require("module$node_modules$graphql$type$schema");
  var _mapAsyncIterator = require("module$node_modules$graphql$subscription$mapAsyncIterator");
  var _mapAsyncIterator2 = _interopRequireDefault(_mapAsyncIterator);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
    return arguments.length === 1 ? subscribeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver, argsOrSchema.subscribeFieldResolver) : subscribeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver);
  }
  function reportGraphQLError(error) {
    if (error instanceof _GraphQLError.GraphQLError) {
      return {errors:[error]};
    }
    throw error;
  }
  function subscribeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
    var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);
    var mapSourceToResponse = function mapSourceToResponse(payload) {
      return (0, _execute.execute)(schema, document, payload, contextValue, variableValues, operationName, fieldResolver);
    };
    return sourcePromise.then(function(resultOrStream) {
      return (0, _iterall.isAsyncIterable)(resultOrStream) ? (0, _mapAsyncIterator2.default)(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream;
    }, reportGraphQLError);
  }
  function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {
    (0, _execute.assertValidExecutionArguments)(schema, document, variableValues);
    try {
      var exeContext = (0, _execute.buildExecutionContext)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);
      if (Array.isArray(exeContext)) {
        return Promise.resolve({errors:exeContext});
      }
      var type = (0, _execute.getOperationRootType)(schema, exeContext.operation);
      var fields = (0, _execute.collectFields)(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));
      var responseNames = Object.keys(fields);
      var responseName = responseNames[0];
      var fieldNodes = fields[responseName];
      var fieldNode = fieldNodes[0];
      var fieldName = fieldNode.name.value;
      var fieldDef = (0, _execute.getFieldDef)(schema, type, fieldName);
      if (!fieldDef) {
        throw new _GraphQLError.GraphQLError('The subscription field "' + fieldName + '" is not defined.', fieldNodes);
      }
      var resolveFn = fieldDef.subscribe || exeContext.fieldResolver;
      var path = (0, _execute.addPath)(undefined, responseName);
      var info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, type, path);
      var result = (0, _execute.resolveFieldValueOrError)(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info);
      return Promise.resolve(result).then(function(eventStream) {
        if (eventStream instanceof Error) {
          throw (0, _locatedError.locatedError)(eventStream, fieldNodes, (0, _execute.responsePathAsArray)(path));
        }
        if ((0, _iterall.isAsyncIterable)(eventStream)) {
          return eventStream;
        }
        throw new Error("Subscription field must return Async Iterable. Received: " + String(eventStream));
      });
    } catch (error) {
      return Promise.reject(error);
    }
  }
};

//# sourceMappingURL=module$node_modules$graphql$subscription$subscribe.js.map
