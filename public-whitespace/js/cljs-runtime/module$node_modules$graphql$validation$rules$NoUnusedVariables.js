shadow$provide["module$node_modules$graphql$validation$rules$NoUnusedVariables"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.unusedVariableMessage = unusedVariableMessage;
  exports.NoUnusedVariables = NoUnusedVariables;
  var _error = require("module$node_modules$graphql$error$index");
  function unusedVariableMessage(varName, opName) {
    return opName ? 'Variable "$' + varName + '" is never used in operation "' + opName + '".' : 'Variable "$' + varName + '" is never used.';
  }
  function NoUnusedVariables(context) {
    var variableDefs = [];
    return {OperationDefinition:{enter:function enter() {
      variableDefs = [];
    }, leave:function leave(operation) {
      var variableNameUsed = Object.create(null);
      var usages = context.getRecursiveVariableUsages(operation);
      var opName = operation.name ? operation.name.value : null;
      usages.forEach(function(_ref) {
        var node = _ref.node;
        variableNameUsed[node.name.value] = true;
      });
      variableDefs.forEach(function(variableDef) {
        var variableName = variableDef.variable.name.value;
        if (variableNameUsed[variableName] !== true) {
          context.reportError(new _error.GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));
        }
      });
    }}, VariableDefinition:function VariableDefinition(def) {
      variableDefs.push(def);
    }};
  }
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$NoUnusedVariables.js.map
