{
"version":3,
"file":"module$node_modules$graphql$validation$rules$VariablesAreInputTypes.js",
"lineCount":22,
"mappings":"AAAAA,cAAA,CAAe,qEAAf,CAAA,GAAwF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,OAAhB,EAAwBC,MAAxB,EAA+BC,OAA/B,CAAwC;AAGxIC,QAAAC,eAAA,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,IADoC,CAA7C,CAAA;AAGAH,SAAAI,yBAAA,GAAmCA,wBAAnC;AACAJ,SAAAK,uBAAA,GAAiCA,sBAAjC;AAEA,MAAIC,SAASR,OAAA,CAAQ,yCAAR,CAAb;AAEA,MAAIS,WAAWT,OAAA,CAAQ,8CAAR,CAAf;AAEA,MAAIU,cAAcV,OAAA,CAAQ,6CAAR,CAAlB;AAEA,MAAIW,eAAeX,OAAA,CAAQ,mDAAR,CAAnB;AAEAM,UAASA,yBAAwB,CAACM,YAAD,EAAeC,QAAf,CAAyB;AACxD,WAAO,aAAP,GAAuBD,YAAvB,GAAsC,8BAAtC,GAAuEC,QAAvE,GAAkF,IAAlF;AADwD;AAmB1DN,UAASA,uBAAsB,CAACO,OAAD,CAAU;AACvC,WAAO,CACLC,mBAAoBA,QAASA,mBAAkB,CAACC,IAAD,CAAO;AACpD,UAAIC,OAAO,CAAC,CAAA,EAAGN,YAAAO,YAAJ,EAA8BJ,OAAAK,UAAA,EAA9B,EAAmDH,IAAAC,KAAnD,CAAX;AAGA,UAAIA,IAAJ,IAAY,CAAC,CAAC,CAAA,EAAGP,WAAAU,YAAJ,EAA6BH,IAA7B,CAAb,CAAiD;AAC/C,YAAIL,eAAeI,IAAAK,SAAAC,KAAAjB,MAAnB;AACAS,eAAAS,YAAA,CAAoB,IAAIf,MAAAgB,aAAJ,CAAwBlB,wBAAA,CAAyBM,YAAzB,EAAuC,CAAC,CAAA,EAAGH,QAAAgB,MAAJ,EAAoBT,IAAAC,KAApB,CAAvC,CAAxB,EAAgG,CAACD,IAAAC,KAAD,CAAhG,CAApB,CAAA;AAF+C;AAJG,KADjD,CAAP;AADuC;AApC+F,CAAxI;;",
"sources":["node_modules/graphql/validation/rules/VariablesAreInputTypes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$VariablesAreInputTypes\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nonInputTypeOnVarMessage = nonInputTypeOnVarMessage;\nexports.VariablesAreInputTypes = VariablesAreInputTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction nonInputTypeOnVarMessage(variableName, typeName) {\n  return 'Variable \"$' + variableName + '\" cannot be non-input type \"' + typeName + '\".';\n}\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);\n\n      // If the variable type is not an input type, return an error.\n      if (type && !(0, _definition.isInputType)(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new _error.GraphQLError(nonInputTypeOnVarMessage(variableName, (0, _printer.print)(node.type)), [node.type]));\n      }\n    }\n  };\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","nonInputTypeOnVarMessage","VariablesAreInputTypes","_error","_printer","_definition","_typeFromAST","variableName","typeName","context","VariableDefinition","node","type","typeFromAST","getSchema","isInputType","variable","name","reportError","GraphQLError","print"]
}
