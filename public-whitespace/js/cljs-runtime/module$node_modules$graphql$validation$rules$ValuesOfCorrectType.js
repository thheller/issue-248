shadow$provide["module$node_modules$graphql$validation$rules$ValuesOfCorrectType"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  exports.badValueMessage = badValueMessage;
  exports.requiredFieldMessage = requiredFieldMessage;
  exports.unknownFieldMessage = unknownFieldMessage;
  exports.ValuesOfCorrectType = ValuesOfCorrectType;
  var _error = require("module$node_modules$graphql$error$index");
  var _printer = require("module$node_modules$graphql$language$printer");
  var _definition = require("module$node_modules$graphql$type$definition");
  var _isInvalid = require("module$node_modules$graphql$jsutils$isInvalid");
  var _isInvalid2 = _interopRequireDefault(_isInvalid);
  var _keyMap = require("module$node_modules$graphql$jsutils$keyMap");
  var _keyMap2 = _interopRequireDefault(_keyMap);
  var _orList = require("module$node_modules$graphql$jsutils$orList");
  var _orList2 = _interopRequireDefault(_orList);
  var _suggestionList = require("module$node_modules$graphql$jsutils$suggestionList");
  var _suggestionList2 = _interopRequireDefault(_suggestionList);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function badValueMessage(typeName, valueName, message) {
    return "Expected type " + typeName + ", found " + valueName + (message ? "; " + message : ".");
  }
  function requiredFieldMessage(typeName, fieldName, fieldTypeName) {
    return "Field " + typeName + "." + fieldName + " of required type " + (fieldTypeName + " was not provided.");
  }
  function unknownFieldMessage(typeName, fieldName, message) {
    return 'Field "' + fieldName + '" is not defined by type ' + typeName + (message ? "; " + message : ".");
  }
  function ValuesOfCorrectType(context) {
    return {NullValue:function NullValue(node) {
      var type = context.getInputType();
      if ((0, _definition.isNonNullType)(type)) {
        context.reportError(new _error.GraphQLError(badValueMessage(String(type), (0, _printer.print)(node)), node));
      }
    }, ListValue:function ListValue(node) {
      var type = (0, _definition.getNullableType)(context.getParentInputType());
      if (!(0, _definition.isListType)(type)) {
        isValidScalar(context, node);
        return false;
      }
    }, ObjectValue:function ObjectValue(node) {
      var type = (0, _definition.getNamedType)(context.getInputType());
      if (!(0, _definition.isInputObjectType)(type)) {
        isValidScalar(context, node);
        return false;
      }
      var inputFields = type.getFields();
      var fieldNodeMap = (0, _keyMap2.default)(node.fields, function(field) {
        return field.name.value;
      });
      Object.keys(inputFields).forEach(function(fieldName) {
        var fieldType = inputFields[fieldName].type;
        var fieldNode = fieldNodeMap[fieldName];
        if (!fieldNode && (0, _definition.isNonNullType)(fieldType)) {
          context.reportError(new _error.GraphQLError(requiredFieldMessage(type.name, fieldName, String(fieldType)), node));
        }
      });
    }, ObjectField:function ObjectField(node) {
      var parentType = (0, _definition.getNamedType)(context.getParentInputType());
      var fieldType = context.getInputType();
      if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {
        var suggestions = (0, _suggestionList2.default)(node.name.value, Object.keys(parentType.getFields()));
        var didYouMean = suggestions.length !== 0 ? "Did you mean " + (0, _orList2.default)(suggestions) + "?" : undefined;
        context.reportError(new _error.GraphQLError(unknownFieldMessage(parentType.name, node.name.value, didYouMean), node));
      }
    }, EnumValue:function EnumValue(node) {
      var type = (0, _definition.getNamedType)(context.getInputType());
      if (!(0, _definition.isEnumType)(type)) {
        isValidScalar(context, node);
      } else {
        if (!type.getValue(node.value)) {
          context.reportError(new _error.GraphQLError(badValueMessage(type.name, (0, _printer.print)(node), enumTypeSuggestion(type, node)), node));
        }
      }
    }, IntValue:function IntValue(node) {
      return isValidScalar(context, node);
    }, FloatValue:function FloatValue(node) {
      return isValidScalar(context, node);
    }, StringValue:function StringValue(node) {
      return isValidScalar(context, node);
    }, BooleanValue:function BooleanValue(node) {
      return isValidScalar(context, node);
    }};
  }
  function isValidScalar(context, node) {
    var locationType = context.getInputType();
    if (!locationType) {
      return;
    }
    var type = (0, _definition.getNamedType)(locationType);
    if (!(0, _definition.isScalarType)(type)) {
      context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node), enumTypeSuggestion(type, node)), node));
      return;
    }
    try {
      var parseResult = type.parseLiteral(node, undefined);
      if ((0, _isInvalid2.default)(parseResult)) {
        context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node)), node));
      }
    } catch (error) {
      context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node), error.message), node, undefined, undefined, undefined, error));
    }
  }
  function enumTypeSuggestion(type, node) {
    if ((0, _definition.isEnumType)(type)) {
      var suggestions = (0, _suggestionList2.default)((0, _printer.print)(node), type.getValues().map(function(value) {
        return value.name;
      }));
      if (suggestions.length !== 0) {
        return "Did you mean the enum value " + (0, _orList2.default)(suggestions) + "?";
      }
    }
  }
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$ValuesOfCorrectType.js.map
