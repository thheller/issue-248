shadow$provide["module$node_modules$graphql$utilities$astFromValue"] = function(global, process, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:true});
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  exports.astFromValue = astFromValue;
  var _iterall = require("module$node_modules$iterall$index");
  var _isNullish = require("module$node_modules$graphql$jsutils$isNullish");
  var _isNullish2 = _interopRequireDefault(_isNullish);
  var _isInvalid = require("module$node_modules$graphql$jsutils$isInvalid");
  var _isInvalid2 = _interopRequireDefault(_isInvalid);
  var _objectValues = require("module$node_modules$graphql$jsutils$objectValues");
  var _objectValues2 = _interopRequireDefault(_objectValues);
  var _kinds = require("module$node_modules$graphql$language$kinds");
  var _definition = require("module$node_modules$graphql$type$definition");
  var _scalars = require("module$node_modules$graphql$type$scalars");
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default:obj};
  }
  function astFromValue(value, type) {
    if ((0, _definition.isNonNullType)(type)) {
      var astValue = astFromValue(value, type.ofType);
      if (astValue && astValue.kind === _kinds.Kind.NULL) {
        return null;
      }
      return astValue;
    }
    if (value === null) {
      return {kind:_kinds.Kind.NULL};
    }
    if ((0, _isInvalid2.default)(value)) {
      return null;
    }
    if ((0, _definition.isListType)(type)) {
      var itemType = type.ofType;
      if ((0, _iterall.isCollection)(value)) {
        var valuesNodes = [];
        (0, _iterall.forEach)(value, function(item) {
          var itemNode = astFromValue(item, itemType);
          if (itemNode) {
            valuesNodes.push(itemNode);
          }
        });
        return {kind:_kinds.Kind.LIST, values:valuesNodes};
      }
      return astFromValue(value, itemType);
    }
    if ((0, _definition.isInputObjectType)(type)) {
      if (value === null || (typeof value === "undefined" ? "undefined" : _typeof(value)) !== "object") {
        return null;
      }
      var fields = (0, _objectValues2.default)(type.getFields());
      var fieldNodes = [];
      fields.forEach(function(field) {
        var fieldValue = astFromValue(value[field.name], field.type);
        if (fieldValue) {
          fieldNodes.push({kind:_kinds.Kind.OBJECT_FIELD, name:{kind:_kinds.Kind.NAME, value:field.name}, value:fieldValue});
        }
      });
      return {kind:_kinds.Kind.OBJECT, fields:fieldNodes};
    }
    if ((0, _definition.isScalarType)(type) || (0, _definition.isEnumType)(type)) {
      var serialized = type.serialize(value);
      if ((0, _isNullish2.default)(serialized)) {
        return null;
      }
      if (typeof serialized === "boolean") {
        return {kind:_kinds.Kind.BOOLEAN, value:serialized};
      }
      if (typeof serialized === "number") {
        var stringNum = String(serialized);
        return integerStringRegExp.test(stringNum) ? {kind:_kinds.Kind.INT, value:stringNum} : {kind:_kinds.Kind.FLOAT, value:stringNum};
      }
      if (typeof serialized === "string") {
        if ((0, _definition.isEnumType)(type)) {
          return {kind:_kinds.Kind.ENUM, value:serialized};
        }
        if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {
          return {kind:_kinds.Kind.INT, value:serialized};
        }
        return {kind:_kinds.Kind.STRING, value:serialized};
      }
      throw new TypeError("Cannot convert value to AST: " + String(serialized));
    }
    throw new Error("Unknown type: " + type + ".");
  }
  var integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;
};

//# sourceMappingURL=module$node_modules$graphql$utilities$astFromValue.js.map
