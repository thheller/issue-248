{
"version":3,
"file":"module$node_modules$graphql$language$parser.js",
"lineCount":643,
"mappings":"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",
"sources":["node_modules/graphql/language/parser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$language$parser\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nexports.parseValue = parseValue;\nexports.parseType = parseType;\nexports.parseConstValue = parseConstValue;\nexports.parseTypeReference = parseTypeReference;\nexports.parseNamedType = parseNamedType;\n\nvar _source = require('./source');\n\nvar _error = require('../error');\n\nvar _lexer = require('./lexer');\n\nvar _kinds = require('./kinds');\n\nvar _directiveLocation = require('./directiveLocation');\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\n\n/**\n * Configuration options to control parser behavior\n */\nfunction parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  if (!(sourceObj instanceof _source.Source)) {\n    throw new TypeError('Must provide Source. Received: ' + String(sourceObj));\n  }\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return value;\n}\n\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\nfunction parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return type;\n}\n\n/**\n * Converts a name lex token into a name parse node.\n */\nfunction parseName(lexer) {\n  var token = expect(lexer, _lexer.TokenKind.NAME);\n  return {\n    kind: _kinds.Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n}\n\n// Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SOF);\n  var definitions = [];\n  do {\n    definitions.push(parseDefinition(lexer));\n  } while (!skip(lexer, _lexer.TokenKind.EOF));\n\n  return {\n    kind: _kinds.Kind.DOCUMENT,\n    definitions: definitions,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n */\nfunction parseDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'extend':\n      case 'directive':\n        // Note: The schema definition language is an experimental addition.\n        return parseTypeSystemDefinition(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    // Note: The schema definition language is an experimental addition.\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n\n// Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n  if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return {\n      kind: _kinds.Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  var operation = parseOperationType(lexer);\n  var name = void 0;\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n  return {\n    kind: _kinds.Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * OperationType : one of query mutation subscription\n */\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, _lexer.TokenKind.NAME);\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n    case 'mutation':\n      return 'mutation';\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseVariableDefinition, _lexer.TokenKind.PAREN_R) : [];\n}\n\n/**\n * VariableDefinition : Variable : Type DefaultValue?\n */\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Variable : $ Name\n */\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.DOLLAR);\n  return {\n    kind: _kinds.Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * SelectionSet : { Selection+ }\n */\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.SELECTION_SET,\n    selections: many(lexer, _lexer.TokenKind.BRACE_L, parseSelection, _lexer.TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\nfunction parseSelection(lexer) {\n  return peek(lexer, _lexer.TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\nfunction parseField(lexer) {\n  var start = lexer.token;\n\n  var nameOrAlias = parseName(lexer);\n  var alias = void 0;\n  var name = void 0;\n  if (skip(lexer, _lexer.TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: _kinds.Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, _lexer.TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, item, _lexer.TokenKind.PAREN_R) : [];\n}\n\n/**\n * Argument[Const] : Name : Value[?Const]\n */\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SPREAD);\n  if (peek(lexer, _lexer.TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: _kinds.Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n  var typeCondition = void 0;\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n  return {\n    kind: _kinds.Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment');\n  // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: _kinds.Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  return {\n    kind: _kinds.Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * FragmentName : Name but not `on`\n */\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n  return parseName(lexer);\n}\n\n// Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n  switch (token.kind) {\n    case _lexer.TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n    case _lexer.TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n    case _lexer.TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.STRING:\n    case _lexer.TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n    case _lexer.TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n      break;\n  }\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: _kinds.Kind.STRING,\n    value: token.value,\n    block: token.kind === _lexer.TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nfunction parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: _kinds.Kind.LIST,\n    values: any(lexer, _lexer.TokenKind.BRACKET_L, item, _lexer.TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.BRACE_L);\n  var fields = [];\n  while (!skip(lexer, _lexer.TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n  return {\n    kind: _kinds.Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n  while (peek(lexer, _lexer.TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n  return directives;\n}\n\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.AT);\n  return {\n    kind: _kinds.Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\nfunction parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type = void 0;\n  if (skip(lexer, _lexer.TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, _lexer.TokenKind.BRACKET_R);\n    type = {\n      kind: _kinds.Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n  if (skip(lexer, _lexer.TokenKind.BANG)) {\n    return {\n      kind: _kinds.Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n  return type;\n}\n\n/**\n * NamedType : Name\n */\nfunction parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - TypeExtension\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n      case 'extend':\n        return parseTypeExtension(lexer);\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, _lexer.TokenKind.STRING) || peek(lexer, _lexer.TokenKind.BLOCK_STRING);\n}\n\n/**\n * Description : StringValue\n */\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R);\n  return {\n    kind: _kinds.Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n  if (lexer.token.value === 'implements') {\n    lexer.advance();\n    // Optional leading ampersand\n    skip(lexer, _lexer.TokenKind.AMP);\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.AMP) ||\n    // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, _lexer.TokenKind.NAME));\n  }\n  return types;\n}\n\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, _lexer.TokenKind.BRACE_L) && lexer.lookahead().kind === _lexer.TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, _lexer.TokenKind.PAREN_L)) {\n    return [];\n  }\n  return many(lexer, _lexer.TokenKind.PAREN_L, parseInputValueDef, _lexer.TokenKind.PAREN_R);\n}\n\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue = void 0;\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: _kinds.Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, _lexer.TokenKind.PIPE);\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.PIPE));\n  }\n  return types;\n}\n\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseEnumValueDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseInputValueDef, _lexer.TokenKind.BRACE_R) : [];\n}\n\n/**\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\nfunction parseTypeExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, _lexer.TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: _kinds.Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, _lexer.TokenKind.PIPE);\n  var locations = [];\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, _lexer.TokenKind.PIPE));\n  return locations;\n}\n\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  if (_directiveLocation.DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n  throw unexpected(lexer, start);\n}\n\n// Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n}\n\n// Print a simplified form when appearing in JSON/util.inspect.\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return { start: this.start, end: this.end };\n};\n\n/**\n * Determines if the next token is of a given kind\n */\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n  if (match) {\n    lexer.advance();\n  }\n  return match;\n}\n\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected ' + kind + ', found ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n  if (token.kind === _lexer.TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected \"' + value + '\", found ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return (0, _error.syntaxError)(lexer.source, token.start, 'Unexpected ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}\n\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","parse","parseValue","parseType","parseConstValue","parseTypeReference","parseNamedType","_source","_error","_lexer","_kinds","_directiveLocation","source","options","sourceObj","Source","TypeError","String","lexer","createLexer","parseDocument","expect","TokenKind","SOF","parseValueLiteral","EOF","type","parseName","token","NAME","kind","Kind","loc","start","definitions","push","parseDefinition","skip","DOCUMENT","peek","parseExecutableDefinition","parseTypeSystemDefinition","BRACE_L","peekDescription","unexpected","parseOperationDefinition","parseFragmentDefinition","OPERATION_DEFINITION","operation","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","PAREN_L","many","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","EQUALS","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","FRAGMENT_SPREAD","parseFragmentName","typeCondition","advance","INLINE_FRAGMENT","expectKeyword","experimentalFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","block","parseValueValue","LIST","values","any","BRACKET_R","fields","parseObjectField","OBJECT","OBJECT_FIELD","AT","parseDirective","DIRECTIVE","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseTypeExtension","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","description","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","types","AMP","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","ENUM_VALUE_DEFINITION","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","DirectiveLocation","hasOwnProperty","startToken","noLocation","Loc","lastToken","endToken","end","prototype","toJSON","inspect","Loc.prototype.inspect","match","syntaxError","getTokenDesc","atToken","openKind","parseFn","closeKind","nodes"]
}
