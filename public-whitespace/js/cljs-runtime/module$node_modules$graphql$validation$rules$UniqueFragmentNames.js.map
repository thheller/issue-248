{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueFragmentNames.js",
"lineCount":24,
"mappings":"AAAAA,cAAA,CAAe,kEAAf,CAAA,GAAqF,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,OAAhB,EAAwBC,MAAxB,EAA+BC,OAA/B,CAAwC;AAGrIC,QAAAC,eAAA,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,IADoC,CAA7C,CAAA;AAGAH,SAAAI,6BAAA,GAAuCA,4BAAvC;AACAJ,SAAAK,oBAAA,GAA8BA,mBAA9B;AAEA,MAAIC,SAASR,OAAA,CAAQ,yCAAR,CAAb;AAWAM,UAASA,6BAA4B,CAACG,QAAD,CAAW;AAC9C,WAAO,wCAAP,GAAkDA,QAAlD,GAA6D,IAA7D;AAD8C;AAShDF,UAASA,oBAAmB,CAACG,OAAD,CAAU;AACpC,QAAIC,qBAAqBR,MAAAS,OAAA,CAAc,IAAd,CAAzB;AACA,WAAO,CACLC,oBAAqBA,QAASA,oBAAmB,EAAG;AAClD,aAAO,KAAP;AADkD,KAD/C,EAILC,mBAAoBA,QAASA,mBAAkB,CAACC,IAAD,CAAO;AACpD,UAAIC,eAAeD,IAAAE,KAAAZ,MAAnB;AACA,UAAIM,kBAAA,CAAmBK,YAAnB,CAAJ;AACEN,eAAAQ,YAAA,CAAoB,IAAIV,MAAAW,aAAJ,CAAwBb,4BAAA,CAA6BU,YAA7B,CAAxB,EAAoE,CAACL,kBAAA,CAAmBK,YAAnB,CAAD,EAAmCD,IAAAE,KAAnC,CAApE,CAApB,CAAA;AADF;AAGEN,0BAAA,CAAmBK,YAAnB,CAAA,GAAmCD,IAAAE,KAAnC;AAHF;AAKA,aAAO,KAAP;AAPoD,KAJjD,CAAP;AAFoC;AA7B+F,CAArI;;",
"sources":["node_modules/graphql/validation/rules/UniqueFragmentNames.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueFragmentNames\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateFragmentNameMessage = duplicateFragmentNameMessage;\nexports.UniqueFragmentNames = UniqueFragmentNames;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction duplicateFragmentNameMessage(fragName) {\n  return 'There can be only one fragment named \"' + fragName + '\".';\n}\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\nfunction UniqueFragmentNames(context) {\n  var knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var fragmentName = node.name.value;\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new _error.GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n      return false;\n    }\n  };\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","duplicateFragmentNameMessage","UniqueFragmentNames","_error","fragName","context","knownFragmentNames","create","OperationDefinition","FragmentDefinition","node","fragmentName","name","reportError","GraphQLError"]
}
