shadow$provide.module$node_modules$graphql$type$definition = function(e, r, b, u, a) {
  function g(a) {
    return a && a.__esModule ? a : {default:a};
  }
  function c(a, d) {
    if (!(a instanceof d)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function k(a) {
    return f(a) || h(a) || m(a) || d(a) || q(a) || z(a) || t(a) || y(a);
  }
  function l(a) {
    k(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL type.");
    return a;
  }
  function f(a) {
    return (0, U.default)(a, ca);
  }
  function h(a) {
    return (0, U.default)(a, X);
  }
  function m(a) {
    return (0, U.default)(a, da);
  }
  function d(a) {
    return (0, U.default)(a, E);
  }
  function q(a) {
    return (0, U.default)(a, aa);
  }
  function z(a) {
    return (0, U.default)(a, N);
  }
  function t(a) {
    return (0, U.default)(a, M);
  }
  function y(a) {
    return (0, U.default)(a, F);
  }
  function n(a) {
    return f(a) || q(a) || z(a) || B(a) && n(a.ofType);
  }
  function p(a) {
    return f(a) || h(a) || m(a) || d(a) || q(a) || B(a) && p(a.ofType);
  }
  function C(a) {
    return f(a) || q(a);
  }
  function J(a) {
    return h(a) || m(a) || d(a);
  }
  function H(a) {
    return m(a) || d(a);
  }
  function M(a) {
    if (this instanceof M) {
      this.ofType = l(a);
    } else {
      return new M(a);
    }
  }
  function F(a) {
    if (this instanceof F) {
      this.ofType = v(a);
    } else {
      return new F(a);
    }
  }
  function B(a) {
    return t(a) || y(a);
  }
  function x(a) {
    return k(a) && !y(a);
  }
  function v(a) {
    x(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL nullable type.");
    return a;
  }
  function I(a) {
    return f(a) || h(a) || m(a) || d(a) || q(a) || z(a);
  }
  function w(a) {
    return "function" === typeof a ? a() : a;
  }
  function L(a, d) {
    var b = w(d) || {};
    D(b) ? void 0 : (0, G.default)(0, a.name + " fields must be an object with field names as keys or a function which returns such an object.");
    var f = Object.create(null);
    Object.keys(b).forEach(function(d) {
      var c = b[d];
      D(c) ? void 0 : (0, G.default)(0, a.name + "." + d + " field config must be an object");
      c.hasOwnProperty("isDeprecated") ? (0, G.default)(0, a.name + "." + d + ' should provide "deprecationReason" instead of "isDeprecated".') : void 0;
      var h = T({}, c, {isDeprecated:!!c.deprecationReason, name:d});
      S(h.resolve) ? void 0 : (0, G.default)(0, a.name + "." + d + " field resolver must be a function if " + ("provided, but got: " + String(h.resolve) + "."));
      var q = c.args;
      q ? (D(q) ? void 0 : (0, G.default)(0, a.name + "." + d + " args must be an object with argument names as keys."), h.args = Object.keys(q).map(function(a) {
        var d = q[a];
        return {name:a, description:void 0 === d.description ? null : d.description, type:d.type, defaultValue:d.defaultValue, astNode:d.astNode};
      })) : h.args = [];
      f[d] = h;
    });
    return f;
  }
  function D(a) {
    return a && "object" === ("undefined" === typeof a ? "undefined" : Q(a)) && !Array.isArray(a);
  }
  function S(a) {
    return null == a || "function" === typeof a;
  }
  function R(a, d) {
    D(d) ? void 0 : (0, G.default)(0, a.name + " values must be an object with value names as keys.");
    return Object.keys(d).map(function(b) {
      var f = d[b];
      D(f) ? void 0 : (0, G.default)(0, a.name + "." + b + ' must refer to an object with a "value" key ' + ("representing an internal value but got: " + String(f) + "."));
      f.hasOwnProperty("isDeprecated") ? (0, G.default)(0, a.name + "." + b + ' should provide "deprecationReason" instead of "isDeprecated".') : void 0;
      return {name:b, description:f.description, isDeprecated:!!f.deprecationReason, deprecationReason:f.deprecationReason, astNode:f.astNode, value:f.hasOwnProperty("value") ? f.value : b};
    });
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.GraphQLInputObjectType = a.GraphQLEnumType = a.GraphQLUnionType = a.GraphQLInterfaceType = a.GraphQLObjectType = a.GraphQLScalarType = void 0;
  var Q = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(a) {
    return typeof a;
  } : function(a) {
    return a && "function" === typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
  }, T = Object.assign || function(a) {
    for (var d = 1; d < arguments.length; d++) {
      var b = arguments[d], f;
      for (f in b) {
        Object.prototype.hasOwnProperty.call(b, f) && (a[f] = b[f]);
      }
    }
    return a;
  };
  a.isType = k;
  a.assertType = l;
  a.isScalarType = f;
  a.assertScalarType = function(a) {
    f(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL Scalar type.");
    return a;
  };
  a.isObjectType = h;
  a.assertObjectType = function(a) {
    h(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL Object type.");
    return a;
  };
  a.isInterfaceType = m;
  a.assertInterfaceType = function(a) {
    m(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL Interface type.");
    return a;
  };
  a.isUnionType = d;
  a.assertUnionType = function(a) {
    d(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL Union type.");
    return a;
  };
  a.isEnumType = q;
  a.assertEnumType = function(a) {
    q(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL Enum type.");
    return a;
  };
  a.isInputObjectType = z;
  a.assertInputObjectType = function(a) {
    z(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL Input Object type.");
    return a;
  };
  a.isListType = t;
  a.assertListType = function(a) {
    t(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL List type.");
    return a;
  };
  a.isNonNullType = y;
  a.assertNonNullType = function(a) {
    y(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL Non-Null type.");
    return a;
  };
  a.isInputType = n;
  a.assertInputType = function(a) {
    n(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL input type.");
    return a;
  };
  a.isOutputType = p;
  a.assertOutputType = function(a) {
    p(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL output type.");
    return a;
  };
  a.isLeafType = C;
  a.assertLeafType = function(a) {
    C(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL leaf type.");
    return a;
  };
  a.isCompositeType = J;
  a.assertCompositeType = function(a) {
    J(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL composite type.");
    return a;
  };
  a.isAbstractType = H;
  a.assertAbstractType = function(a) {
    H(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL abstract type.");
    return a;
  };
  a.GraphQLList = M;
  a.GraphQLNonNull = F;
  a.isWrappingType = B;
  a.assertWrappingType = function(a) {
    B(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL wrapping type.");
    return a;
  };
  a.isNullableType = x;
  a.assertNullableType = v;
  a.getNullableType = function(a) {
    if (a) {
      return y(a) ? a.ofType : a;
    }
  };
  a.isNamedType = I;
  a.assertNamedType = function(a) {
    I(a) ? void 0 : (0, G.default)(0, "Expected " + String(a) + " to be a GraphQL named type.");
    return a;
  };
  a.getNamedType = function(a) {
    if (a) {
      for (; B(a);) {
        a = a.ofType;
      }
      return a;
    }
  };
  e = b("module$node_modules$graphql$jsutils$instanceOf");
  var U = g(e);
  e = b("module$node_modules$graphql$jsutils$invariant");
  var G = g(e);
  e = b("module$node_modules$graphql$jsutils$isInvalid");
  var V = g(e), Z = b("module$node_modules$graphql$language$kinds"), ha = b("module$node_modules$graphql$utilities$valueFromASTUntyped");
  b = M.prototype;
  b.toString = b.toJSON = b.inspect = function() {
    return "[" + String(this.ofType) + "]";
  };
  b = F.prototype;
  b.toString = b.toJSON = b.inspect = function() {
    return String(this.ofType) + "!";
  };
  var ca = a.GraphQLScalarType = function() {
    function a(d) {
      c(this, a);
      this.name = d.name;
      this.description = d.description;
      this.astNode = d.astNode;
      this._scalarConfig = d;
      "string" !== typeof d.name ? (0, G.default)(0, "Must provide name.") : void 0;
      "function" !== typeof d.serialize ? (0, G.default)(0, this.name + ' must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.') : void 0;
      if (d.parseValue || d.parseLiteral) {
        "function" !== typeof d.parseValue || "function" !== typeof d.parseLiteral ? (0, G.default)(0, this.name + ' must provide both "parseValue" and "parseLiteral" functions.') : void 0;
      }
    }
    a.prototype.serialize = function(a) {
      var d = this._scalarConfig.serialize;
      return d(a);
    };
    a.prototype.parseValue = function(a) {
      var d = this._scalarConfig.parseValue;
      if (!(0, V.default)(a)) {
        return d ? d(a) : a;
      }
    };
    a.prototype.parseLiteral = function(a, d) {
      var b = this._scalarConfig.parseLiteral;
      return b ? b(a, d) : (0, ha.valueFromASTUntyped)(a, d);
    };
    a.prototype.toString = function() {
      return this.name;
    };
    return a;
  }();
  ca.prototype.toJSON = ca.prototype.inspect = ca.prototype.toString;
  var X = a.GraphQLObjectType = function() {
    function a(d) {
      c(this, a);
      this.name = d.name;
      this.description = d.description;
      this.astNode = d.astNode;
      this.extensionASTNodes = d.extensionASTNodes;
      this.isTypeOf = d.isTypeOf;
      this._typeConfig = d;
      "string" !== typeof d.name ? (0, G.default)(0, "Must provide name.") : void 0;
      d.isTypeOf && ("function" !== typeof d.isTypeOf ? (0, G.default)(0, this.name + ' must provide "isTypeOf" as a function.') : void 0);
    }
    a.prototype.getFields = function() {
      return this._fields || (this._fields = L(this, this._typeConfig.fields));
    };
    a.prototype.getInterfaces = function() {
      var a;
      (a = this._interfaces) || (a = w(this._typeConfig.interfaces) || [], Array.isArray(a) ? void 0 : (0, G.default)(0, this.name + " interfaces must be an Array or a function which returns an Array."), a = this._interfaces = a);
      return a;
    };
    a.prototype.toString = function() {
      return this.name;
    };
    return a;
  }();
  X.prototype.toJSON = X.prototype.inspect = X.prototype.toString;
  var da = a.GraphQLInterfaceType = function() {
    function a(d) {
      c(this, a);
      this.name = d.name;
      this.description = d.description;
      this.astNode = d.astNode;
      this.extensionASTNodes = d.extensionASTNodes;
      this.resolveType = d.resolveType;
      this._typeConfig = d;
      "string" !== typeof d.name ? (0, G.default)(0, "Must provide name.") : void 0;
      d.resolveType && ("function" !== typeof d.resolveType ? (0, G.default)(0, this.name + ' must provide "resolveType" as a function.') : void 0);
    }
    a.prototype.getFields = function() {
      return this._fields || (this._fields = L(this, this._typeConfig.fields));
    };
    a.prototype.toString = function() {
      return this.name;
    };
    return a;
  }();
  da.prototype.toJSON = da.prototype.inspect = da.prototype.toString;
  var E = a.GraphQLUnionType = function() {
    function a(d) {
      c(this, a);
      this.name = d.name;
      this.description = d.description;
      this.astNode = d.astNode;
      this.resolveType = d.resolveType;
      this._typeConfig = d;
      "string" !== typeof d.name ? (0, G.default)(0, "Must provide name.") : void 0;
      d.resolveType && ("function" !== typeof d.resolveType ? (0, G.default)(0, this.name + ' must provide "resolveType" as a function.') : void 0);
    }
    a.prototype.getTypes = function() {
      var a;
      (a = this._types) || (a = w(this._typeConfig.types) || [], Array.isArray(a) ? void 0 : (0, G.default)(0, "Must provide Array of types or a function which returns " + ("such an array for Union " + this.name + ".")), a = this._types = a);
      return a;
    };
    a.prototype.toString = function() {
      return this.name;
    };
    return a;
  }();
  E.prototype.toJSON = E.prototype.inspect = E.prototype.toString;
  var aa = a.GraphQLEnumType = function() {
    function a(d) {
      c(this, a);
      this.name = d.name;
      this.description = d.description;
      this.astNode = d.astNode;
      this._enumConfig = d;
      "string" !== typeof d.name ? (0, G.default)(0, "Must provide name.") : void 0;
    }
    a.prototype.getValues = function() {
      return this._values || (this._values = R(this, this._enumConfig.values));
    };
    a.prototype.getValue = function(a) {
      return this._getNameLookup()[a];
    };
    a.prototype.serialize = function(a) {
      if (a = this._getValueLookup().get(a)) {
        return a.name;
      }
    };
    a.prototype.parseValue = function(a) {
      if ("string" === typeof a && (a = this._getNameLookup()[a])) {
        return a.value;
      }
    };
    a.prototype.parseLiteral = function(a, d) {
      if (a.kind === Z.Kind.ENUM && (a = this._getNameLookup()[a.value])) {
        return a.value;
      }
    };
    a.prototype._getValueLookup = function() {
      if (!this._valueLookup) {
        var a = new Map;
        this.getValues().forEach(function(d) {
          a.set(d.value, d);
        });
        this._valueLookup = a;
      }
      return this._valueLookup;
    };
    a.prototype._getNameLookup = function() {
      if (!this._nameLookup) {
        var a = Object.create(null);
        this.getValues().forEach(function(d) {
          a[d.name] = d;
        });
        this._nameLookup = a;
      }
      return this._nameLookup;
    };
    a.prototype.toString = function() {
      return this.name;
    };
    return a;
  }();
  aa.prototype.toJSON = aa.prototype.inspect = aa.prototype.toString;
  var N = a.GraphQLInputObjectType = function() {
    function a(d) {
      c(this, a);
      this.name = d.name;
      this.description = d.description;
      this.astNode = d.astNode;
      this._typeConfig = d;
      "string" !== typeof d.name ? (0, G.default)(0, "Must provide name.") : void 0;
    }
    a.prototype.getFields = function() {
      return this._fields || (this._fields = this._defineFieldMap());
    };
    a.prototype._defineFieldMap = function() {
      var a = this, d = w(this._typeConfig.fields) || {};
      D(d) ? void 0 : (0, G.default)(0, this.name + " fields must be an object with field names as keys or a function which returns such an object.");
      var b = Object.create(null);
      Object.keys(d).forEach(function(f) {
        var c = T({}, d[f], {name:f});
        c.hasOwnProperty("resolve") ? (0, G.default)(0, a.name + "." + f + " field type has a resolve property, but Input Types cannot define resolvers.") : void 0;
        b[f] = c;
      });
      return b;
    };
    a.prototype.toString = function() {
      return this.name;
    };
    return a;
  }();
  N.prototype.toJSON = N.prototype.toString;
  N.prototype.inspect = N.prototype.toString;
};

//# sourceMappingURL=module$node_modules$graphql$type$definition.js.map
