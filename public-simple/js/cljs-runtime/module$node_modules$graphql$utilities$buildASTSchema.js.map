{
"version":3,
"file":"module$node_modules$graphql$utilities$buildASTSchema.js",
"lineCount":228,
"mappings":"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",
"sources":["node_modules/graphql/utilities/buildASTSchema.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$buildASTSchema\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ASTDefinitionBuilder = undefined;\nexports.buildASTSchema = buildASTSchema;\nexports.getDescription = getDescription;\nexports.buildSchema = buildSchema;\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _keyValMap = require('../jsutils/keyValMap');\n\nvar _keyValMap2 = _interopRequireDefault(_keyValMap);\n\nvar _valueFromAST = require('./valueFromAST');\n\nvar _blockStringValue = require('../language/blockStringValue');\n\nvar _blockStringValue2 = _interopRequireDefault(_blockStringValue);\n\nvar _lexer = require('../language/lexer');\n\nvar _parser = require('../language/parser');\n\nvar _values = require('../execution/values');\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\nvar _directives = require('../type/directives');\n\nvar _introspection = require('../type/introspection');\n\nvar _scalars = require('../type/scalars');\n\nvar _schema = require('../type/schema');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           *  strict\n                                                                                                                                                           */\n\nfunction buildWrappedType(innerType, inputTypeNode) {\n  if (inputTypeNode.kind === _kinds.Kind.LIST_TYPE) {\n    return (0, _definition.GraphQLList)(buildWrappedType(innerType, inputTypeNode.type));\n  }\n  if (inputTypeNode.kind === _kinds.Kind.NON_NULL_TYPE) {\n    var wrappedType = buildWrappedType(innerType, inputTypeNode.type);\n    return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(wrappedType));\n  }\n  return innerType;\n}\n\nfunction getNamedTypeNode(typeNode) {\n  var namedType = typeNode;\n  while (namedType.kind === _kinds.Kind.LIST_TYPE || namedType.kind === _kinds.Kind.NON_NULL_TYPE) {\n    namedType = namedType.type;\n  }\n  return namedType;\n}\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query\n * and Mutation.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nfunction buildASTSchema(ast, options) {\n  if (!ast || ast.kind !== _kinds.Kind.DOCUMENT) {\n    throw new Error('Must provide a document ast.');\n  }\n\n  var schemaDef = void 0;\n\n  var typeDefs = [];\n  var nodeMap = Object.create(null);\n  var directiveDefs = [];\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var d = ast.definitions[i];\n    switch (d.kind) {\n      case _kinds.Kind.SCHEMA_DEFINITION:\n        if (schemaDef) {\n          throw new Error('Must provide only one schema definition.');\n        }\n        schemaDef = d;\n        break;\n      case _kinds.Kind.SCALAR_TYPE_DEFINITION:\n      case _kinds.Kind.OBJECT_TYPE_DEFINITION:\n      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:\n      case _kinds.Kind.ENUM_TYPE_DEFINITION:\n      case _kinds.Kind.UNION_TYPE_DEFINITION:\n      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        var typeName = d.name.value;\n        if (nodeMap[typeName]) {\n          throw new Error('Type \"' + typeName + '\" was defined more than once.');\n        }\n        typeDefs.push(d);\n        nodeMap[typeName] = d;\n        break;\n      case _kinds.Kind.DIRECTIVE_DEFINITION:\n        directiveDefs.push(d);\n        break;\n    }\n  }\n\n  var operationTypes = schemaDef ? getOperationTypes(schemaDef) : {\n    query: nodeMap.Query,\n    mutation: nodeMap.Mutation,\n    subscription: nodeMap.Subscription\n  };\n\n  var definitionBuilder = new ASTDefinitionBuilder(nodeMap, options, function (typeRef) {\n    throw new Error('Type \"' + typeRef.name.value + '\" not found in document.');\n  });\n\n  var types = definitionBuilder.buildTypes(typeDefs);\n  var directives = directiveDefs.map(function (def) {\n    return definitionBuilder.buildDirective(def);\n  });\n\n  // If specified directives were not explicitly declared, add them.\n  if (!directives.some(function (directive) {\n    return directive.name === 'skip';\n  })) {\n    directives.push(_directives.GraphQLSkipDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'include';\n  })) {\n    directives.push(_directives.GraphQLIncludeDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'deprecated';\n  })) {\n    directives.push(_directives.GraphQLDeprecatedDirective);\n  }\n\n  // Note: While this could make early assertions to get the correctly\n  // typed values below, that would throw immediately while type system\n  // validation with validateSchema() will produce more actionable results.\n  return new _schema.GraphQLSchema({\n    query: operationTypes.query ? definitionBuilder.buildType(operationTypes.query) : null,\n    mutation: operationTypes.mutation ? definitionBuilder.buildType(operationTypes.mutation) : null,\n    subscription: operationTypes.subscription ? definitionBuilder.buildType(operationTypes.subscription) : null,\n    types: types,\n    directives: directives,\n    astNode: schemaDef,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  });\n\n  function getOperationTypes(schema) {\n    var opTypes = {};\n    schema.operationTypes.forEach(function (operationType) {\n      var typeName = operationType.type.name.value;\n      var operation = operationType.operation;\n      if (opTypes[operation]) {\n        throw new Error('Must provide only one ' + operation + ' type in schema.');\n      }\n      if (!nodeMap[typeName]) {\n        throw new Error('Specified ' + operation + ' type \"' + typeName + '\" not found in document.');\n      }\n      opTypes[operation] = operationType.type;\n    });\n    return opTypes;\n  }\n}\n\nvar ASTDefinitionBuilder = exports.ASTDefinitionBuilder = function () {\n  function ASTDefinitionBuilder(typeDefinitionsMap, options, resolveType) {\n    _classCallCheck(this, ASTDefinitionBuilder);\n\n    this._typeDefinitionsMap = typeDefinitionsMap;\n    this._options = options;\n    this._resolveType = resolveType;\n    // Initialize to the GraphQL built in scalars and introspection types.\n    this._cache = (0, _keyMap2.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function (type) {\n      return type.name;\n    });\n  }\n\n  ASTDefinitionBuilder.prototype.buildTypes = function buildTypes(nodes) {\n    var _this = this;\n\n    return nodes.map(function (node) {\n      return _this.buildType(node);\n    });\n  };\n\n  ASTDefinitionBuilder.prototype.buildType = function buildType(node) {\n    var typeName = node.name.value;\n    if (!this._cache[typeName]) {\n      if (node.kind === _kinds.Kind.NAMED_TYPE) {\n        var defNode = this._typeDefinitionsMap[typeName];\n        this._cache[typeName] = defNode ? this._makeSchemaDef(defNode) : this._resolveType(node);\n      } else {\n        this._cache[typeName] = this._makeSchemaDef(node);\n      }\n    }\n    return this._cache[typeName];\n  };\n\n  ASTDefinitionBuilder.prototype._buildWrappedType = function _buildWrappedType(typeNode) {\n    var typeDef = this.buildType(getNamedTypeNode(typeNode));\n    return buildWrappedType(typeDef, typeNode);\n  };\n\n  ASTDefinitionBuilder.prototype.buildDirective = function buildDirective(directiveNode) {\n    return new _directives.GraphQLDirective({\n      name: directiveNode.name.value,\n      description: getDescription(directiveNode, this._options),\n      locations: directiveNode.locations.map(function (node) {\n        return node.value;\n      }),\n      args: directiveNode.arguments && this._makeInputValues(directiveNode.arguments),\n      astNode: directiveNode\n    });\n  };\n\n  ASTDefinitionBuilder.prototype.buildField = function buildField(field) {\n    return {\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      type: this._buildWrappedType(field.type),\n      description: getDescription(field, this._options),\n      args: field.arguments && this._makeInputValues(field.arguments),\n      deprecationReason: getDeprecationReason(field),\n      astNode: field\n    };\n  };\n\n  ASTDefinitionBuilder.prototype._makeSchemaDef = function _makeSchemaDef(def) {\n    switch (def.kind) {\n      case _kinds.Kind.OBJECT_TYPE_DEFINITION:\n        return this._makeTypeDef(def);\n      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:\n        return this._makeInterfaceDef(def);\n      case _kinds.Kind.ENUM_TYPE_DEFINITION:\n        return this._makeEnumDef(def);\n      case _kinds.Kind.UNION_TYPE_DEFINITION:\n        return this._makeUnionDef(def);\n      case _kinds.Kind.SCALAR_TYPE_DEFINITION:\n        return this._makeScalarDef(def);\n      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        return this._makeInputObjectDef(def);\n      default:\n        throw new Error('Type kind \"' + def.kind + '\" not supported.');\n    }\n  };\n\n  ASTDefinitionBuilder.prototype._makeTypeDef = function _makeTypeDef(def) {\n    var _this2 = this;\n\n    var typeName = def.name.value;\n    var interfaces = def.interfaces;\n    return new _definition.GraphQLObjectType({\n      name: typeName,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return _this2._makeFieldDefMap(def);\n      },\n      // Note: While this could make early assertions to get the correctly\n      // typed values, that would throw immediately while type system\n      // validation with validateSchema() will produce more actionable results.\n      interfaces: interfaces ? function () {\n        return _this2.buildTypes(interfaces);\n      } : [],\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeFieldDefMap = function _makeFieldDefMap(def) {\n    var _this3 = this;\n\n    return def.fields ? (0, _keyValMap2.default)(def.fields, function (field) {\n      return field.name.value;\n    }, function (field) {\n      return _this3.buildField(field);\n    }) : {};\n  };\n\n  ASTDefinitionBuilder.prototype._makeInputValues = function _makeInputValues(values) {\n    var _this4 = this;\n\n    return (0, _keyValMap2.default)(values, function (value) {\n      return value.name.value;\n    }, function (value) {\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      var type = _this4._buildWrappedType(value.type);\n      return {\n        type: type,\n        description: getDescription(value, _this4._options),\n        defaultValue: (0, _valueFromAST.valueFromAST)(value.defaultValue, type),\n        astNode: value\n      };\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeInterfaceDef = function _makeInterfaceDef(def) {\n    var _this5 = this;\n\n    return new _definition.GraphQLInterfaceType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return _this5._makeFieldDefMap(def);\n      },\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeEnumDef = function _makeEnumDef(def) {\n    var _this6 = this;\n\n    return new _definition.GraphQLEnumType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      values: def.values ? (0, _keyValMap2.default)(def.values, function (enumValue) {\n        return enumValue.name.value;\n      }, function (enumValue) {\n        return {\n          description: getDescription(enumValue, _this6._options),\n          deprecationReason: getDeprecationReason(enumValue),\n          astNode: enumValue\n        };\n      }) : {},\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeUnionDef = function _makeUnionDef(def) {\n    return new _definition.GraphQLUnionType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      // Note: While this could make assertions to get the correctly typed\n      // values below, that would throw immediately while type system\n      // validation with validateSchema() will produce more actionable results.\n      types: def.types ? this.buildTypes(def.types) : [],\n      astNode: def\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeScalarDef = function _makeScalarDef(def) {\n    return new _definition.GraphQLScalarType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      astNode: def,\n      serialize: function serialize(value) {\n        return value;\n      }\n    });\n  };\n\n  ASTDefinitionBuilder.prototype._makeInputObjectDef = function _makeInputObjectDef(def) {\n    var _this7 = this;\n\n    return new _definition.GraphQLInputObjectType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: function fields() {\n        return def.fields ? _this7._makeInputValues(def.fields) : {};\n      },\n      astNode: def\n    });\n  };\n\n  return ASTDefinitionBuilder;\n}();\n\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\n\nfunction getDeprecationReason(node) {\n  var deprecated = (0, _values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective, node);\n  return deprecated && deprecated.reason;\n}\n\n/**\n * Given an ast node, returns its string description.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nfunction getDescription(node, options) {\n  if (node.description) {\n    return node.description.value;\n  }\n  if (options && options.commentDescriptions) {\n    var rawValue = getLeadingCommentBlock(node);\n    if (rawValue !== undefined) {\n      return (0, _blockStringValue2.default)('\\n' + rawValue);\n    }\n  }\n}\n\nfunction getLeadingCommentBlock(node) {\n  var loc = node.loc;\n  if (!loc) {\n    return;\n  }\n  var comments = [];\n  var token = loc.startToken.prev;\n  while (token && token.kind === _lexer.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {\n    var value = String(token.value);\n    comments.push(value);\n    token = token.prev;\n  }\n  return comments.reverse().join('\\n');\n}\n\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\nfunction buildSchema(source, options) {\n  return buildASTSchema((0, _parser.parse)(source, options), options);\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","_interopRequireDefault","obj","__esModule","default","buildWrappedType","innerType","inputTypeNode","kind","_kinds","Kind","LIST_TYPE","_definition","GraphQLList","type","NON_NULL_TYPE","wrappedType","GraphQLNonNull","assertNullableType","getNamedTypeNode","typeNode","namedType","buildASTSchema","ast","options","getOperationTypes","schema","opTypes","operationTypes","forEach","operationType","typeName","name","value","operation","Error","nodeMap","DOCUMENT","schemaDef","typeDefs","Object","create","directiveDefs","i","definitions","length","d","SCHEMA_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","INTERFACE_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","UNION_TYPE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","push","DIRECTIVE_DEFINITION","query","Query","mutation","Mutation","subscription","Subscription","definitionBuilder","ASTDefinitionBuilder","typeRef","types","buildTypes","directives","map","def","buildDirective","some","directive","_directives","GraphQLSkipDirective","GraphQLIncludeDirective","GraphQLDeprecatedDirective","_schema","GraphQLSchema","buildType","astNode","assumeValid","allowedLegacyNames","getDeprecationReason","node","deprecated","_values","getDirectiveValues","reason","getDescription","description","commentDescriptions","loc","comments","token","startToken","prev","_lexer","TokenKind","COMMENT","next","line","String","reverse","join","undefined","rawValue","_blockStringValue2","defineProperty","buildSchema","source","_parser","parse","_keyMap","_keyMap2","_keyValMap","_keyValMap2","_valueFromAST","_blockStringValue","_introspection","_scalars","typeDefinitionsMap","resolveType","instance","TypeError","_typeDefinitionsMap","_options","_resolveType","_cache","specifiedScalarTypes","concat","introspectionTypes","prototype","ASTDefinitionBuilder.prototype.buildTypes","nodes","_this","ASTDefinitionBuilder.prototype.buildType","NAMED_TYPE","defNode","_makeSchemaDef","_buildWrappedType","ASTDefinitionBuilder.prototype._buildWrappedType","typeDef","ASTDefinitionBuilder.prototype.buildDirective","directiveNode","GraphQLDirective","locations","args","arguments","_makeInputValues","buildField","ASTDefinitionBuilder.prototype.buildField","field","deprecationReason","ASTDefinitionBuilder.prototype._makeSchemaDef","_makeTypeDef","_makeInterfaceDef","_makeEnumDef","_makeUnionDef","_makeScalarDef","_makeInputObjectDef","ASTDefinitionBuilder.prototype._makeTypeDef","_this2","interfaces","GraphQLObjectType","fields","_makeFieldDefMap","ASTDefinitionBuilder.prototype._makeFieldDefMap","_this3","ASTDefinitionBuilder.prototype._makeInputValues","values","_this4","defaultValue","valueFromAST","ASTDefinitionBuilder.prototype._makeInterfaceDef","_this5","GraphQLInterfaceType","ASTDefinitionBuilder.prototype._makeEnumDef","_this6","GraphQLEnumType","enumValue","ASTDefinitionBuilder.prototype._makeUnionDef","GraphQLUnionType","ASTDefinitionBuilder.prototype._makeScalarDef","GraphQLScalarType","serialize","ASTDefinitionBuilder.prototype._makeInputObjectDef","_this7","GraphQLInputObjectType"]
}
