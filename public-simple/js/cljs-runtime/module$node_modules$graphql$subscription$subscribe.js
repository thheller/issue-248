shadow$provide.module$node_modules$graphql$subscription$subscribe = function(e, r, b, u, a) {
  function g(a) {
    if (a instanceof f.GraphQLError) {
      return {errors:[a]};
    }
    throw a;
  }
  function c(a, b, c, f, e, h, u, r) {
    var n = function(c) {
      return (0, m.execute)(a, b, c, f, e, h, u);
    };
    return k(a, b, c, f, e, h, r).then(function(a) {
      return (0, l.isAsyncIterable)(a) ? (0, d.default)(a, n, g) : a;
    }, g);
  }
  function k(a, b, c, d, e, g, k) {
    (0, m.assertValidExecutionArguments)(a, b, e);
    try {
      var n = (0, m.buildExecutionContext)(a, b, c, d, e, g, k);
      if (Array.isArray(n)) {
        return Promise.resolve({errors:n});
      }
      var p = (0, m.getOperationRootType)(a, n.operation), q = (0, m.collectFields)(n, p, n.operation.selectionSet, Object.create(null), Object.create(null)), t = Object.keys(q)[0], y = q[t], x = y[0].name.value, v = (0, m.getFieldDef)(a, p, x);
      if (!v) {
        throw new f.GraphQLError('The subscription field "' + x + '" is not defined.', y);
      }
      var I = v.subscribe || n.fieldResolver, w = (0, m.addPath)(void 0, t), u = (0, m.buildResolveInfo)(n, v, y, p, w), r = (0, m.resolveFieldValueOrError)(n, v, y, I, c, u);
      return Promise.resolve(r).then(function(a) {
        if (a instanceof Error) {
          throw (0, h.locatedError)(a, y, (0, m.responsePathAsArray)(w));
        }
        if ((0, l.isAsyncIterable)(a)) {
          return a;
        }
        throw Error("Subscription field must return Async Iterable. Received: " + String(a));
      });
    } catch (S) {
      return Promise.reject(S);
    }
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.subscribe = function(a, b, d, f, e, h, g, k) {
    return 1 === arguments.length ? c(a.schema, a.document, a.rootValue, a.contextValue, a.variableValues, a.operationName, a.fieldResolver, a.subscribeFieldResolver) : c(a, b, d, f, e, h, g, k);
  };
  a.createSourceEventStream = k;
  var l = b("module$node_modules$iterall$index"), f = b("module$node_modules$graphql$error$GraphQLError"), h = b("module$node_modules$graphql$error$locatedError"), m = b("module$node_modules$graphql$execution$execute");
  b("module$node_modules$graphql$type$schema");
  var d = (e = b("module$node_modules$graphql$subscription$mapAsyncIterator")) && e.__esModule ? e : {default:e};
};

//# sourceMappingURL=module$node_modules$graphql$subscription$subscribe.js.map
