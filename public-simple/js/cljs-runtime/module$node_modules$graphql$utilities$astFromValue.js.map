{
"version":3,
"file":"module$node_modules$graphql$utilities$astFromValue.js",
"lineCount":70,
"mappings":"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",
"sources":["node_modules/graphql/utilities/astFromValue.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$astFromValue\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  strict\n                                                                                                                                                                                                                                                                               */\n\nexports.astFromValue = astFromValue;\n\nvar _iterall = require('iterall');\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\nvar _scalars = require('../type/scalars');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\nfunction astFromValue(value, type) {\n  if ((0, _definition.isNonNullType)(type)) {\n    var astValue = astFromValue(value, type.ofType);\n    if (astValue && astValue.kind === _kinds.Kind.NULL) {\n      return null;\n    }\n    return astValue;\n  }\n\n  // only explicit null, not undefined, NaN\n  if (value === null) {\n    return { kind: _kinds.Kind.NULL };\n  }\n\n  // undefined, NaN\n  if ((0, _isInvalid2.default)(value)) {\n    return null;\n  }\n\n  // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n  if ((0, _definition.isListType)(type)) {\n    var itemType = type.ofType;\n    if ((0, _iterall.isCollection)(value)) {\n      var valuesNodes = [];\n      (0, _iterall.forEach)(value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return { kind: _kinds.Kind.LIST, values: valuesNodes };\n    }\n    return astFromValue(value, itemType);\n  }\n\n  // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (value === null || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n      return null;\n    }\n    var fields = (0, _objectValues2.default)(type.getFields());\n    var fieldNodes = [];\n    fields.forEach(function (field) {\n      var fieldValue = astFromValue(value[field.name], field.type);\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: _kinds.Kind.OBJECT_FIELD,\n          name: { kind: _kinds.Kind.NAME, value: field.name },\n          value: fieldValue\n        });\n      }\n    });\n    return { kind: _kinds.Kind.OBJECT, fields: fieldNodes };\n  }\n\n  if ((0, _definition.isScalarType)(type) || (0, _definition.isEnumType)(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n    if ((0, _isNullish2.default)(serialized)) {\n      return null;\n    }\n\n    // Others serialize based on their corresponding JavaScript scalar types.\n    if (typeof serialized === 'boolean') {\n      return { kind: _kinds.Kind.BOOLEAN, value: serialized };\n    }\n\n    // JavaScript numbers can be Int or Float values.\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? { kind: _kinds.Kind.INT, value: stringNum } : { kind: _kinds.Kind.FLOAT, value: stringNum };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if ((0, _definition.isEnumType)(type)) {\n        return { kind: _kinds.Kind.ENUM, value: serialized };\n      }\n\n      // ID types can use Int literals.\n      if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {\n        return { kind: _kinds.Kind.INT, value: serialized };\n      }\n\n      return {\n        kind: _kinds.Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError('Cannot convert value to AST: ' + String(serialized));\n  }\n\n  /* istanbul ignore next */\n  throw new Error('Unknown type: ' + type + '.');\n}\n\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\nvar integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;\n};"],
"names":["shadow$provide","global","process","require","module","exports","_interopRequireDefault","obj","__esModule","default","astFromValue","value","type","_definition","isNonNullType","astValue","ofType","kind","_kinds","Kind","NULL","_isInvalid2","isListType","itemType","_iterall","isCollection","valuesNodes","forEach","item","itemNode","push","LIST","values","isInputObjectType","_typeof","fieldNodes","fields","_objectValues2","getFields","field","fieldValue","name","OBJECT_FIELD","NAME","OBJECT","isScalarType","isEnumType","serialized","serialize","_isNullish2","BOOLEAN","stringNum","String","integerStringRegExp","test","INT","FLOAT","ENUM","_scalars","GraphQLID","STRING","TypeError","Error","Object","defineProperty","Symbol","iterator","constructor","prototype","_isNullish","_isInvalid","_objectValues"]
}
