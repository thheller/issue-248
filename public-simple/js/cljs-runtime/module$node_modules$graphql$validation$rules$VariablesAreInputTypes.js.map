{
"version":3,
"file":"module$node_modules$graphql$validation$rules$VariablesAreInputTypes.js",
"lineCount":15,
"mappings":"AAAAA,cAAA,oEAAA,GAAwF,QAAQ,CAACC,CAAD,EAAQC,CAAR,EAAgBC,CAAhB,EAAwBC,CAAxB,EAA+BC,CAA/B,CAAwC;AAiBxIC,UAASA,EAAwB,CAACC,CAAD,EAAeC,CAAf,CAAyB;AACxD,WAAO,aAAP,GAAuBD,CAAvB,GAAsC,8BAAtC,GAAuEC,CAAvE,GAAkF,IAAlF;AADwD;AAd1DC,QAAAC,eAAA,CAAsBL,CAAtB,EAA+B,YAA/B,EAA6C,CAC3CM,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAN,GAAAC,yBAAA,GAAmCA,CAAnC;AACAD,GAAAO,uBAAA,GA6BAA,QAA+B,CAACC,CAAD,CAAU;AACvC,WAAO,CACLC,mBAAoBA,QAA2B,CAACC,CAAD,CAAO;AACpD,UAAIC,IAAO,CAAC,CAAA,EAAGC,CAAAC,YAAJ,EAA8BL,CAAAM,UAAA,EAA9B,EAAmDJ,CAAAC,KAAnD,CAAX;AAGIA,OAAJ,IAAY,CAAC,CAAC,CAAA,EAAGI,CAAAC,YAAJ,EAA6BL,CAA7B,CAAb,IAEEH,CAAAS,YAAA,CAAoB,IAAIC,CAAAC,aAAJ,CAAwBlB,CAAA,CADzBS,CAAAU,SAAAC,KAAAf,MACyB,EAAuC,CAAC,CAAA,EAAGgB,CAAAC,MAAJ,EAAoBb,CAAAC,KAApB,CAAvC,CAAxB,EAAgG,CAACD,CAAAC,KAAD,CAAhG,CAApB,CAFF;AAJoD,KADjD,CAAP;AADuC,GA7BzC;AAEA,MAAIO,IAASpB,CAAA,CAAQ,yCAAR,CAAb,EAEIwB,IAAWxB,CAAA,CAAQ,8CAAR,CAFf,EAIIiB,IAAcjB,CAAA,CAAQ,6CAAR,CAJlB,EAMIc,IAAed,CAAA,CAAQ,mDAAR,CANnB;AATwI,CAAxI;;",
"sources":["node_modules/graphql/validation/rules/VariablesAreInputTypes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$VariablesAreInputTypes\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nonInputTypeOnVarMessage = nonInputTypeOnVarMessage;\nexports.VariablesAreInputTypes = VariablesAreInputTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction nonInputTypeOnVarMessage(variableName, typeName) {\n  return 'Variable \"$' + variableName + '\" cannot be non-input type \"' + typeName + '\".';\n}\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);\n\n      // If the variable type is not an input type, return an error.\n      if (type && !(0, _definition.isInputType)(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new _error.GraphQLError(nonInputTypeOnVarMessage(variableName, (0, _printer.print)(node.type)), [node.type]));\n      }\n    }\n  };\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","nonInputTypeOnVarMessage","variableName","typeName","Object","defineProperty","value","VariablesAreInputTypes","context","VariableDefinition","node","type","_typeFromAST","typeFromAST","getSchema","_definition","isInputType","reportError","_error","GraphQLError","variable","name","_printer","print"]
}
