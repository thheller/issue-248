shadow$provide.module$node_modules$graphql$execution$values = function(e, r, b, u, a) {
  function g(a) {
    return a && a.__esModule ? a : {default:a};
  }
  function c(a, b, c) {
    var d = {};
    a = a.args;
    var e = b.arguments;
    if (!a || !e) {
      return d;
    }
    e = (0, h.default)(e, function(a) {
      return a.name.value;
    });
    for (var g = 0; g < a.length; g++) {
      var l = a[g], m = l.name, x = l.type, v = e[m];
      l = l.defaultValue;
      if (v) {
        if (v.value.kind === z.Kind.VARIABLE) {
          var n = v.value.name.value;
          if (c && Object.prototype.hasOwnProperty.call(c, n) && !(0, f.default)(c[n])) {
            d[m] = c[n];
          } else {
            if (!(0, f.default)(l)) {
              d[m] = l;
            } else {
              if ((0, y.isNonNullType)(x)) {
                throw new k.GraphQLError('Argument "' + m + '" of required type "' + String(x) + '" was ' + ('provided the variable "$' + n + '" which was not provided ') + "a runtime value.", [v.value]);
              }
            }
          }
        } else {
          l = v.value;
          x = (0, q.valueFromAST)(l, x, c);
          if ((0, f.default)(x)) {
            throw new k.GraphQLError('Argument "' + m + '" has invalid value ' + (0, t.print)(l) + ".", [v.value]);
          }
          d[m] = x;
        }
      } else {
        if (!(0, f.default)(l)) {
          d[m] = l;
        } else {
          if ((0, y.isNonNullType)(x)) {
            throw new k.GraphQLError('Argument "' + m + '" of required type ' + ('"' + String(x) + '" was not provided.'), [b]);
          }
        }
      }
    }
    return d;
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.getVariableValues = function(a, b, c) {
    for (var e = [], g = {}, h = 0; h < b.length; h++) {
      var l = b[h], n = l.variable.name.value, x = (0, d.typeFromAST)(a, l.type);
      if ((0, y.isInputType)(x)) {
        var v = c[n];
        if ((0, f.default)(v)) {
          (0, y.isNonNullType)(x) ? e.push(new k.GraphQLError('Variable "$' + n + '" of required type ' + ('"' + String(x) + '" was not provided.'), [l])) : l.defaultValue && (g[n] = (0, q.valueFromAST)(l.defaultValue, x));
        } else {
          l = (0, m.coerceValue)(v, x, l);
          var p = l.errors;
          p ? function() {
            var a = 'Variable "$' + n + '" got invalid value ' + JSON.stringify(v) + "; ";
            p.forEach(function(b) {
              b.message = a + b.message;
            });
            e.push.apply(e, p);
          }() : g[n] = l.value;
        }
      } else {
        e.push(new k.GraphQLError('Variable "$' + n + '" expected value of type ' + ('"' + (0, t.print)(l.type) + '" which cannot be used as an input type.'), [l.type]));
      }
    }
    return 0 === e.length ? {errors:void 0, coerced:g} : {errors:e, coerced:void 0};
  };
  a.getArgumentValues = c;
  a.getDirectiveValues = function(a, b, d) {
    if (b = b.directives && (0, l.default)(b.directives, function(b) {
      return b.name.value === a.name;
    })) {
      return c(a, b, d);
    }
  };
  var k = b("module$node_modules$graphql$error$index");
  e = b("module$node_modules$graphql$jsutils$find");
  var l = g(e);
  e = b("module$node_modules$graphql$jsutils$isInvalid");
  var f = g(e);
  e = b("module$node_modules$graphql$jsutils$keyMap");
  var h = g(e), m = b("module$node_modules$graphql$utilities$coerceValue"), d = b("module$node_modules$graphql$utilities$typeFromAST"), q = b("module$node_modules$graphql$utilities$valueFromAST"), z = b("module$node_modules$graphql$language$kinds"), t = b("module$node_modules$graphql$language$printer"), y = b("module$node_modules$graphql$type$definition");
};

//# sourceMappingURL=module$node_modules$graphql$execution$values.js.map
