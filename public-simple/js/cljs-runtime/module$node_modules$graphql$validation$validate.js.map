{
"version":3,
"file":"module$node_modules$graphql$validation$validate.js",
"lineCount":22,
"mappings":"AAAAA,cAAA,gDAAA,GAAoE,QAAQ,CAACC,CAAD,EAAQC,CAAR,EAAgBC,CAAhB,EAAwBC,CAAxB,EAA+BC,CAA/B,CAAwC;AAoEpHC,UAASA,EAAe,CAACC,CAAD,EAASC,CAAT,EAAmBC,CAAnB,EAAgCC,CAAhC,CAAuC;AAC7D,QAAIC,IAAU,IAAIC,CAAAC,QAAJ,CAAgCN,CAAhC,EAAwCE,CAAxC,EAAqDD,CAArD,CAAd;AACIM,KAAAA,GAAWJ,CAAAK,IAAA,CAAU,QAAS,CAACC,CAAD,CAAO;AACvC,aAAOA,CAAA,CAAKL,CAAL,CAAP;AADuC,KAA1B,CAAXG;AAIJ,KAAC,CAAA,EAAGG,CAAAC,MAAJ,EAAoBT,CAApB,EAAiC,CAAC,CAAA,EAAGQ,CAAAE,kBAAJ,EAAgCX,CAAhC,EAA0C,CAAC,CAAA,EAAGS,CAAAG,gBAAJ,EAA8BN,CAA9B,CAA1C,CAAjC,CAAA;AACA,WAAOH,CAAAU,UAAA,EAAP;AAP6D;AAjE/DC,QAAAC,eAAA,CAAsBlB,CAAtB,EAA+B,YAA/B,EAA6C,CAC3CmB,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAnB,GAAAoB,SAAA,GAiDAA,QAAiB,CAAClB,CAAD,EAASmB,CAAT,EAAchB,CAAd,EAAqBF,CAArB,CAA+B;AAC7CkB,KAAD,GAA8D,IAAK,EAAnE,GAAO,CAAC,CAAA,EAAGC,CAAAd,QAAJ,EAAyB,CAAzB,EAA4B,uBAA5B,CAAP;AAEA,KAAC,CAAA,EAAGe,CAAAC,kBAAJ,EAAiCtB,CAAjC,CAAA;AACA,WAAOD,CAAA,CAAgBC,CAAhB,EAAwBC,CAAxB,IAAoC,IAAIsB,CAAAC,SAAJ,CAAuBxB,CAAvB,CAApC,EAAoEmB,CAApE,EAAyEhB,CAAzE,IAAkFsB,CAAAC,eAAlF,CAAP;AAJ8C,GAjDhD;AAIA,MAAIN,IAkB0C,CApB1CO,CAoB0C,GApB7B/B,CAAA,CAAQ,+CAAR,CAoB6B,KAlBL+B,CAkBYC,WAAP,GAlBLD,CAkBK,GAA8B,CAAErB,QAlBrCqB,CAkBmC,CAlB5E;AAEa/B,GAAA,CAAQ,yCAAR,CAAA;AAEb,MAAIc,IAAWd,CAAA,CAAQ,8CAAR,CAAf;AAEcA,GAAA,CAAQ,yCAAR,CAAA;AAEd,MAAIyB,IAAYzB,CAAA,CAAQ,2CAAR,CAAhB,EAEI2B,IAAY3B,CAAA,CAAQ,gDAAR,CAFhB,EAII6B,IAAkB7B,CAAA,CAAQ,uDAAR,CAJtB,EAQIS,IAE0C,CAJ1CwB,CAI0C,GAJrBjC,CAAA,CAAQ,0DAAR,CAIqB,KAFGiC,CAEID,WAAP,GAFGC,CAEH,GAA8B,CAAEvB,QAF7BuB,CAE2B,CAV5E;AAlBoH,CAApH;;",
"sources":["node_modules/graphql/validation/validate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$validate\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validate = validate;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _error = require('../error');\n\nvar _visitor = require('../language/visitor');\n\nvar _schema = require('../type/schema');\n\nvar _validate = require('../type/validate');\n\nvar _TypeInfo = require('../utilities/TypeInfo');\n\nvar _specifiedRules = require('./specifiedRules');\n\nvar _ValidationContext = require('./ValidationContext');\n\nvar _ValidationContext2 = _interopRequireDefault(_ValidationContext);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction validate(schema, ast, rules, typeInfo) {\n  !ast ? (0, _invariant2.default)(0, 'Must provide document') : void 0;\n  // If the schema used for validation is invalid, throw an error.\n  (0, _validate.assertValidSchema)(schema);\n  return visitUsingRules(schema, typeInfo || new _TypeInfo.TypeInfo(schema), ast, rules || _specifiedRules.specifiedRules);\n}\n\n/**\n * This uses a specialized visitor which runs multiple visitors in parallel,\n * while maintaining the visitor skip and break API.\n *\n * @internal\n */\nfunction visitUsingRules(schema, typeInfo, documentAST, rules) {\n  var context = new _ValidationContext2.default(schema, documentAST, typeInfo);\n  var visitors = rules.map(function (rule) {\n    return rule(context);\n  });\n  // Visit the whole document with each instance of all provided rules.\n  (0, _visitor.visit)(documentAST, (0, _visitor.visitWithTypeInfo)(typeInfo, (0, _visitor.visitInParallel)(visitors)));\n  return context.getErrors();\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","visitUsingRules","schema","typeInfo","documentAST","rules","context","_ValidationContext2","default","visitors","map","rule","_visitor","visit","visitWithTypeInfo","visitInParallel","getErrors","Object","defineProperty","value","validate","ast","_invariant2","_validate","assertValidSchema","_TypeInfo","TypeInfo","_specifiedRules","specifiedRules","_invariant","__esModule","_ValidationContext"]
}
