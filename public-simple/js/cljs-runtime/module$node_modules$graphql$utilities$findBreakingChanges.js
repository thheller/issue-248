shadow$provide.module$node_modules$graphql$utilities$findBreakingChanges = function(e, r, b, u, a) {
  function g(a, b) {
    a = a.getTypeMap();
    var c = b.getTypeMap(), d = [];
    Object.keys(a).forEach(function(a) {
      c[a] || d.push({type:D.TYPE_REMOVED, description:a + " was removed."});
    });
    return d;
  }
  function c(a, b) {
    var c = a.getTypeMap(), d = b.getTypeMap(), e = [];
    Object.keys(c).forEach(function(a) {
      if (d[a]) {
        var b = c[a], f = d[a];
        b.constructor !== f.constructor && e.push({type:D.TYPE_CHANGED_KIND, description:a + " changed from " + (l(b) + " to " + l(f) + ".")});
      }
    });
    return e;
  }
  function k(a, b) {
    var c = a.getTypeMap(), e = b.getTypeMap(), f = [], h = [];
    Object.keys(c).forEach(function(a) {
      var b = c[a], g = e[a];
      if (((0, w.isObjectType)(b) || (0, w.isInterfaceType)(b)) && ((0, w.isObjectType)(g) || (0, w.isInterfaceType)(g)) && g.constructor === b.constructor) {
        var k = b.getFields(), l = g.getFields();
        Object.keys(k).forEach(function(a) {
          l[a] && (k[a].args.forEach(function(c) {
            var e = l[a].args.find(function(a) {
              return a.name === c.name;
            });
            e ? d(c.type, e.type) ? void 0 !== c.defaultValue && c.defaultValue !== e.defaultValue && h.push({type:S.ARG_DEFAULT_VALUE_CHANGE, description:b.name + "." + a + " arg " + (c.name + " has changed defaultValue")}) : f.push({type:D.ARG_CHANGED_KIND, description:b.name + "." + a + " arg " + (c.name + " has changed type from ") + (c.type.toString() + " to " + e.type.toString())}) : f.push({type:D.ARG_REMOVED, description:b.name + "." + a + " arg " + (c.name + " was removed")});
          }), l[a].args.forEach(function(b) {
            k[a].args.find(function(a) {
              return a.name === b.name;
            }) || ((0, w.isNonNullType)(b.type) ? f.push({type:D.NON_NULL_ARG_ADDED, description:"A non-null arg " + b.name + " on " + (g.name + "." + a + " was added")}) : h.push({type:S.NULLABLE_ARG_ADDED, description:"A nullable arg " + b.name + " on " + (g.name + "." + a + " was added")}));
          }));
        });
      }
    });
    return {breakingChanges:f, dangerousChanges:h};
  }
  function l(a) {
    if ((0, w.isScalarType)(a)) {
      return "a Scalar type";
    }
    if ((0, w.isObjectType)(a)) {
      return "an Object type";
    }
    if ((0, w.isInterfaceType)(a)) {
      return "an Interface type";
    }
    if ((0, w.isUnionType)(a)) {
      return "a Union type";
    }
    if ((0, w.isEnumType)(a)) {
      return "an Enum type";
    }
    if ((0, w.isInputObjectType)(a)) {
      return "an Input type";
    }
    throw new TypeError("Unknown type " + a.constructor.name);
  }
  function f(a, b) {
    var c = a.getTypeMap(), d = b.getTypeMap(), e = [];
    Object.keys(c).forEach(function(a) {
      var b = c[a], f = d[a];
      if (((0, w.isObjectType)(b) || (0, w.isInterfaceType)(b)) && ((0, w.isObjectType)(f) || (0, w.isInterfaceType)(f)) && f.constructor === b.constructor) {
        var h = b.getFields(), g = f.getFields();
        Object.keys(h).forEach(function(b) {
          if (b in g) {
            var c = h[b].type, d = g[b].type;
            m(c, d) || (c = (0, w.isNamedType)(c) ? c.name : c.toString(), d = (0, w.isNamedType)(d) ? d.name : d.toString(), e.push({type:D.FIELD_CHANGED_KIND, description:a + "." + b + " changed type from " + (c + " to " + d + ".")}));
          } else {
            e.push({type:D.FIELD_REMOVED, description:a + "." + b + " was removed."});
          }
        });
      }
    });
    return e;
  }
  function h(a, b) {
    var c = a.getTypeMap(), e = b.getTypeMap(), f = [], h = [];
    Object.keys(c).forEach(function(a) {
      var b = c[a], g = e[a];
      if ((0, w.isInputObjectType)(b) && (0, w.isInputObjectType)(g)) {
        var k = b.getFields(), l = g.getFields();
        Object.keys(k).forEach(function(b) {
          if (b in l) {
            var c = k[b].type, e = l[b].type;
            d(c, e) || (c = (0, w.isNamedType)(c) ? c.name : c.toString(), e = (0, w.isNamedType)(e) ? e.name : e.toString(), f.push({type:D.FIELD_CHANGED_KIND, description:a + "." + b + " changed type from " + (c + " to " + e + ".")}));
          } else {
            f.push({type:D.FIELD_REMOVED, description:a + "." + b + " was removed."});
          }
        });
        Object.keys(l).forEach(function(a) {
          a in k || ((0, w.isNonNullType)(l[a].type) ? f.push({type:D.NON_NULL_INPUT_FIELD_ADDED, description:"A non-null field " + a + " on " + ("input type " + g.name + " was added.")}) : h.push({type:S.NULLABLE_INPUT_FIELD_ADDED, description:"A nullable field " + a + " on " + ("input type " + g.name + " was added.")}));
        });
      }
    });
    return {breakingChanges:f, dangerousChanges:h};
  }
  function m(a, b) {
    return (0, w.isNamedType)(a) ? (0, w.isNamedType)(b) && a.name === b.name || (0, w.isNonNullType)(b) && m(a, b.ofType) : (0, w.isListType)(a) ? (0, w.isListType)(b) && m(a.ofType, b.ofType) || (0, w.isNonNullType)(b) && m(a, b.ofType) : (0, w.isNonNullType)(a) ? (0, w.isNonNullType)(b) && m(a.ofType, b.ofType) : !1;
  }
  function d(a, b) {
    return (0, w.isNamedType)(a) ? (0, w.isNamedType)(b) && a.name === b.name : (0, w.isListType)(a) ? (0, w.isListType)(b) && d(a.ofType, b.ofType) : (0, w.isNonNullType)(a) ? (0, w.isNonNullType)(b) && d(a.ofType, b.ofType) || !(0, w.isNonNullType)(b) && d(a.ofType, b) : !1;
  }
  function q(a, b) {
    var c = a.getTypeMap(), d = b.getTypeMap(), e = [];
    Object.keys(c).forEach(function(a) {
      var b = c[a], f = d[a];
      if ((0, w.isUnionType)(b) && (0, w.isUnionType)(f)) {
        var g = Object.create(null);
        f.getTypes().forEach(function(a) {
          g[a.name] = !0;
        });
        b.getTypes().forEach(function(b) {
          g[b.name] || e.push({type:D.TYPE_REMOVED_FROM_UNION, description:b.name + " was removed from union type " + a + "."});
        });
      }
    });
    return e;
  }
  function z(a, b) {
    var c = a.getTypeMap(), d = b.getTypeMap(), e = [];
    Object.keys(d).forEach(function(a) {
      var b = c[a], f = d[a];
      if ((0, w.isUnionType)(b) && (0, w.isUnionType)(f)) {
        var g = Object.create(null);
        b.getTypes().forEach(function(a) {
          g[a.name] = !0;
        });
        f.getTypes().forEach(function(b) {
          g[b.name] || e.push({type:S.TYPE_ADDED_TO_UNION, description:b.name + " was added to union type " + a + "."});
        });
      }
    });
    return e;
  }
  function t(a, b) {
    var c = a.getTypeMap(), d = b.getTypeMap(), e = [];
    Object.keys(c).forEach(function(a) {
      var b = c[a], f = d[a];
      if ((0, w.isEnumType)(b) && (0, w.isEnumType)(f)) {
        var g = Object.create(null);
        f.getValues().forEach(function(a) {
          g[a.name] = !0;
        });
        b.getValues().forEach(function(b) {
          g[b.name] || e.push({type:D.VALUE_REMOVED_FROM_ENUM, description:b.name + " was removed from enum type " + a + "."});
        });
      }
    });
    return e;
  }
  function y(a, b) {
    var c = a.getTypeMap(), d = b.getTypeMap(), e = [];
    Object.keys(c).forEach(function(a) {
      var b = c[a], f = d[a];
      if ((0, w.isEnumType)(b) && (0, w.isEnumType)(f)) {
        var g = Object.create(null);
        b.getValues().forEach(function(a) {
          g[a.name] = !0;
        });
        f.getValues().forEach(function(b) {
          g[b.name] || e.push({type:S.VALUE_ADDED_TO_ENUM, description:b.name + " was added to enum type " + a + "."});
        });
      }
    });
    return e;
  }
  function n(a, b) {
    var c = a.getTypeMap(), d = b.getTypeMap(), e = [];
    Object.keys(c).forEach(function(a) {
      var b = c[a], f = d[a];
      if ((0, w.isObjectType)(b) && (0, w.isObjectType)(f)) {
        b = b.getInterfaces();
        var g = f.getInterfaces();
        b.forEach(function(b) {
          g.some(function(a) {
            return a.name === b.name;
          }) || e.push({type:D.INTERFACE_REMOVED_FROM_OBJECT, description:a + " no longer implements interface " + (b.name + ".")});
        });
      }
    });
    return e;
  }
  function p(a, b) {
    var c = a.getTypeMap(), d = b.getTypeMap(), e = [];
    Object.keys(d).forEach(function(a) {
      var b = c[a], f = d[a];
      if ((0, w.isObjectType)(b) && (0, w.isObjectType)(f)) {
        var g = b.getInterfaces();
        f.getInterfaces().forEach(function(b) {
          g.some(function(a) {
            return a.name === b.name;
          }) || e.push({type:S.INTERFACE_ADDED_TO_OBJECT, description:b.name + " added to interfaces implemented " + ("by " + a + ".")});
        });
      }
    });
    return e;
  }
  function C(a, b) {
    var c = [], d = v(b);
    a.getDirectives().forEach(function(a) {
      d[a.name] || c.push({type:D.DIRECTIVE_REMOVED, description:a.name + " was removed"});
    });
    return c;
  }
  function J(a, b) {
    var c = [], d = I(b);
    a.args.forEach(function(a) {
      d[a.name] || c.push(a);
    });
    return c;
  }
  function H(a, b) {
    var c = [], d = v(a);
    b.getDirectives().forEach(function(a) {
      var b = d[a.name];
      b && J(b, a).forEach(function(b) {
        c.push({type:D.DIRECTIVE_ARG_REMOVED, description:b.name + " was removed from " + a.name});
      });
    });
    return c;
  }
  function M(a, b) {
    var c = [], d = I(a);
    b.args.forEach(function(a) {
      d[a.name] || c.push(a);
    });
    return c;
  }
  function F(a, b) {
    var c = [], d = v(a);
    b.getDirectives().forEach(function(a) {
      var b = d[a.name];
      b && M(b, a).forEach(function(b) {
        (0, w.isNonNullType)(b.type) && c.push({type:D.NON_NULL_DIRECTIVE_ARG_ADDED, description:"A non-null arg " + b.name + " on directive " + (a.name + " was added")});
      });
    });
    return c;
  }
  function B(a, b) {
    var c = [], d = new Set(b.locations);
    a.locations.forEach(function(a) {
      d.has(a) || c.push(a);
    });
    return c;
  }
  function x(a, b) {
    var c = [], d = v(a);
    b.getDirectives().forEach(function(a) {
      var b = d[a.name];
      b && B(b, a).forEach(function(b) {
        c.push({type:D.DIRECTIVE_LOCATION_REMOVED, description:b + " was removed from " + a.name});
      });
    });
    return c;
  }
  function v(a) {
    return (0, L.default)(a.getDirectives(), function(a) {
      return a.name;
    });
  }
  function I(a) {
    return (0, L.default)(a.args, function(a) {
      return a.name;
    });
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.DangerousChangeType = a.BreakingChangeType = void 0;
  a.findBreakingChanges = function(a, b) {
    return [].concat(g(a, b), c(a, b), f(a, b), h(a, b).breakingChanges, q(a, b), t(a, b), k(a, b).breakingChanges, n(a, b), C(a, b), H(a, b), F(a, b), x(a, b));
  };
  a.findDangerousChanges = function(a, b) {
    return [].concat(k(a, b).dangerousChanges, y(a, b), p(a, b), z(a, b), h(a, b).dangerousChanges);
  };
  a.findRemovedTypes = g;
  a.findTypesThatChangedKind = c;
  a.findArgChanges = k;
  a.findFieldsThatChangedTypeOnObjectOrInterfaceTypes = f;
  a.findFieldsThatChangedTypeOnInputObjectTypes = h;
  a.findTypesRemovedFromUnions = q;
  a.findTypesAddedToUnions = z;
  a.findValuesRemovedFromEnums = t;
  a.findValuesAddedToEnums = y;
  a.findInterfacesRemovedFromObjectTypes = n;
  a.findInterfacesAddedToObjectTypes = p;
  a.findRemovedDirectives = C;
  a.findRemovedDirectiveArgs = H;
  a.findAddedNonNullDirectiveArgs = F;
  a.findRemovedLocationsForDirective = B;
  a.findRemovedDirectiveLocations = x;
  var w = b("module$node_modules$graphql$type$definition");
  b("module$node_modules$graphql$type$directives");
  b("module$node_modules$graphql$type$schema");
  var L = (e = b("module$node_modules$graphql$jsutils$keyMap")) && e.__esModule ? e : {default:e}, D = a.BreakingChangeType = {FIELD_CHANGED_KIND:"FIELD_CHANGED_KIND", FIELD_REMOVED:"FIELD_REMOVED", TYPE_CHANGED_KIND:"TYPE_CHANGED_KIND", TYPE_REMOVED:"TYPE_REMOVED", TYPE_REMOVED_FROM_UNION:"TYPE_REMOVED_FROM_UNION", VALUE_REMOVED_FROM_ENUM:"VALUE_REMOVED_FROM_ENUM", ARG_REMOVED:"ARG_REMOVED", ARG_CHANGED_KIND:"ARG_CHANGED_KIND", NON_NULL_ARG_ADDED:"NON_NULL_ARG_ADDED", NON_NULL_INPUT_FIELD_ADDED:"NON_NULL_INPUT_FIELD_ADDED", 
  INTERFACE_REMOVED_FROM_OBJECT:"INTERFACE_REMOVED_FROM_OBJECT", DIRECTIVE_REMOVED:"DIRECTIVE_REMOVED", DIRECTIVE_ARG_REMOVED:"DIRECTIVE_ARG_REMOVED", DIRECTIVE_LOCATION_REMOVED:"DIRECTIVE_LOCATION_REMOVED", NON_NULL_DIRECTIVE_ARG_ADDED:"NON_NULL_DIRECTIVE_ARG_ADDED"}, S = a.DangerousChangeType = {ARG_DEFAULT_VALUE_CHANGE:"ARG_DEFAULT_VALUE_CHANGE", VALUE_ADDED_TO_ENUM:"VALUE_ADDED_TO_ENUM", INTERFACE_ADDED_TO_OBJECT:"INTERFACE_ADDED_TO_OBJECT", TYPE_ADDED_TO_UNION:"TYPE_ADDED_TO_UNION", NULLABLE_INPUT_FIELD_ADDED:"NULLABLE_INPUT_FIELD_ADDED", 
  NULLABLE_ARG_ADDED:"NULLABLE_ARG_ADDED"};
};

//# sourceMappingURL=module$node_modules$graphql$utilities$findBreakingChanges.js.map
