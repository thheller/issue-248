{
"version":3,
"file":"module$node_modules$graphql$utilities$typeComparators.js",
"lineCount":18,
"mappings":"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",
"sources":["node_modules/graphql/utilities/typeComparators.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$typeComparators\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEqualType = isEqualType;\nexports.isTypeSubTypeOf = isTypeSubTypeOf;\nexports.doTypesOverlap = doTypesOverlap;\n\nvar _definition = require('../type/definition');\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nfunction isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  }\n\n  // If either type is non-null, the other must also be non-null.\n  if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  }\n\n  // If either type is a list, the other must also be a list.\n  if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  }\n\n  // Otherwise the types are not equal.\n  return false;\n}\n\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  }\n\n  // If superType is non-null, maybeSubType must also be non-null.\n  if ((0, _definition.isNonNullType)(superType)) {\n    if ((0, _definition.isNonNullType)(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n    return false;\n  }\n  if ((0, _definition.isNonNullType)(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  }\n\n  // If superType type is a list, maybeSubType type must also be a list.\n  if ((0, _definition.isListType)(superType)) {\n    if ((0, _definition.isListType)(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n    return false;\n  }\n  if ((0, _definition.isListType)(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  }\n\n  // If superType type is an abstract type, maybeSubType type may be a currently\n  // possible object type.\n  if ((0, _definition.isAbstractType)(superType) && (0, _definition.isObjectType)(maybeSubType) && schema.isPossibleType(superType, maybeSubType)) {\n    return true;\n  }\n\n  // Otherwise, the child type is not a valid subtype of the parent type.\n  return false;\n}\n\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\nfunction doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if ((0, _definition.isAbstractType)(typeA)) {\n    if ((0, _definition.isAbstractType)(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema.getPossibleTypes(typeA).some(function (type) {\n        return schema.isPossibleType(typeB, type);\n      });\n    }\n    // Determine if the latter type is a possible concrete type of the former.\n    return schema.isPossibleType(typeA, typeB);\n  }\n\n  if ((0, _definition.isAbstractType)(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isPossibleType(typeB, typeA);\n  }\n\n  // Otherwise the types do not overlap.\n  return false;\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","isEqualType","typeA","typeB","_definition","isNonNullType","isListType","ofType","isTypeSubTypeOf","schema","maybeSubType","superType","isAbstractType","isObjectType","isPossibleType","Object","defineProperty","value","doTypesOverlap","getPossibleTypes","some","type"]
}
