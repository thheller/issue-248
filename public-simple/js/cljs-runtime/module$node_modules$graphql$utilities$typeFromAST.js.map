{
"version":3,
"file":"module$node_modules$graphql$utilities$typeFromAST.js",
"lineCount":18,
"mappings":"AAAAA,cAAA,kDAAA,GAAsE,QAAQ,CAACC,CAAD,EAAQC,CAAR,EAAgBC,CAAhB,EAAwBC,CAAxB,EAA+BC,CAA/B,CAAwC;AA6BtHC,UAASA,EAAW,CAACC,CAAD,EAASC,CAAT,CAAmB;AAGrC,QAAIA,CAAAC,KAAJ,KAAsBC,CAAAC,KAAAC,UAAtB;AAEE,cADAC,CACA,GADYP,CAAA,CAAYC,CAAZ,EAAoBC,CAAAM,KAApB,CACZ,KAAoB,CAAC,CAAA,EAAGC,CAAAC,YAAJ,EAA6BH,CAA7B,CAApB;AAFF;AAIA,QAAIL,CAAAC,KAAJ,KAAsBC,CAAAC,KAAAM,cAAtB;AAEE,cADAJ,CACA,GADYP,CAAA,CAAYC,CAAZ,EAAoBC,CAAAM,KAApB,CACZ,KAAoB,CAAC,CAAA,EAAGC,CAAAG,eAAJ,EAAgCL,CAAhC,CAApB;AAFF;AAIA,QAAIL,CAAAC,KAAJ,KAAsBC,CAAAC,KAAAQ,WAAtB;AACE,aAAOZ,CAAAa,QAAA,CAAeZ,CAAAa,KAAAC,MAAf,CAAP;AADF;AAIA,UAAUC,KAAJ,CAAU,wBAAV,GAAqCf,CAAAC,KAArC,GAAqD,GAArD,CAAN;AAfqC;AA1BvCe,QAAAC,eAAA,CAAsBpB,CAAtB,EAA+B,YAA/B,EAA6C,CAC3CiB,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAjB,GAAAC,YAAA,GAAsBA,CAAtB;AAEA,MAAII,IAASP,CAAA,CAAQ,4CAAR,CAAb,EAEIY,IAAcZ,CAAA,CAAQ,6CAAR,CAFlB;AARsH,CAAtH;;",
"sources":["node_modules/graphql/utilities/typeFromAST.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$typeFromAST\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeFromAST = typeFromAST;\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n/* eslint-disable no-redeclare */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType = void 0;\n  if (typeNode.kind === _kinds.Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && (0, _definition.GraphQLList)(innerType);\n  }\n  if (typeNode.kind === _kinds.Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && (0, _definition.GraphQLNonNull)(innerType);\n  }\n  if (typeNode.kind === _kinds.Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  }\n  /* istanbul ignore next */\n  throw new Error('Unexpected type kind: ' + typeNode.kind + '.');\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","typeFromAST","schema","typeNode","kind","_kinds","Kind","LIST_TYPE","innerType","type","_definition","GraphQLList","NON_NULL_TYPE","GraphQLNonNull","NAMED_TYPE","getType","name","value","Error","Object","defineProperty"]
}
