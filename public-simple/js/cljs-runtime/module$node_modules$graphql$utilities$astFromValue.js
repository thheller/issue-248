shadow$provide.module$node_modules$graphql$utilities$astFromValue = function(e, r, b, u, a) {
  function g(a) {
    return a && a.__esModule ? a : {default:a};
  }
  function c(a, b) {
    if ((0, q.isNonNullType)(b)) {
      return (b = c(a, b.ofType)) && b.kind === d.Kind.NULL ? null : b;
    }
    if (null === a) {
      return {kind:d.Kind.NULL};
    }
    if ((0, h.default)(a)) {
      return null;
    }
    if ((0, q.isListType)(b)) {
      var g = b.ofType;
      if ((0, l.isCollection)(a)) {
        var e = [];
        (0, l.forEach)(a, function(a) {
          (a = c(a, g)) && e.push(a);
        });
        return {kind:d.Kind.LIST, values:e};
      }
      return c(a, g);
    }
    if ((0, q.isInputObjectType)(b)) {
      if (null === a || "object" !== ("undefined" === typeof a ? "undefined" : k(a))) {
        return null;
      }
      var n = [];
      (0, m.default)(b.getFields()).forEach(function(b) {
        var f = c(a[b.name], b.type);
        f && n.push({kind:d.Kind.OBJECT_FIELD, name:{kind:d.Kind.NAME, value:b.name}, value:f});
      });
      return {kind:d.Kind.OBJECT, fields:n};
    }
    if ((0, q.isScalarType)(b) || (0, q.isEnumType)(b)) {
      var H = b.serialize(a);
      if ((0, f.default)(H)) {
        return null;
      }
      if ("boolean" === typeof H) {
        return {kind:d.Kind.BOOLEAN, value:H};
      }
      if ("number" === typeof H) {
        return b = String(H), t.test(b) ? {kind:d.Kind.INT, value:b} : {kind:d.Kind.FLOAT, value:b};
      }
      if ("string" === typeof H) {
        return (0, q.isEnumType)(b) ? {kind:d.Kind.ENUM, value:H} : b === z.GraphQLID && t.test(H) ? {kind:d.Kind.INT, value:H} : {kind:d.Kind.STRING, value:H};
      }
      throw new TypeError("Cannot convert value to AST: " + String(H));
    }
    throw Error("Unknown type: " + b + ".");
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  var k = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(a) {
    return typeof a;
  } : function(a) {
    return a && "function" === typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
  };
  a.astFromValue = c;
  var l = b("module$node_modules$iterall$index");
  e = b("module$node_modules$graphql$jsutils$isNullish");
  var f = g(e);
  e = b("module$node_modules$graphql$jsutils$isInvalid");
  var h = g(e);
  e = b("module$node_modules$graphql$jsutils$objectValues");
  var m = g(e), d = b("module$node_modules$graphql$language$kinds"), q = b("module$node_modules$graphql$type$definition"), z = b("module$node_modules$graphql$type$scalars"), t = /^-?(0|[1-9][0-9]*)$/;
};

//# sourceMappingURL=module$node_modules$graphql$utilities$astFromValue.js.map
