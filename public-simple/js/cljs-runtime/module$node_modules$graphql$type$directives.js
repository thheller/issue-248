shadow$provide.module$node_modules$graphql$type$directives = function(e, r, b, u, a) {
  Object.defineProperty(a, "__esModule", {value:!0});
  a.specifiedDirectives = a.GraphQLDeprecatedDirective = a.DEFAULT_DEPRECATION_REASON = a.GraphQLSkipDirective = a.GraphQLIncludeDirective = a.GraphQLDirective = void 0;
  a.isDirective = function(a) {
    return (0, g.default)(a, k);
  };
  a.isSpecifiedDirective = function(a) {
    return f.some(function(b) {
      return b.name === a.name;
    });
  };
  r = b("module$node_modules$graphql$type$definition");
  e = b("module$node_modules$graphql$type$scalars");
  var g = (u = b("module$node_modules$graphql$jsutils$instanceOf")) && u.__esModule ? u : {default:u}, c = (u = b("module$node_modules$graphql$jsutils$invariant")) && u.__esModule ? u : {default:u};
  u = b("module$node_modules$graphql$language$directiveLocation");
  var k = a.GraphQLDirective = function d(a) {
    if (!(this instanceof d)) {
      throw new TypeError("Cannot call a class as a function");
    }
    this.name = a.name;
    this.description = a.description;
    this.locations = a.locations;
    this.astNode = a.astNode;
    a.name ? void 0 : (0, c.default)(0, "Directive must be named.");
    Array.isArray(a.locations) ? void 0 : (0, c.default)(0, "Must provide locations for directive.");
    var b = a.args;
    b ? (Array.isArray(b) ? (0, c.default)(0, "@" + a.name + " args must be an object with argument names as keys.") : void 0, this.args = Object.keys(b).map(function(a) {
      var d = b[a];
      return {name:a, description:void 0 === d.description ? null : d.description, type:d.type, defaultValue:d.defaultValue, astNode:d.astNode};
    })) : this.args = [];
  };
  b = a.GraphQLIncludeDirective = new k({name:"include", description:"Directs the executor to include this field or fragment only when the `if` argument is true.", locations:[u.DirectiveLocation.FIELD, u.DirectiveLocation.FRAGMENT_SPREAD, u.DirectiveLocation.INLINE_FRAGMENT], args:{if:{type:(0, r.GraphQLNonNull)(e.GraphQLBoolean), description:"Included when true."}}});
  r = a.GraphQLSkipDirective = new k({name:"skip", description:"Directs the executor to skip this field or fragment when the `if` argument is true.", locations:[u.DirectiveLocation.FIELD, u.DirectiveLocation.FRAGMENT_SPREAD, u.DirectiveLocation.INLINE_FRAGMENT], args:{if:{type:(0, r.GraphQLNonNull)(e.GraphQLBoolean), description:"Skipped when true."}}});
  var l = a.DEFAULT_DEPRECATION_REASON = "No longer supported";
  e = a.GraphQLDeprecatedDirective = new k({name:"deprecated", description:"Marks an element of a GraphQL schema as no longer supported.", locations:[u.DirectiveLocation.FIELD_DEFINITION, u.DirectiveLocation.ENUM_VALUE], args:{reason:{type:e.GraphQLString, description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted in [Markdown](https://daringfireball.net/projects/markdown/).", defaultValue:l}}});
  var f = a.specifiedDirectives = [b, r, e];
};

//# sourceMappingURL=module$node_modules$graphql$type$directives.js.map
