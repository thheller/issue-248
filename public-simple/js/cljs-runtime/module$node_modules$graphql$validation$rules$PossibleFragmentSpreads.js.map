{
"version":3,
"file":"module$node_modules$graphql$validation$rules$PossibleFragmentSpreads.js",
"lineCount":31,
"mappings":"AAAAA,cAAA,qEAAA,GAAyF,QAAQ,CAACC,CAAD,EAAQC,CAAR,EAAgBC,CAAhB,EAAwBC,CAAxB,EAA+BC,CAA/B,CAAwC;AAkBzIC,UAASA,EAA6B,CAACC,CAAD,EAAWC,CAAX,EAAuBC,CAAvB,CAAiC;AACrE,WAAO,YAAP,GAAsBF,CAAtB,GAAiC,wCAAjC,IAA6E,QAA7E,GAAwFG,MAAA,CAAOF,CAAP,CAAxF,GAA6G,0BAA7G,GAA0IE,MAAA,CAAOD,CAAP,CAA1I,GAA6J,IAA7J;AADqE;AAWvEE,UAASA,EAAiC,CAACH,CAAD,EAAaC,CAAb,CAAuB;AAC/D,WAAO,+CAAP,IAA0D,QAA1D,GAAqEC,MAAA,CAAOF,CAAP,CAArE,GAA0F,0BAA1F,GAAuHE,MAAA,CAAOD,CAAP,CAAvH,GAA0I,IAA1I;AAD+D;AA1BjEG,QAAAC,eAAA,CAAsBR,CAAtB,EAA+B,YAA/B,EAA6C,CAC3CS,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAT,GAAAC,8BAAA,GAAwCA,CAAxC;AACAD,GAAAM,kCAAA,GAA4CA,CAA5C;AACAN,GAAAU,wBAAA,GAgCAA,QAAgC,CAACC,CAAD,CAAU;AACxC,WAAO,CACLC,eAAgBA,QAAuB,CAACC,CAAD,CAAO;AAC5C,UAAIT,IAAWO,CAAAG,QAAA,EAAf,EACIX,IAAaQ,CAAAI,cAAA,EADjB;AAEI,OAAC,CAAA,EAAGC,CAAAC,gBAAJ,EAAiCb,CAAjC,CAAJ,IAAkD,CAAC,CAAA,EAAGY,CAAAC,gBAAJ,EAAiCd,CAAjC,CAAlD,IAAkG,CAAC,CAAC,CAAA,EAAGe,CAAAC,eAAJ,EAAqCR,CAAAS,UAAA,EAArC,EAA0DhB,CAA1D,EAAoED,CAApE,CAAnG,IACEQ,CAAAU,YAAA,CAAoB,IAAIC,CAAAC,aAAJ,CAAwBjB,CAAA,CAAkCH,CAAlC,EAA8CC,CAA9C,CAAxB,EAAiF,CAACS,CAAD,CAAjF,CAApB,CADF;AAH4C,KADzC,EAQLW,eAAgBA,QAAuB,CAACX,CAAD,CAAO;AAC5C,UAAIX,IAAWW,CAAAY,KAAAhB,MAAf,EACIL,CADJ;AAUkC,OAAA,CAAA;AAEtC,YADIsB,CACJ,GAXmCf,CAUxBgB,YAAA,CAViCzB,CAUjC,CACX;AAEE,cADI0B,CACA,GADO,CAAC,CAAA,EAAGC,CAAAC,YAAJ,EAZsBnB,CAYQS,UAAA,EAA9B,EAAmDM,CAAAK,cAAnD,CACP,EAAA,CAAC,CAAA,EAAGf,CAAAC,gBAAJ,EAAiCW,CAAjC,CAAJ;AACE,kBAAA,CAAA;AADF;AAFF;AAFsC,SAAA,GAAA,IAAA,EAAA;AAAA;AARlC,UAAIzB,IAAaQ,CAAAI,cAAA,EAAjB;AACIX,OAAJ,IAAgBD,CAAhB,IAA8B,CAAC,CAAC,CAAA,EAAGe,CAAAC,eAAJ,EAAqCR,CAAAS,UAAA,EAArC,EAA0DhB,CAA1D,EAAoED,CAApE,CAA/B,IACEQ,CAAAU,YAAA,CAAoB,IAAIC,CAAAC,aAAJ,CAAwBtB,CAAA,CAA8BC,CAA9B,EAAwCC,CAAxC,EAAoDC,CAApD,CAAxB,EAAuF,CAACS,CAAD,CAAvF,CAApB,CADF;AAJ4C,KARzC,CAAP;AADwC,GAhC1C;AAEA,MAAIS,IAASxB,CAAA,CAAQ,yCAAR,CAAb,EAEIoB,IAAmBpB,CAAA,CAAQ,uDAAR,CAFvB,EAII+B,IAAe/B,CAAA,CAAQ,mDAAR,CAJnB,EAMIkB,IAAclB,CAAA,CAAQ,6CAAR,CANlB;AAVyI,CAAzI;;",
"sources":["node_modules/graphql/validation/rules/PossibleFragmentSpreads.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$PossibleFragmentSpreads\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeIncompatibleSpreadMessage = typeIncompatibleSpreadMessage;\nexports.typeIncompatibleAnonSpreadMessage = typeIncompatibleAnonSpreadMessage;\nexports.PossibleFragmentSpreads = PossibleFragmentSpreads;\n\nvar _error = require('../../error');\n\nvar _typeComparators = require('../../utilities/typeComparators');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nvar _definition = require('../../type/definition');\n\nfunction typeIncompatibleSpreadMessage(fragName, parentType, fragType) {\n  return 'Fragment \"' + fragName + '\" cannot be spread here as objects of ' + ('type \"' + String(parentType) + '\" can never be of type \"' + String(fragType) + '\".');\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\nfunction typeIncompatibleAnonSpreadMessage(parentType, fragType) {\n  return 'Fragment cannot be spread here as objects of ' + ('type \"' + String(parentType) + '\" can never be of type \"' + String(fragType) + '\".');\n}\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nfunction PossibleFragmentSpreads(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n      if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {\n        context.reportError(new _error.GraphQLError(typeIncompatibleAnonSpreadMessage(parentType, fragType), [node]));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n      if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {\n        context.reportError(new _error.GraphQLError(typeIncompatibleSpreadMessage(fragName, parentType, fragType), [node]));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n  if (frag) {\n    var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);\n    if ((0, _definition.isCompositeType)(type)) {\n      return type;\n    }\n  }\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","typeIncompatibleSpreadMessage","fragName","parentType","fragType","String","typeIncompatibleAnonSpreadMessage","Object","defineProperty","value","PossibleFragmentSpreads","context","InlineFragment","node","getType","getParentType","_definition","isCompositeType","_typeComparators","doTypesOverlap","getSchema","reportError","_error","GraphQLError","FragmentSpread","name","frag","getFragment","type","_typeFromAST","typeFromAST","typeCondition"]
}
