{
"version":3,
"file":"module$node_modules$graphql$language$printer.js",
"lineCount":132,
"mappings":"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",
"sources":["node_modules/graphql/language/printer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$language$printer\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.print = print;\n\nvar _visitor = require('./visitor');\n\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\nfunction print(ast) {\n  return (0, _visitor.visit)(ast, { leave: printDocASTReducer });\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n\n  // Document\n\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet;\n    // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n\n\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue;\n    return variable + ': ' + type + wrap(' = ', defaultValue);\n  },\n\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n\n  // Fragments\n\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (\n      // Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      'fragment ' + name + wrap('(', join(variableDefinitions, ', '), ')') + ' ' + ('on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n\n  // Value\n\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n\n  // Directive\n\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n\n  // Type\n\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n\n  // Type System Definitions\n\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + wrap('(', join(args, ', '), ')') + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n\n  ScalarTypeExtension: function ScalarTypeExtension(_ref31) {\n    var name = _ref31.name,\n        directives = _ref31.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n\n  ObjectTypeExtension: function ObjectTypeExtension(_ref32) {\n    var name = _ref32.name,\n        interfaces = _ref32.interfaces,\n        directives = _ref32.directives,\n        fields = _ref32.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives,\n        fields = _ref33.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n\n  UnionTypeExtension: function UnionTypeExtension(_ref34) {\n    var name = _ref34.name,\n        directives = _ref34.directives,\n        types = _ref34.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n\n  EnumTypeExtension: function EnumTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        values = _ref35.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        fields = _ref36.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  },\n\n  DirectiveDefinition: addDescription(function (_ref37) {\n    var name = _ref37.name,\n        args = _ref37.arguments,\n        locations = _ref37.locations;\n    return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');\n  })\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\nfunction printBlockString(value, isDescription) {\n  var escaped = value.replace(/\"\"\"/g, '\\\\\"\"\"');\n  return (value[0] === ' ' || value[0] === '\\t') && value.indexOf('\\n') === -1 ? '\"\"\"' + escaped.replace(/\"$/, '\"\\n') + '\"\"\"' : '\"\"\"\\n' + (isDescription ? escaped : indent(escaped)) + '\\n\"\"\"';\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","addDescription","cb","node","join","description","maybeArray","separator","filter","x","block","array","length","indent","wrap","start","maybeString","end","replace","Object","defineProperty","value","print","ast","_visitor","visit","leave","printDocASTReducer","Name","Variable","name","Document","definitions","OperationDefinition","op","operation","varDefs","variableDefinitions","directives","selectionSet","VariableDefinition","_ref","variable","type","defaultValue","SelectionSet","_ref2","selections","Field","_ref3","args","arguments","alias","Argument","_ref4","FragmentSpread","_ref5","InlineFragment","_ref6","typeCondition","FragmentDefinition","_ref7","IntValue","_ref8","FloatValue","_ref9","StringValue","_ref10","key","escaped","indexOf","isDescription","BooleanValue","_ref11","NullValue","EnumValue","_ref12","ListValue","_ref13","values","ObjectValue","_ref14","fields","ObjectField","_ref15","Directive","_ref16","NamedType","_ref17","ListType","_ref18","NonNullType","_ref19","SchemaDefinition","_ref20","operationTypes","OperationTypeDefinition","_ref21","ScalarTypeDefinition","_ref22","ObjectTypeDefinition","_ref23","interfaces","FieldDefinition","_ref24","InputValueDefinition","_ref25","InterfaceTypeDefinition","_ref26","UnionTypeDefinition","_ref27","types","EnumTypeDefinition","_ref28","EnumValueDefinition","_ref29","InputObjectTypeDefinition","_ref30","ScalarTypeExtension","_ref31","ObjectTypeExtension","_ref32","InterfaceTypeExtension","_ref33","UnionTypeExtension","_ref34","EnumTypeExtension","_ref35","InputObjectTypeExtension","_ref36","DirectiveDefinition","_ref37","locations"]
}
