shadow$provide.module$node_modules$graphql$execution$execute = function(e, r, b, u, a) {
  function g(a) {
    return a && a.__esModule ? a : {default:a};
  }
  function c(a, b, c, f, e, g, l) {
    h(a, b, e);
    a = m(a, b, c, f, e, g, l);
    if (Array.isArray(a)) {
      return {errors:a};
    }
    c = d(a, a.operation, c);
    return k(a, c);
  }
  function k(a, b) {
    return (0, X.default)(b) ? b.then(function(b) {
      return k(a, b);
    }) : 0 === a.errors.length ? {data:b} : {errors:a.errors, data:b};
  }
  function l(a) {
    for (var b = []; a;) {
      b.push(a.key), a = a.prev;
    }
    return b.reverse();
  }
  function f(a, b) {
    return {prev:a, key:b};
  }
  function h(a, b, c) {
    b ? void 0 : (0, Z.default)(0, "Must provide document");
    (0, ba.assertValidSchema)(a);
    c && "object" !== ("undefined" === typeof c ? "undefined" : U(c)) ? (0, Z.default)(0, "Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.") : void 0;
  }
  function m(a, b, c, d, f, e, g) {
    for (var h = [], k = void 0, l = !1, v = Object.create(null), x = 0; x < b.definitions.length; x++) {
      var A = b.definitions[x];
      switch(A.kind) {
        case N.Kind.OPERATION_DEFINITION:
          if (!e && k) {
            l = !0;
          } else {
            if (!e || A.name && A.name.value === e) {
              k = A;
            }
          }
          break;
        case N.Kind.FRAGMENT_DEFINITION:
          v[A.name.value] = A;
      }
    }
    k ? l && h.push(new V.GraphQLError("Must provide operation name if query contains multiple operations.")) : e ? h.push(new V.GraphQLError('Unknown operation named "' + e + '".')) : h.push(new V.GraphQLError("Must provide an operation."));
    b = void 0;
    k && (f = (0, W.getVariableValues)(a, k.variableDefinitions || [], f || {}), f.errors ? h.push.apply(h, f.errors) : b = f.coerced);
    if (0 !== h.length) {
      return h;
    }
    k ? void 0 : (0, Z.default)(0, "Has operation if no errors.");
    b ? void 0 : (0, Z.default)(0, "Has variables if no errors.");
    return {schema:a, fragments:v, rootValue:c, contextValue:d, operation:k, variableValues:b, fieldResolver:g || fa, errors:h};
  }
  function d(a, b, c) {
    var d = q(a.schema, b), f = y(a, d, b.selectionSet, Object.create(null), Object.create(null));
    try {
      var e = "mutation" === b.operation ? z(a, d, c, void 0, f) : t(a, d, c, void 0, f);
      return (0, X.default)(e) ? e.then(void 0, function(b) {
        a.errors.push(b);
        return Promise.resolve(null);
      }) : e;
    } catch (ka) {
      return a.errors.push(ka), null;
    }
  }
  function q(a, b) {
    switch(b.operation) {
      case "query":
        a = a.getQueryType();
        if (!a) {
          throw new V.GraphQLError("Schema does not define the required query root type.", [b]);
        }
        return a;
      case "mutation":
        a = a.getMutationType();
        if (!a) {
          throw new V.GraphQLError("Schema is not configured for mutations.", [b]);
        }
        return a;
      case "subscription":
        a = a.getSubscriptionType();
        if (!a) {
          throw new V.GraphQLError("Schema is not configured for subscriptions.", [b]);
        }
        return a;
      default:
        throw new V.GraphQLError("Can only execute queries, mutations and subscriptions.", [b]);
    }
  }
  function z(a, b, c, d, e) {
    return (0, E.default)(Object.keys(e), function(h, g) {
      var k = e[g], l = f(d, g);
      k = C(a, b, c, k, l);
      if (void 0 === k) {
        return h;
      }
      if ((0, X.default)(k)) {
        return k.then(function(a) {
          h[g] = a;
          return h;
        });
      }
      h[g] = k;
      return h;
    }, Object.create(null));
  }
  function t(a, b, c, d, e) {
    var h = !1, g = Object.keys(e).reduce(function(g, k) {
      var l = e[k], v = f(d, k);
      l = C(a, b, c, l, v);
      if (void 0 === l) {
        return g;
      }
      g[k] = l;
      !h && (0, X.default)(l) && (h = !0);
      return g;
    }, Object.create(null));
    return h ? (0, da.default)(g) : g;
  }
  function y(a, b, c, d, f) {
    for (var e = 0; e < c.selections.length; e++) {
      var h = c.selections[e];
      switch(h.kind) {
        case N.Kind.FIELD:
          if (!n(a, h)) {
            continue;
          }
          var g = h.alias ? h.alias.value : h.name.value;
          d[g] || (d[g] = []);
          d[g].push(h);
          break;
        case N.Kind.INLINE_FRAGMENT:
          if (!n(a, h) || !p(a, h, b)) {
            continue;
          }
          y(a, b, h.selectionSet, d, f);
          break;
        case N.Kind.FRAGMENT_SPREAD:
          g = h.name.value, !f[g] && n(a, h) && (f[g] = !0, (h = a.fragments[g]) && p(a, h, b) && y(a, b, h.selectionSet, d, f));
      }
    }
    return d;
  }
  function n(a, b) {
    var c = (0, W.getDirectiveValues)(Y.GraphQLSkipDirective, b, a.variableValues);
    return c && !0 === c.if ? !1 : (a = (0, W.getDirectiveValues)(Y.GraphQLIncludeDirective, b, a.variableValues)) && !1 === a.if ? !1 : !0;
  }
  function p(a, b, c) {
    b = b.typeCondition;
    if (!b) {
      return !0;
    }
    b = (0, aa.typeFromAST)(a.schema, b);
    return b === c ? !0 : (0, O.isAbstractType)(b) ? a.schema.isPossibleType(b, c) : !1;
  }
  function C(a, b, c, d, f) {
    var e = T(a.schema, b, d[0].name.value);
    if (e) {
      var h = e.resolve || a.fieldResolver;
      b = J(a, e, d, b, f);
      c = H(a, e, d, h, c, b);
      return F(a, e.type, d, b, f, c);
    }
  }
  function J(a, b, c, d, f) {
    return {fieldName:c[0].name.value, fieldNodes:c, returnType:b.type, parentType:d, path:f, schema:a.schema, fragments:a.fragments, rootValue:a.rootValue, operation:a.operation, variableValues:a.variableValues};
  }
  function H(a, b, c, d, f, e) {
    try {
      var h = (0, W.getArgumentValues)(b, c[0], a.variableValues), g = d(f, h, a.contextValue, e);
      return (0, X.default)(g) ? g.then(void 0, M) : g;
    } catch (la) {
      return M(la);
    }
  }
  function M(a) {
    return a instanceof Error ? a : Error(a || void 0);
  }
  function F(a, b, c, d, f, e) {
    if ((0, O.isNonNullType)(b)) {
      return B(a, b, c, d, f, e);
    }
    try {
      var h = B(a, b, c, d, f, e);
      return (0, X.default)(h) ? h.then(void 0, function(b) {
        a.errors.push(b);
        return Promise.resolve(null);
      }) : h;
    } catch (ia) {
      return a.errors.push(ia), null;
    }
  }
  function B(a, b, c, d, f, e) {
    try {
      var h = x(a, b, c, d, f, e);
      return (0, X.default)(h) ? h.then(void 0, function(a) {
        return Promise.reject((0, V.locatedError)(M(a), c, l(f)));
      }) : h;
    } catch (ia) {
      throw (0, V.locatedError)(M(ia), c, l(f));
    }
  }
  function x(a, b, c, d, f, e) {
    if ((0, X.default)(e)) {
      return e.then(function(e) {
        return x(a, b, c, d, f, e);
      });
    }
    if (e instanceof Error) {
      throw e;
    }
    if ((0, O.isNonNullType)(b)) {
      e = x(a, b.ofType, c, d, f, e);
      if (null === e) {
        throw Error("Cannot return null for non-nullable field " + d.parentType.name + "." + d.fieldName + ".");
      }
      return e;
    }
    if ((0, ca.default)(e)) {
      return null;
    }
    if ((0, O.isListType)(b)) {
      return v(a, b, c, d, f, e);
    }
    if ((0, O.isLeafType)(b)) {
      return I(b, e);
    }
    if ((0, O.isAbstractType)(b)) {
      return w(a, b, c, d, f, e);
    }
    if ((0, O.isObjectType)(b)) {
      return D(a, b, c, d, f, e);
    }
    throw Error('Cannot complete value of unexpected type "' + String(b) + '".');
  }
  function v(a, b, c, d, e, h) {
    (0, G.isCollection)(h) ? void 0 : (0, Z.default)(0, "Expected Iterable, but did not find one for field " + d.parentType.name + "." + d.fieldName + ".");
    var g = b.ofType, k = !1, l = [];
    (0, G.forEach)(h, function(b, h) {
      h = f(e, h);
      b = F(a, g, c, d, h, b);
      !k && (0, X.default)(b) && (k = !0);
      l.push(b);
    });
    return k ? Promise.all(l) : l;
  }
  function I(a, b) {
    a.serialize ? void 0 : (0, Z.default)(0, "Missing serialize method on type");
    var c = a.serialize(b);
    if ((0, ha.default)(c)) {
      throw Error('Expected a value of type "' + String(a) + '" but ' + ("received: " + String(b)));
    }
    return c;
  }
  function w(a, b, c, d, f, e) {
    var h = b.resolveType ? b.resolveType(e, a.contextValue, d) : Q(e, a.contextValue, d, b);
    return (0, X.default)(h) ? h.then(function(h) {
      return D(a, L(h, a, b, c, d, e), c, d, f, e);
    }) : D(a, L(h, a, b, c, d, e), c, d, f, e);
  }
  function L(a, b, c, d, f, e) {
    a = "string" === typeof a ? b.schema.getType(a) : a;
    if (!(0, O.isObjectType)(a)) {
      throw new V.GraphQLError("Abstract type " + c.name + " must resolve to an Object type at " + ("runtime for field " + f.parentType.name + "." + f.fieldName + " with ") + ('value "' + String(e) + '", received "' + String(a) + '". ') + ("Either the " + c.name + ' type should provide a "resolveType" ') + 'function or each possible types should provide an "isTypeOf" function.', d);
    }
    if (!b.schema.isPossibleType(c, a)) {
      throw new V.GraphQLError('Runtime Object type "' + a.name + '" is not a possible type ' + ('for "' + c.name + '".'), d);
    }
    return a;
  }
  function D(a, b, c, d, f, e) {
    if (b.isTypeOf) {
      var h = b.isTypeOf(e, a.contextValue, d);
      if ((0, X.default)(h)) {
        return h.then(function(h) {
          if (!h) {
            throw S(b, e, c);
          }
          return R(a, b, c, d, f, e);
        });
      }
      if (!h) {
        throw S(b, e, c);
      }
    }
    return R(a, b, c, d, f, e);
  }
  function S(a, b, c) {
    return new V.GraphQLError('Expected value of type "' + a.name + '" but got: ' + String(b) + ".", c);
  }
  function R(a, b, c, d, f, e) {
    c = ea(a, b, c);
    return t(a, b, e, f, c);
  }
  function Q(a, b, c, d) {
    if (null !== a && "object" === ("undefined" === typeof a ? "undefined" : U(a)) && "string" === typeof a.__typename) {
      return a.__typename;
    }
    var f = c.schema.getPossibleTypes(d);
    d = [];
    for (var e = 0; e < f.length; e++) {
      var h = f[e];
      if (h.isTypeOf) {
        var g = h.isTypeOf(a, b, c);
        if ((0, X.default)(g)) {
          d[e] = g;
        } else {
          if (g) {
            return h;
          }
        }
      }
    }
    if (d.length) {
      return Promise.all(d).then(function(a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b]) {
            return f[b];
          }
        }
      });
    }
  }
  function T(a, b, c) {
    return c === P.SchemaMetaFieldDef.name && a.getQueryType() === b ? P.SchemaMetaFieldDef : c === P.TypeMetaFieldDef.name && a.getQueryType() === b ? P.TypeMetaFieldDef : c === P.TypeNameMetaFieldDef.name ? P.TypeNameMetaFieldDef : b.getFields()[c];
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.defaultFieldResolver = void 0;
  var U = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(a) {
    return typeof a;
  } : function(a) {
    return a && "function" === typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
  };
  a.execute = function(a, b, d, f, e, h, g) {
    return 1 === arguments.length ? c(a.schema, a.document, a.rootValue, a.contextValue, a.variableValues, a.operationName, a.fieldResolver) : c(a, b, d, f, e, h, g);
  };
  a.responsePathAsArray = l;
  a.addPath = f;
  a.assertValidExecutionArguments = h;
  a.buildExecutionContext = m;
  a.getOperationRootType = q;
  a.collectFields = y;
  a.buildResolveInfo = J;
  a.resolveFieldValueOrError = H;
  a.getFieldDef = T;
  var G = b("module$node_modules$iterall$index"), V = b("module$node_modules$graphql$error$index");
  e = b("module$node_modules$graphql$jsutils$invariant");
  var Z = g(e);
  e = b("module$node_modules$graphql$jsutils$isInvalid");
  var ha = g(e);
  e = b("module$node_modules$graphql$jsutils$isNullish");
  var ca = g(e);
  e = b("module$node_modules$graphql$jsutils$isPromise");
  var X = g(e);
  e = b("module$node_modules$graphql$jsutils$memoize3");
  e = g(e);
  r = b("module$node_modules$graphql$jsutils$promiseForObject");
  var da = g(r);
  r = b("module$node_modules$graphql$jsutils$promiseReduce");
  var E = g(r), aa = b("module$node_modules$graphql$utilities$typeFromAST"), N = b("module$node_modules$graphql$language$kinds"), W = b("module$node_modules$graphql$execution$values"), O = b("module$node_modules$graphql$type$definition");
  b("module$node_modules$graphql$type$schema");
  var P = b("module$node_modules$graphql$type$introspection"), Y = b("module$node_modules$graphql$type$directives"), ba = b("module$node_modules$graphql$type$validate"), ea = (0, e.default)(function(a, b, c) {
    for (var d = Object.create(null), f = Object.create(null), e = 0; e < c.length; e++) {
      var h = c[e].selectionSet;
      h && (d = y(a, b, h, d, f));
    }
    return d;
  }), fa = a.defaultFieldResolver = function(a, b, c, d) {
    if ("object" === ("undefined" === typeof a ? "undefined" : U(a)) || "function" === typeof a) {
      var f = a[d.fieldName];
      return "function" === typeof f ? a[d.fieldName](b, c, d) : f;
    }
  };
};

//# sourceMappingURL=module$node_modules$graphql$execution$execute.js.map
