{
"version":3,
"file":"module$node_modules$graphql$validation$rules$FragmentsOnCompositeTypes.js",
"lineCount":24,
"mappings":"AAAAA,cAAA,uEAAA,GAA2F,QAAQ,CAACC,CAAD,EAAQC,CAAR,EAAgBC,CAAhB,EAAwBC,CAAxB,EAA+BC,CAA/B,CAAwC;AAkB3IC,UAASA,EAAwC,CAACC,CAAD,CAAO;AACtD,WAAO,mDAAP,GAA6DC,MAAA,CAAOD,CAAP,CAA7D,GAA4E,IAA5E;AADsD;AAWxDE,UAASA,EAAkC,CAACC,CAAD,EAAWH,CAAX,CAAiB;AAC1D,WAAO,YAAP,GAAsBG,CAAtB,GAAiC,sCAAjC,IAA2E,QAA3E,GAAsFF,MAAA,CAAOD,CAAP,CAAtF,GAAqG,IAArG;AAD0D;AA1B5DI,QAAAC,eAAA,CAAsBP,CAAtB,EAA+B,YAA/B,EAA6C,CAC3CQ,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAR,GAAAC,yCAAA,GAAmDA,CAAnD;AACAD,GAAAI,mCAAA,GAA6CA,CAA7C;AACAJ,GAAAS,0BAAA,GAgCAA,QAAkC,CAACC,CAAD,CAAU;AAC1C,WAAO,CACLC,eAAgBA,QAAuB,CAACC,CAAD,CAAO;AAE5C,UADIC,CACJ,GADoBD,CAAAC,cACpB,CAAmB;AACjB,YAAIX,IAAO,CAAC,CAAA,EAAGY,CAAAC,YAAJ,EAA8BL,CAAAM,UAAA,EAA9B,EAAmDH,CAAnD,CAAX;AACIX,SAAJ,IAAY,CAAC,CAAC,CAAA,EAAGe,CAAAC,gBAAJ,EAAiChB,CAAjC,CAAb,IACEQ,CAAAS,YAAA,CAAoB,IAAIC,CAAAC,aAAJ,CAAwBpB,CAAA,CAAyC,CAAC,CAAA,EAAGqB,CAAAC,MAAJ,EAAoBV,CAApB,CAAzC,CAAxB,EAAsG,CAACA,CAAD,CAAtG,CAApB,CADF;AAFiB;AAFyB,KADzC,EAULW,mBAAoBA,QAA2B,CAACZ,CAAD,CAAO;AACpD,UAAIV,IAAO,CAAC,CAAA,EAAGY,CAAAC,YAAJ,EAA8BL,CAAAM,UAAA,EAA9B,EAAmDJ,CAAAC,cAAnD,CAAX;AACIX,OAAJ,IAAY,CAAC,CAAC,CAAA,EAAGe,CAAAC,gBAAJ,EAAiChB,CAAjC,CAAb,IACEQ,CAAAS,YAAA,CAAoB,IAAIC,CAAAC,aAAJ,CAAwBjB,CAAA,CAAmCQ,CAAAa,KAAAjB,MAAnC,EAAoD,CAAC,CAAA,EAAGc,CAAAC,MAAJ,EAAoBX,CAAAC,cAApB,CAApD,CAAxB,EAAsH,CAACD,CAAAC,cAAD,CAAtH,CAApB,CADF;AAFoD,KAVjD,CAAP;AAD0C,GAhC5C;AAEA,MAAIO,IAAStB,CAAA,CAAQ,yCAAR,CAAb,EAEIwB,IAAWxB,CAAA,CAAQ,8CAAR,CAFf,EAIImB,IAAcnB,CAAA,CAAQ,6CAAR,CAJlB,EAMIgB,IAAehB,CAAA,CAAQ,mDAAR,CANnB;AAV2I,CAA3I;;",
"sources":["node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$FragmentsOnCompositeTypes\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineFragmentOnNonCompositeErrorMessage = inlineFragmentOnNonCompositeErrorMessage;\nexports.fragmentOnNonCompositeErrorMessage = fragmentOnNonCompositeErrorMessage;\nexports.FragmentsOnCompositeTypes = FragmentsOnCompositeTypes;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction inlineFragmentOnNonCompositeErrorMessage(type) {\n  return 'Fragment cannot condition on non composite type \"' + String(type) + '\".';\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\nfunction fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return 'Fragment \"' + fragName + '\" cannot condition on non composite ' + ('type \"' + String(type) + '\".');\n}\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nfunction FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n      if (typeCondition) {\n        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);\n        if (type && !(0, _definition.isCompositeType)(type)) {\n          context.reportError(new _error.GraphQLError(inlineFragmentOnNonCompositeErrorMessage((0, _printer.print)(typeCondition)), [typeCondition]));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);\n      if (type && !(0, _definition.isCompositeType)(type)) {\n        context.reportError(new _error.GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, (0, _printer.print)(node.typeCondition)), [node.typeCondition]));\n      }\n    }\n  };\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","inlineFragmentOnNonCompositeErrorMessage","type","String","fragmentOnNonCompositeErrorMessage","fragName","Object","defineProperty","value","FragmentsOnCompositeTypes","context","InlineFragment","node","typeCondition","_typeFromAST","typeFromAST","getSchema","_definition","isCompositeType","reportError","_error","GraphQLError","_printer","print","FragmentDefinition","name"]
}
