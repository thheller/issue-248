{
"version":3,
"file":"module$node_modules$graphql$utilities$buildClientSchema.js",
"lineCount":157,
"mappings":"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",
"sources":["node_modules/graphql/utilities/buildClientSchema.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$buildClientSchema\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildClientSchema = buildClientSchema;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _keyValMap = require('../jsutils/keyValMap');\n\nvar _keyValMap2 = _interopRequireDefault(_keyValMap);\n\nvar _valueFromAST = require('./valueFromAST');\n\nvar _parser = require('../language/parser');\n\nvar _schema = require('../type/schema');\n\nvar _directiveLocation = require('../language/directiveLocation');\n\nvar _definition = require('../type/definition');\n\nvar _directives = require('../type/directives');\n\nvar _introspection = require('../type/introspection');\n\nvar _scalars = require('../type/scalars');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\nfunction buildClientSchema(introspection, options) {\n  // Get the schema from the introspection result.\n  var schemaIntrospection = introspection.__schema;\n\n  // Converts the list of types into a keyMap based on the type names.\n  var typeIntrospectionMap = (0, _keyMap2.default)(schemaIntrospection.types, function (type) {\n    return type.name;\n  });\n\n  // A cache to use to store the actual GraphQLType definition objects by name.\n  // Initialize to the GraphQL built in scalars. All functions below are inline\n  // so that this type def cache is within the scope of the closure.\n  var typeDefCache = (0, _keyMap2.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function (type) {\n    return type.name;\n  });\n\n  // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n  function getType(typeRef) {\n    if (typeRef.kind === _introspection.TypeKind.LIST) {\n      var itemRef = typeRef.ofType;\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n      return (0, _definition.GraphQLList)(getType(itemRef));\n    }\n    if (typeRef.kind === _introspection.TypeKind.NON_NULL) {\n      var nullableRef = typeRef.ofType;\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n      var nullableType = getType(nullableRef);\n      return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(nullableType));\n    }\n    if (!typeRef.name) {\n      throw new Error('Unknown type reference: ' + JSON.stringify(typeRef));\n    }\n    return getNamedType(typeRef.name);\n  }\n\n  function getNamedType(typeName) {\n    if (typeDefCache[typeName]) {\n      return typeDefCache[typeName];\n    }\n    var typeIntrospection = typeIntrospectionMap[typeName];\n    if (!typeIntrospection) {\n      throw new Error('Invalid or incomplete schema, unknown type: ' + typeName + '. Ensure ' + 'that a full introspection query is used in order to build a ' + 'client schema.');\n    }\n    var typeDef = buildType(typeIntrospection);\n    typeDefCache[typeName] = typeDef;\n    return typeDef;\n  }\n\n  function getInputType(typeRef) {\n    var type = getType(typeRef);\n    !(0, _definition.isInputType)(type) ? (0, _invariant2.default)(0, 'Introspection must provide input type for arguments.') : void 0;\n    return type;\n  }\n\n  function getOutputType(typeRef) {\n    var type = getType(typeRef);\n    !(0, _definition.isOutputType)(type) ? (0, _invariant2.default)(0, 'Introspection must provide output type for fields.') : void 0;\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    var type = getType(typeRef);\n    return (0, _definition.assertObjectType)(type);\n  }\n\n  function getInterfaceType(typeRef) {\n    var type = getType(typeRef);\n    return (0, _definition.assertInterfaceType)(type);\n  }\n\n  // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n  function buildType(type) {\n    if (type && type.name && type.kind) {\n      switch (type.kind) {\n        case _introspection.TypeKind.SCALAR:\n          return buildScalarDef(type);\n        case _introspection.TypeKind.OBJECT:\n          return buildObjectDef(type);\n        case _introspection.TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n        case _introspection.TypeKind.UNION:\n          return buildUnionDef(type);\n        case _introspection.TypeKind.ENUM:\n          return buildEnumDef(type);\n        case _introspection.TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n    throw new Error('Invalid or incomplete introspection result. Ensure that a full ' + 'introspection query is used in order to build a client schema:' + JSON.stringify(type));\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new _definition.GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      serialize: function serialize(value) {\n        return value;\n      }\n    });\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    if (!objectIntrospection.interfaces) {\n      throw new Error('Introspection result missing interfaces: ' + JSON.stringify(objectIntrospection));\n    }\n    return new _definition.GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: objectIntrospection.interfaces.map(getInterfaceType),\n      fields: function fields() {\n        return buildFieldDefMap(objectIntrospection);\n      }\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new _definition.GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      fields: function fields() {\n        return buildFieldDefMap(interfaceIntrospection);\n      }\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      throw new Error('Introspection result missing possibleTypes: ' + JSON.stringify(unionIntrospection));\n    }\n    return new _definition.GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: unionIntrospection.possibleTypes.map(getObjectType)\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      throw new Error('Introspection result missing enumValues: ' + JSON.stringify(enumIntrospection));\n    }\n    return new _definition.GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: (0, _keyValMap2.default)(enumIntrospection.enumValues, function (valueIntrospection) {\n        return valueIntrospection.name;\n      }, function (valueIntrospection) {\n        return {\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason\n        };\n      })\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      throw new Error('Introspection result missing inputFields: ' + JSON.stringify(inputObjectIntrospection));\n    }\n    return new _definition.GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: function fields() {\n        return buildInputValueDefMap(inputObjectIntrospection.inputFields);\n      }\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error('Introspection result missing fields: ' + JSON.stringify(typeIntrospection));\n    }\n    return (0, _keyValMap2.default)(typeIntrospection.fields, function (fieldIntrospection) {\n      return fieldIntrospection.name;\n    }, function (fieldIntrospection) {\n      if (!fieldIntrospection.args) {\n        throw new Error('Introspection result missing field args: ' + JSON.stringify(fieldIntrospection));\n      }\n      return {\n        description: fieldIntrospection.description,\n        deprecationReason: fieldIntrospection.deprecationReason,\n        type: getOutputType(fieldIntrospection.type),\n        args: buildInputValueDefMap(fieldIntrospection.args)\n      };\n    });\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return (0, _keyValMap2.default)(inputValueIntrospections, function (inputValue) {\n      return inputValue.name;\n    }, buildInputValue);\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    var type = getInputType(inputValueIntrospection.type);\n    var defaultValue = inputValueIntrospection.defaultValue ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;\n    return {\n      name: inputValueIntrospection.name,\n      description: inputValueIntrospection.description,\n      type: type,\n      defaultValue: defaultValue\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    // Support deprecated `on****` fields for building `locations`, as this\n    // is used by GraphiQL which may need to support outdated servers.\n    var locations = directiveIntrospection.locations ? directiveIntrospection.locations.slice() : [].concat(!directiveIntrospection.onField ? [] : [_directiveLocation.DirectiveLocation.FIELD], !directiveIntrospection.onOperation ? [] : [_directiveLocation.DirectiveLocation.QUERY, _directiveLocation.DirectiveLocation.MUTATION, _directiveLocation.DirectiveLocation.SUBSCRIPTION], !directiveIntrospection.onFragment ? [] : [_directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT]);\n    if (!directiveIntrospection.args) {\n      throw new Error('Introspection result missing directive args: ' + JSON.stringify(directiveIntrospection));\n    }\n    return new _directives.GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      locations: locations,\n      args: buildInputValueDefMap(directiveIntrospection.args)\n    });\n  }\n\n  // Iterate through all types, getting the type definition for each, ensuring\n  // that any type not directly referenced by a field will get created.\n  var types = schemaIntrospection.types.map(function (typeIntrospection) {\n    return getNamedType(typeIntrospection.name);\n  });\n\n  // Get the root Query, Mutation, and Subscription types.\n  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;\n\n  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;\n\n  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null;\n\n  // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];\n\n  // Then produce and return a Schema with these types.\n  return new _schema.GraphQLSchema({\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: types,\n    directives: directives,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  });\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n};"],
"names":["shadow$provide","global","process","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","buildClientSchema","introspection","options","getType","typeRef","kind","_introspection","TypeKind","LIST","itemRef","ofType","Error","_definition","GraphQLList","NON_NULL","nullableRef","nullableType","GraphQLNonNull","assertNullableType","name","JSON","stringify","getNamedType","typeName","typeDefCache","typeIntrospection","typeIntrospectionMap","typeDef","buildType","getObjectType","type","assertObjectType","getInterfaceType","assertInterfaceType","SCALAR","buildScalarDef","OBJECT","buildObjectDef","INTERFACE","buildInterfaceDef","UNION","possibleTypes","GraphQLUnionType","description","types","map","ENUM","buildEnumDef","INPUT_OBJECT","buildInputObjectDef","scalarIntrospection","GraphQLScalarType","serialize","objectIntrospection","interfaces","GraphQLObjectType","fields","buildFieldDefMap","interfaceIntrospection","GraphQLInterfaceType","enumIntrospection","enumValues","GraphQLEnumType","values","_keyValMap2","valueIntrospection","deprecationReason","inputObjectIntrospection","inputFields","GraphQLInputObjectType","buildInputValueDefMap","fieldIntrospection","args","isOutputType","_invariant2","inputValueIntrospections","inputValue","buildInputValue","inputValueIntrospection","isInputType","defaultValue","_valueFromAST","valueFromAST","_parser","parseValue","undefined","buildDirective","directiveIntrospection","locations","slice","concat","onField","_directiveLocation","DirectiveLocation","FIELD","onOperation","QUERY","MUTATION","SUBSCRIPTION","onFragment","FRAGMENT_DEFINITION","FRAGMENT_SPREAD","INLINE_FRAGMENT","_directives","GraphQLDirective","schemaIntrospection","__schema","_keyMap2","_scalars","specifiedScalarTypes","introspectionTypes","queryType","mutationType","subscriptionType","directives","_schema","GraphQLSchema","query","mutation","subscription","assumeValid","allowedLegacyNames","_invariant","_keyMap","_keyValMap"]
}
