shadow$provide.module$node_modules$graphql$validation$rules$KnownDirectives = function(e, r, b, u, a) {
  function g(a) {
    return 'Unknown directive "' + a + '".';
  }
  function c(a, b) {
    return 'Directive "' + a + '" may not be used on ' + b + ".";
  }
  function k(a) {
    var b = a[a.length - 1];
    if (!Array.isArray(b)) {
      switch(b.kind) {
        case h.Kind.OPERATION_DEFINITION:
          switch(b.operation) {
            case "query":
              return m.DirectiveLocation.QUERY;
            case "mutation":
              return m.DirectiveLocation.MUTATION;
            case "subscription":
              return m.DirectiveLocation.SUBSCRIPTION;
          }break;
        case h.Kind.FIELD:
          return m.DirectiveLocation.FIELD;
        case h.Kind.FRAGMENT_SPREAD:
          return m.DirectiveLocation.FRAGMENT_SPREAD;
        case h.Kind.INLINE_FRAGMENT:
          return m.DirectiveLocation.INLINE_FRAGMENT;
        case h.Kind.FRAGMENT_DEFINITION:
          return m.DirectiveLocation.FRAGMENT_DEFINITION;
        case h.Kind.SCHEMA_DEFINITION:
          return m.DirectiveLocation.SCHEMA;
        case h.Kind.SCALAR_TYPE_DEFINITION:
        case h.Kind.SCALAR_TYPE_EXTENSION:
          return m.DirectiveLocation.SCALAR;
        case h.Kind.OBJECT_TYPE_DEFINITION:
        case h.Kind.OBJECT_TYPE_EXTENSION:
          return m.DirectiveLocation.OBJECT;
        case h.Kind.FIELD_DEFINITION:
          return m.DirectiveLocation.FIELD_DEFINITION;
        case h.Kind.INTERFACE_TYPE_DEFINITION:
        case h.Kind.INTERFACE_TYPE_EXTENSION:
          return m.DirectiveLocation.INTERFACE;
        case h.Kind.UNION_TYPE_DEFINITION:
        case h.Kind.UNION_TYPE_EXTENSION:
          return m.DirectiveLocation.UNION;
        case h.Kind.ENUM_TYPE_DEFINITION:
        case h.Kind.ENUM_TYPE_EXTENSION:
          return m.DirectiveLocation.ENUM;
        case h.Kind.ENUM_VALUE_DEFINITION:
          return m.DirectiveLocation.ENUM_VALUE;
        case h.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        case h.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          return m.DirectiveLocation.INPUT_OBJECT;
        case h.Kind.INPUT_VALUE_DEFINITION:
          return a[a.length - 3].kind === h.Kind.INPUT_OBJECT_TYPE_DEFINITION ? m.DirectiveLocation.INPUT_FIELD_DEFINITION : m.DirectiveLocation.ARGUMENT_DEFINITION;
      }
    }
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.unknownDirectiveMessage = g;
  a.misplacedDirectiveMessage = c;
  a.KnownDirectives = function(a) {
    return {Directive:function(b, d, h, e, m) {
      (d = (0, f.default)(a.getSchema().getDirectives(), function(a) {
        return a.name === b.name.value;
      })) ? (m = k(m)) && -1 === d.locations.indexOf(m) && a.reportError(new l.GraphQLError(c(b.name.value, m), [b])) : a.reportError(new l.GraphQLError(g(b.name.value), [b]));
    }};
  };
  var l = b("module$node_modules$graphql$error$index"), f = (e = b("module$node_modules$graphql$jsutils$find")) && e.__esModule ? e : {default:e}, h = b("module$node_modules$graphql$language$kinds"), m = b("module$node_modules$graphql$language$directiveLocation");
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$KnownDirectives.js.map
