{
"version":3,
"file":"module$node_modules$graphql$language$blockStringValue.js",
"lineCount":34,
"mappings":"AAAAA,cAAA,sDAAA,GAA0E,QAAQ,CAACC,CAAD,EAAQC,CAAR,EAAgBC,CAAhB,EAAwBC,CAAxB,EAA+BC,CAA/B,CAAwC;AAyD1HC,UAASA,EAAiB,CAACC,CAAD,CAAM;AAE9B,SADA,IAAIC,IAAI,CACR,EAAOA,CAAP,GAAWD,CAAAE,OAAX,KAAqC,GAArC,KAA0BF,CAAA,CAAIC,CAAJ,CAA1B,IAAuD,IAAvD,KAA4CD,CAAA,CAAIC,CAAJ,CAA5C,EAAA;AACEA,OAAA,EAAA;AADF;AAGA,WAAOA,CAAP;AAL8B;AAQhCE,UAASA,EAAO,CAACH,CAAD,CAAM;AACpB,WAAOD,CAAA,CAAkBC,CAAlB,CAAP,KAAkCA,CAAAE,OAAlC;AADoB;AA9DtBE,QAAAC,eAAA,CAAsBP,CAAtB,EAA+B,YAA/B,EAA6C,CAC3CQ,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAR,GAAAS,QAAA,GAgBAC,QAAyB,CAACC,CAAD,CAAY;AAE/BC,KAAAA,GAAQD,CAAAE,MAAA,CAAgB,cAAhB,CAARD;AAIJ,SADA,IAAIE,IAAe,IAAnB,EACSX,IAAI,CAAb,EAAgBA,CAAhB,GAAoBS,CAAAR,OAApB,EAAkCD,CAAA,EAAlC,CAAuC;AACrC,UAAIY,IAAOH,CAAA,CAAMT,CAAN,CAAX,EACIa,IAASf,CAAA,CAAkBc,CAAlB,CADb;AAEA,UAAIC,CAAJ,GAAaD,CAAAX,OAAb,KAA8C,IAA9C,KAA6BU,CAA7B,IAAsDE,CAAtD,GAA+DF,CAA/D,MACEA,CACI,GADWE,CACX,EAAiB,CAAjB,KAAAF,CAFN;AAGI;AAHJ;AAHqC;AAWvC,QAAIA,CAAJ;AACE,WAASG,CAAT,GAAc,CAAd,EAAiBA,CAAjB,GAAsBL,CAAAR,OAAtB,EAAoCa,CAAA,EAApC;AACEL,SAAA,CAAMK,CAAN,CAAA,GAAYL,CAAA,CAAMK,CAAN,CAAAC,MAAA,CAAgBJ,CAAhB,CAAZ;AADF;AADF;AAOA,SAAA,EAAsB,CAAtB,GAAOF,CAAAR,OAAP,IAA2BC,CAAA,CAAQO,CAAA,CAAM,CAAN,CAAR,CAA3B,CAAA;AACEA,OAAAO,MAAA,EAAA;AADF;AAGA,SAAA,EAAsB,CAAtB,GAAOP,CAAAR,OAAP,IAA2BC,CAAA,CAAQO,CAAA,CAAMA,CAAAR,OAAN,GAAqB,CAArB,CAAR,CAA3B,CAAA;AACEQ,OAAAQ,IAAA,EAAA;AADF;AAKA,WAAOR,CAAAS,KAAA,CAAW,IAAX,CAAP;AAhCmC,GAhBrC;AAN0H,CAA1H;;",
"sources":["node_modules/graphql/language/blockStringValue.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$language$blockStringValue\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = blockStringValue;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * Coffeescript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nfunction blockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g);\n\n  // Remove common indentation from all lines but first.\n  var commonIndent = null;\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  }\n\n  // Remove leading and trailing blank lines.\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  }\n\n  // Return a string of the lines joined with U+000A.\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","leadingWhitespace","str","i","length","isBlank","Object","defineProperty","value","default","blockStringValue","rawString","lines","split","commonIndent","line","indent","_i","slice","shift","pop","join"]
}
