{
"version":3,
"file":"module$node_modules$graphql$validation$rules$ValuesOfCorrectType.js",
"lineCount":92,
"mappings":"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",
"sources":["node_modules/graphql/validation/rules/ValuesOfCorrectType.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$ValuesOfCorrectType\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.badValueMessage = badValueMessage;\nexports.requiredFieldMessage = requiredFieldMessage;\nexports.unknownFieldMessage = unknownFieldMessage;\nexports.ValuesOfCorrectType = ValuesOfCorrectType;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _isInvalid = require('../../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _keyMap = require('../../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _orList = require('../../jsutils/orList');\n\nvar _orList2 = _interopRequireDefault(_orList);\n\nvar _suggestionList = require('../../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction badValueMessage(typeName, valueName, message) {\n  return 'Expected type ' + typeName + ', found ' + valueName + (message ? '; ' + message : '.');\n}\n\nfunction requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return 'Field ' + typeName + '.' + fieldName + ' of required type ' + (fieldTypeName + ' was not provided.');\n}\n\nfunction unknownFieldMessage(typeName, fieldName, message) {\n  return 'Field \"' + fieldName + '\" is not defined by type ' + typeName + (message ? '; ' + message : '.');\n}\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\nfunction ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n      if ((0, _definition.isNonNullType)(type)) {\n        context.reportError(new _error.GraphQLError(badValueMessage(String(type), (0, _printer.print)(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = (0, _definition.getNullableType)(context.getParentInputType());\n      if (!(0, _definition.isListType)(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = (0, _definition.getNamedType)(context.getInputType());\n      if (!(0, _definition.isInputObjectType)(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n      // Ensure every required field exists.\n      var inputFields = type.getFields();\n      var fieldNodeMap = (0, _keyMap2.default)(node.fields, function (field) {\n        return field.name.value;\n      });\n      Object.keys(inputFields).forEach(function (fieldName) {\n        var fieldType = inputFields[fieldName].type;\n        var fieldNode = fieldNodeMap[fieldName];\n        if (!fieldNode && (0, _definition.isNonNullType)(fieldType)) {\n          context.reportError(new _error.GraphQLError(requiredFieldMessage(type.name, fieldName, String(fieldType)), node));\n        }\n      });\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = (0, _definition.getNamedType)(context.getParentInputType());\n      var fieldType = context.getInputType();\n      if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {\n        var suggestions = (0, _suggestionList2.default)(node.name.value, Object.keys(parentType.getFields()));\n        var didYouMean = suggestions.length !== 0 ? 'Did you mean ' + (0, _orList2.default)(suggestions) + '?' : undefined;\n        context.reportError(new _error.GraphQLError(unknownFieldMessage(parentType.name, node.name.value, didYouMean), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = (0, _definition.getNamedType)(context.getInputType());\n      if (!(0, _definition.isEnumType)(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new _error.GraphQLError(badValueMessage(type.name, (0, _printer.print)(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n  if (!locationType) {\n    return;\n  }\n\n  var type = (0, _definition.getNamedType)(locationType);\n\n  if (!(0, _definition.isScalarType)(type)) {\n    context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node), enumTypeSuggestion(type, node)), node));\n    return;\n  }\n\n  // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n  try {\n    var parseResult = type.parseLiteral(node, undefined /* variables */);\n    if ((0, _isInvalid2.default)(parseResult)) {\n      context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  if ((0, _definition.isEnumType)(type)) {\n    var suggestions = (0, _suggestionList2.default)((0, _printer.print)(node), type.getValues().map(function (value) {\n      return value.name;\n    }));\n    if (suggestions.length !== 0) {\n      return 'Did you mean the enum value ' + (0, _orList2.default)(suggestions) + '?';\n    }\n  }\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","_interopRequireDefault","obj","__esModule","default","badValueMessage","typeName","valueName","message","requiredFieldMessage","fieldName","fieldTypeName","unknownFieldMessage","isValidScalar","context","node","locationType","getInputType","type","_definition","getNamedType","isScalarType","parseResult","parseLiteral","undefined","_isInvalid2","reportError","_error","GraphQLError","String","_printer","print","error","enumTypeSuggestion","isEnumType","suggestions","_suggestionList2","getValues","map","value","name","length","_orList2","Object","defineProperty","ValuesOfCorrectType","NullValue","isNonNullType","ListValue","getNullableType","getParentInputType","isListType","ObjectValue","isInputObjectType","inputFields","getFields","fieldNodeMap","_keyMap2","fields","field","keys","forEach","fieldType","fieldNode","ObjectField","parentType","didYouMean","EnumValue","getValue","IntValue","FloatValue","StringValue","BooleanValue","_isInvalid","_keyMap","_orList","_suggestionList"]
}
