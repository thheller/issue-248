shadow$provide.module$node_modules$graphql$utilities$buildClientSchema = function(e, r, b, u, a) {
  function g(a) {
    return a && a.__esModule ? a : {default:a};
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.buildClientSchema = function(a, b) {
    function e(a) {
      if (a.kind === t.TypeKind.LIST) {
        a = a.ofType;
        if (!a) {
          throw Error("Decorated type deeper than introspection query.");
        }
        return (0, q.GraphQLList)(e(a));
      }
      if (a.kind === t.TypeKind.NON_NULL) {
        a = a.ofType;
        if (!a) {
          throw Error("Decorated type deeper than introspection query.");
        }
        a = e(a);
        return (0, q.GraphQLNonNull)((0, q.assertNullableType)(a));
      }
      if (!a.name) {
        throw Error("Unknown type reference: " + JSON.stringify(a));
      }
      return g(a.name);
    }
    function g(a) {
      if (U[a]) {
        return U[a];
      }
      var b = T[a];
      if (!b) {
        throw Error("Invalid or incomplete schema, unknown type: " + a + ". Ensure that a full introspection query is used in order to build a client schema.");
      }
      b = u(b);
      return U[a] = b;
    }
    function n(a) {
      a = e(a);
      return (0, q.assertObjectType)(a);
    }
    function p(a) {
      a = e(a);
      return (0, q.assertInterfaceType)(a);
    }
    function u(a) {
      if (a && a.name && a.kind) {
        switch(a.kind) {
          case t.TypeKind.SCALAR:
            return r(a);
          case t.TypeKind.OBJECT:
            return x(a);
          case t.TypeKind.INTERFACE:
            return v(a);
          case t.TypeKind.UNION:
            if (!a.possibleTypes) {
              throw Error("Introspection result missing possibleTypes: " + JSON.stringify(a));
            }
            return new q.GraphQLUnionType({name:a.name, description:a.description, types:a.possibleTypes.map(n)});
          case t.TypeKind.ENUM:
            return I(a);
          case t.TypeKind.INPUT_OBJECT:
            return w(a);
        }
      }
      throw Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema:" + JSON.stringify(a));
    }
    function r(a) {
      return new q.GraphQLScalarType({name:a.name, description:a.description, serialize:function(a) {
        return a;
      }});
    }
    function x(a) {
      if (!a.interfaces) {
        throw Error("Introspection result missing interfaces: " + JSON.stringify(a));
      }
      return new q.GraphQLObjectType({name:a.name, description:a.description, interfaces:a.interfaces.map(p), fields:function() {
        return L(a);
      }});
    }
    function v(a) {
      return new q.GraphQLInterfaceType({name:a.name, description:a.description, fields:function() {
        return L(a);
      }});
    }
    function I(a) {
      if (!a.enumValues) {
        throw Error("Introspection result missing enumValues: " + JSON.stringify(a));
      }
      return new q.GraphQLEnumType({name:a.name, description:a.description, values:(0, l.default)(a.enumValues, function(a) {
        return a.name;
      }, function(a) {
        return {description:a.description, deprecationReason:a.deprecationReason};
      })});
    }
    function w(a) {
      if (!a.inputFields) {
        throw Error("Introspection result missing inputFields: " + JSON.stringify(a));
      }
      return new q.GraphQLInputObjectType({name:a.name, description:a.description, fields:function() {
        return D(a.inputFields);
      }});
    }
    function L(a) {
      if (!a.fields) {
        throw Error("Introspection result missing fields: " + JSON.stringify(a));
      }
      return (0, l.default)(a.fields, function(a) {
        return a.name;
      }, function(a) {
        if (!a.args) {
          throw Error("Introspection result missing field args: " + JSON.stringify(a));
        }
        var b = a.description, d = a.deprecationReason, f = e(a.type);
        (0, q.isOutputType)(f) ? void 0 : (0, c.default)(0, "Introspection must provide output type for fields.");
        return {description:b, deprecationReason:d, type:f, args:D(a.args)};
      });
    }
    function D(a) {
      return (0, l.default)(a, function(a) {
        return a.name;
      }, S);
    }
    function S(a) {
      var b = e(a.type);
      (0, q.isInputType)(b) ? void 0 : (0, c.default)(0, "Introspection must provide input type for arguments.");
      var d = a.defaultValue ? (0, f.valueFromAST)((0, h.parseValue)(a.defaultValue), b) : void 0;
      return {name:a.name, description:a.description, type:b, defaultValue:d};
    }
    function R(a) {
      var b = a.locations ? a.locations.slice() : [].concat(a.onField ? [d.DirectiveLocation.FIELD] : [], a.onOperation ? [d.DirectiveLocation.QUERY, d.DirectiveLocation.MUTATION, d.DirectiveLocation.SUBSCRIPTION] : [], a.onFragment ? [d.DirectiveLocation.FRAGMENT_DEFINITION, d.DirectiveLocation.FRAGMENT_SPREAD, d.DirectiveLocation.INLINE_FRAGMENT] : []);
      if (!a.args) {
        throw Error("Introspection result missing directive args: " + JSON.stringify(a));
      }
      return new z.GraphQLDirective({name:a.name, description:a.description, locations:b, args:D(a.args)});
    }
    var Q = a.__schema, T = (0, k.default)(Q.types, function(a) {
      return a.name;
    }), U = (0, k.default)(y.specifiedScalarTypes.concat(t.introspectionTypes), function(a) {
      return a.name;
    });
    a = Q.types.map(function(a) {
      return g(a.name);
    });
    var G = Q.queryType ? n(Q.queryType) : null, V = Q.mutationType ? n(Q.mutationType) : null, Z = Q.subscriptionType ? n(Q.subscriptionType) : null;
    Q = Q.directives ? Q.directives.map(R) : [];
    return new m.GraphQLSchema({query:G, mutation:V, subscription:Z, types:a, directives:Q, assumeValid:b && b.assumeValid, allowedLegacyNames:b && b.allowedLegacyNames});
  };
  e = b("module$node_modules$graphql$jsutils$invariant");
  var c = g(e);
  e = b("module$node_modules$graphql$jsutils$keyMap");
  var k = g(e);
  e = b("module$node_modules$graphql$jsutils$keyValMap");
  var l = g(e), f = b("module$node_modules$graphql$utilities$valueFromAST"), h = b("module$node_modules$graphql$language$parser"), m = b("module$node_modules$graphql$type$schema"), d = b("module$node_modules$graphql$language$directiveLocation"), q = b("module$node_modules$graphql$type$definition"), z = b("module$node_modules$graphql$type$directives"), t = b("module$node_modules$graphql$type$introspection"), y = b("module$node_modules$graphql$type$scalars");
};

//# sourceMappingURL=module$node_modules$graphql$utilities$buildClientSchema.js.map
