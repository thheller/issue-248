{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueOperationNames.js",
"lineCount":18,
"mappings":"AAAAA,cAAA,kEAAA,GAAsF,QAAQ,CAACC,CAAD,EAAQC,CAAR,EAAgBC,CAAhB,EAAwBC,CAAxB,EAA+BC,CAA/B,CAAwC;AAoBtIC,UAASA,EAA6B,CAACC,CAAD,CAAgB;AACpD,WAAO,yCAAP,GAAmDA,CAAnD,GAAmE,IAAnE;AADoD;AAjBtDC,QAAAC,eAAA,CAAsBJ,CAAtB,EAA+B,YAA/B,EAA6C,CAC3CK,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAL,GAAAC,8BAAA,GAAwCA,CAAxC;AACAD,GAAAM,qBAAA,GAsBAA,QAA6B,CAACC,CAAD,CAAU;AACrC,QAAIC,IAAsBL,MAAAM,OAAA,CAAc,IAAd,CAA1B;AACA,WAAO,CACLC,oBAAqBA,QAA4B,CAACC,CAAD,CAAO;AAEtD,OADIT,CACJ,GADoBS,CAAAC,KACpB,MACMJ,CAAA,CAAoBN,CAAAG,MAApB,CAAJ,GACEE,CAAAM,YAAA,CAAoB,IAAIC,CAAAC,aAAJ,CAAwBd,CAAA,CAA8BC,CAAAG,MAA9B,CAAxB,EAA4E,CAACG,CAAA,CAAoBN,CAAAG,MAApB,CAAD,EAA2CH,CAA3C,CAA5E,CAApB,CADF,GAGEM,CAAA,CAAoBN,CAAAG,MAApB,CAHF,GAG6CH,CAJ/C;AAOA,aAAO,CAAA,CAAP;AATsD,KADnD,EAaLc,mBAAoBA,QAA2B,EAAG;AAChD,aAAO,CAAA,CAAP;AADgD,KAb7C,CAAP;AAFqC,GAtBvC;AAEA,MAAIF,IAAShB,CAAA,CAAQ,yCAAR,CAAb;AATsI,CAAtI;;",
"sources":["node_modules/graphql/validation/rules/UniqueOperationNames.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueOperationNames\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateOperationNameMessage = duplicateOperationNameMessage;\nexports.UniqueOperationNames = UniqueOperationNames;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction duplicateOperationNameMessage(operationName) {\n  return 'There can be only one operation named \"' + operationName + '\".';\n}\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n */\nfunction UniqueOperationNames(context) {\n  var knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      var operationName = node.name;\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new _error.GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n      return false;\n    },\n\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","duplicateOperationNameMessage","operationName","Object","defineProperty","value","UniqueOperationNames","context","knownOperationNames","create","OperationDefinition","node","name","reportError","_error","GraphQLError","FragmentDefinition"]
}
