{
"version":3,
"file":"module$node_modules$graphql$jsutils$suggestionList.js",
"lineCount":38,
"mappings":"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",
"sources":["node_modules/graphql/jsutils/suggestionList.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$jsutils$suggestionList\"] = function(global,process,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = suggestionList;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nfunction suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var oLength = options.length;\n  var inputThreshold = input.length / 2;\n  for (var i = 0; i < oLength; i++) {\n    var distance = lexicalDistance(input, options[i]);\n    var threshold = Math.max(inputThreshold, options[i].length / 2, 1);\n    if (distance <= threshold) {\n      optionsByDistance[options[i]] = distance;\n    }\n  }\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n\n  var i = void 0;\n  var j = void 0;\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length;\n\n  // Any case change counts as a single edit\n  if (a === b) {\n    return 1;\n  }\n\n  for (i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (i = 1; i <= aLength; i++) {\n    for (j = 1; j <= bLength; j++) {\n      var cost = a[i - 1] === b[j - 1] ? 0 : 1;\n\n      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","lexicalDistance","aStr","bStr","j","d","a","toLowerCase","b","aLength","length","bLength","i","cost","Math","min","Object","defineProperty","value","default","suggestionList","input","options","optionsByDistance","create","oLength","inputThreshold","distance","max","threshold","keys","sort"]
}
