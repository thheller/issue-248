{
"version":3,
"file":"module$node_modules$graphql$utilities$findBreakingChanges.js",
"lineCount":302,
"mappings":"AAAAA,cAAA,0DAAA,GAA8E,QAAQ,CAACC,CAAD,EAAQC,CAAR,EAAgBC,CAAhB,EAAwBC,CAAxB,EAA+BC,CAA/B,CAAwC;AA8F9HC,UAASA,EAAgB,CAACC,CAAD,EAAYC,CAAZ,CAAuB;AAC1CC,KAAAA,GAAaF,CAAAG,WAAA,EAAbD;AACJ,QAAIE,IAAaH,CAAAE,WAAA,EAAjB,EAEIE,IAAkB,EAFtB;AAGAC,UAAAC,KAAA,CAAYL,CAAZ,CAAAM,QAAA,CAAgC,QAAS,CAACC,CAAD,CAAW;AAC7CL,OAAA,CAAWK,CAAX,CAAL,IACEJ,CAAAK,KAAA,CAAqB,CACnBC,KAAMC,CAAAC,aADa,EAEnBC,YAAaL,CAAbK,GAAwB,eAFL,CAArB,CADF;AADkD,KAApD,CAAA;AAQA,WAAOT,CAAP;AAb8C;AAoBhDU,UAASA,EAAwB,CAACf,CAAD,EAAYC,CAAZ,CAAuB;AACtD,QAAIC,IAAaF,CAAAG,WAAA,EAAjB,EACIC,IAAaH,CAAAE,WAAA,EADjB,EAGIE,IAAkB,EAHtB;AAIAC,UAAAC,KAAA,CAAYL,CAAZ,CAAAM,QAAA,CAAgC,QAAS,CAACC,CAAD,CAAW;AAClD,UAAKL,CAAA,CAAWK,CAAX,CAAL,CAAA;AAGA,YAAIO,IAAUd,CAAA,CAAWO,CAAX,CAAd,EACIQ,IAAUb,CAAA,CAAWK,CAAX,CADd;AAEIO,SAAAE,YAAJ,KAA4BD,CAAAC,YAA5B,IACEb,CAAAK,KAAA,CAAqB,CACnBC,KAAMC,CAAAO,kBADa,EAEnBL,YAAaL,CAAbK,GAAwB,gBAAxBA,IAA4CM,CAAA,CAAaJ,CAAb,CAA5CF,GAAoE,MAApEA,GAA6EM,CAAA,CAAaH,CAAb,CAA7EH,GAAqG,GAArGA,CAFmB,CAArB,CADF;AALA;AADkD,KAApD,CAAA;AAaA,WAAOT,CAAP;AAlBsD;AA2BxDgB,UAASA,EAAc,CAACrB,CAAD,EAAYC,CAAZ,CAAuB;AAC5C,QAAIC,IAAaF,CAAAG,WAAA,EAAjB,EACIC,IAAaH,CAAAE,WAAA,EADjB,EAGIE,IAAkB,EAHtB,EAIIiB,IAAmB,EAJvB;AAMAhB,UAAAC,KAAA,CAAYL,CAAZ,CAAAM,QAAA,CAAgC,QAAS,CAACC,CAAD,CAAW;AAClD,UAAIO,IAAUd,CAAA,CAAWO,CAAX,CAAd,EACIQ,IAAUb,CAAA,CAAWK,CAAX,CADd;AAEA,WAAM,CAAC,CAAA,EAAGc,CAAAC,aAAJ,EAA8BR,CAA9B,CAAN,IAAgD,CAAC,CAAA,EAAGO,CAAAE,gBAAJ,EAAiCT,CAAjC,CAAhD,MAAgG,CAAC,CAAA,EAAGO,CAAAC,aAAJ,EAA8BP,CAA9B,CAAhG,IAA0I,CAAC,CAAA,EAAGM,CAAAE,gBAAJ,EAAiCR,CAAjC,CAA1I,KAAwLA,CAAAC,YAAxL,KAAgNF,CAAAE,YAAhN,CAAA;AAIA,YAAIQ,IAAgBV,CAAAW,UAAA,EAApB,EACIC,IAAgBX,CAAAU,UAAA,EADpB;AAGArB,cAAAC,KAAA,CAAYmB,CAAZ,CAAAlB,QAAA,CAAmC,QAAS,CAACqB,CAAD,CAAY;AACjDD,WAAA,CAAcC,CAAd,CAAL,KAIAH,CAAA,CAAcG,CAAd,CAAAC,KAAAtB,QAAA,CAAsC,QAAS,CAACuB,CAAD,CAAY;AAEzD,gBAAIC,IADUJ,CAAA,CAAcC,CAAd,CAAAC,KACEG,KAAA,CAAa,QAAS,CAACC,CAAD,CAAM;AAC1C,qBAAOA,CAAAC,KAAP,KAAoBJ,CAAAI,KAApB;AAD0C,aAA5B,CAAhB;AAKKH,aAAL,GAMeI,CAAAC,CAA0CN,CAAApB,KAA1C0B,EAA0DL,CAAArB,KAA1D0B,CACb,GAKsCC,IAAAA,EALtC,KAKWP,CAAAQ,aALX,IAKmDR,CAAAQ,aALnD,KAK8EP,CAAAO,aAL9E,IAMEjB,CAAAZ,KAAA,CAAsB,CACpBC,KAAM6B,CAAAC,yBADc,EAEpB3B,YAAaE,CAAAmB,KAAbrB,GAA4B,GAA5BA,GAAkCe,CAAlCf,GAA8C,OAA9CA,IAAyDiB,CAAAI,KAAzDrB,GAA0E,2BAA1EA,CAFoB,CAAtB,CANF,GACET,CAAAK,KAAA,CAAqB,CACnBC,KAAMC,CAAA8B,iBADa,EAEnB5B,YAAaE,CAAAmB,KAAbrB,GAA4B,GAA5BA,GAAkCe,CAAlCf,GAA8C,OAA9CA,IAAyDiB,CAAAI,KAAzDrB,GAA0E,yBAA1EA,KAAwGiB,CAAApB,KAAAgC,SAAA,EAAxG7B,GAAoI,MAApIA,GAA6IkB,CAAArB,KAAAgC,SAAA,EAA7I7B,CAFmB,CAArB,CARJ,GACET,CAAAK,KAAA,CAAqB,CACnBC,KAAMC,CAAAgC,YADa,EAEnB9B,YAAaE,CAAAmB,KAAbrB,GAA4B,GAA5BA,GAAkCe,CAAlCf,GAA8C,OAA9CA,IAAyDiB,CAAAI,KAAzDrB,GAA0E,cAA1EA,CAFmB,CAArB,CADF;AAPyD,WAA3D,CA4BA,EAAAc,CAAA,CAAcC,CAAd,CAAAC,KAAAtB,QAAA,CAAsC,QAAS,CAACwB,CAAD,CAAY;AAC3CN,aAAA,CAAcG,CAAd,CAAAC,KACEG,KAAAF,CAAa,QAAS,CAACG,CAAD,CAAM;AAC1C,qBAAOA,CAAAC,KAAP,KAAoBH,CAAAG,KAApB;AAD0C,aAA5BJ,CAGhB,KACM,CAAC,CAAA,EAAGR,CAAAsB,cAAJ,EAA+Bb,CAAArB,KAA/B,CAAJ,GACEN,CAAAK,KAAA,CAAqB,CACnBC,KAAMC,CAAAkC,mBADa,EAEnBhC,YAAa,iBAAbA,GAAiCkB,CAAAG,KAAjCrB,GAAkD,MAAlDA,IAA4DG,CAAAkB,KAA5DrB,GAA2E,GAA3EA,GAAiFe,CAAjFf,GAA6F,YAA7FA,CAFmB,CAArB,CADF,GAMEQ,CAAAZ,KAAA,CAAsB,CACpBC,KAAM6B,CAAAO,mBADc,EAEpBjC,YAAa,iBAAbA,GAAiCkB,CAAAG,KAAjCrB,GAAkD,MAAlDA,IAA4DG,CAAAkB,KAA5DrB,GAA2E,GAA3EA,GAAiFe,CAAjFf,GAA6F,YAA7FA,CAFoB,CAAtB,CAPJ;AALyD,WAA3D,CAhCA;AADsD,SAAxD,CAAA;AAPA;AAHkD,KAApD,CAAA;AAiEA,WAAO,CACLT,gBAAiBA,CADZ,EAELiB,iBAAkBA,CAFb,CAAP;AAxE4C;AA8E9CF,UAASA,EAAY,CAACT,CAAD,CAAO;AAC1B,QAAI,CAAC,CAAA,EAAGY,CAAAyB,aAAJ,EAA8BrC,CAA9B,CAAJ;AACE,aAAO,eAAP;AADF;AAGA,QAAI,CAAC,CAAA,EAAGY,CAAAC,aAAJ,EAA8Bb,CAA9B,CAAJ;AACE,aAAO,gBAAP;AADF;AAGA,QAAI,CAAC,CAAA,EAAGY,CAAAE,gBAAJ,EAAiCd,CAAjC,CAAJ;AACE,aAAO,mBAAP;AADF;AAGA,QAAI,CAAC,CAAA,EAAGY,CAAA0B,YAAJ,EAA6BtC,CAA7B,CAAJ;AACE,aAAO,cAAP;AADF;AAGA,QAAI,CAAC,CAAA,EAAGY,CAAA2B,WAAJ,EAA4BvC,CAA5B,CAAJ;AACE,aAAO,cAAP;AADF;AAGA,QAAI,CAAC,CAAA,EAAGY,CAAA4B,kBAAJ,EAAmCxC,CAAnC,CAAJ;AACE,aAAO,eAAP;AADF;AAGA,UAAM,IAAIyC,SAAJ,CAAc,eAAd,GAAgCzC,CAAAO,YAAAiB,KAAhC,CAAN;AAnB0B;AAsB5BkB,UAASA,EAAiD,CAACrD,CAAD,EAAYC,CAAZ,CAAuB;AAC/E,QAAIC,IAAaF,CAAAG,WAAA,EAAjB,EACIC,IAAaH,CAAAE,WAAA,EADjB,EAGIE,IAAkB,EAHtB;AAIAC,UAAAC,KAAA,CAAYL,CAAZ,CAAAM,QAAA,CAAgC,QAAS,CAACC,CAAD,CAAW;AAClD,UAAIO,IAAUd,CAAA,CAAWO,CAAX,CAAd,EACIQ,IAAUb,CAAA,CAAWK,CAAX,CADd;AAEA,WAAM,CAAC,CAAA,EAAGc,CAAAC,aAAJ,EAA8BR,CAA9B,CAAN,IAAgD,CAAC,CAAA,EAAGO,CAAAE,gBAAJ,EAAiCT,CAAjC,CAAhD,MAAgG,CAAC,CAAA,EAAGO,CAAAC,aAAJ,EAA8BP,CAA9B,CAAhG,IAA0I,CAAC,CAAA,EAAGM,CAAAE,gBAAJ,EAAiCR,CAAjC,CAA1I,KAAwLA,CAAAC,YAAxL,KAAgNF,CAAAE,YAAhN,CAAA;AAIA,YAAIoC,IAAmBtC,CAAAW,UAAA,EAAvB,EACI4B,IAAmBtC,CAAAU,UAAA,EADvB;AAEArB,cAAAC,KAAA,CAAY+C,CAAZ,CAAA9C,QAAA,CAAsC,QAAS,CAACqB,CAAD,CAAY;AAEzD,cAAMA,CAAN,IAAmB0B,CAAnB,CAKO;AACL,gBAAIC,IAAeF,CAAA,CAAiBzB,CAAjB,CAAAlB,KAAnB,EACI8C,IAAeF,CAAA,CAAiB1B,CAAjB,CAAAlB,KADnB;AAEa+C,aAAArB,CAAsCmB,CAAtCnB,EAAoDoB,CAApDpB,CACb,KACMsB,CAEJ,GAFyB,CAAC,CAAA,EAAGpC,CAAAqC,YAAJ,EAA6BJ,CAA7B,CAAA,GAA6CA,CAAArB,KAA7C,GAAiEqB,CAAAb,SAAA,EAE1F,EADIkB,CACJ,GADyB,CAAC,CAAA,EAAGtC,CAAAqC,YAAJ,EAA6BH,CAA7B,CAAA,GAA6CA,CAAAtB,KAA7C,GAAiEsB,CAAAd,SAAA,EAC1F,EAAAtC,CAAAK,KAAA,CAAqB,CACnBC,KAAMC,CAAAkD,mBADa,EAEnBhD,YAAaL,CAAbK,GAAwB,GAAxBA,GAA8Be,CAA9Bf,GAA0C,qBAA1CA,IAAmE6C,CAAnE7C,GAAwF,MAAxFA,GAAiG+C,CAAjG/C,GAAsH,GAAtHA,CAFmB,CAArB,CAHF;AAJK,WALP;AACET,aAAAK,KAAA,CAAqB,CACnBC,KAAMC,CAAAmD,cADa,EAEnBjD,YAAaL,CAAbK,GAAwB,GAAxBA,GAA8Be,CAA9Bf,GAA0C,eAFvB,CAArB,CAAA;AADF;AAFyD,SAA3D,CAAA;AANA;AAHkD,KAApD,CAAA;AA+BA,WAAOT,CAAP;AApC+E;AAuCjF2D,UAASA,EAA2C,CAAChE,CAAD,EAAYC,CAAZ,CAAuB;AACzE,QAAIC,IAAaF,CAAAG,WAAA,EAAjB,EACIC,IAAaH,CAAAE,WAAA,EADjB,EAGIE,IAAkB,EAHtB,EAIIiB,IAAmB,EAJvB;AAKAhB,UAAAC,KAAA,CAAYL,CAAZ,CAAAM,QAAA,CAAgC,QAAS,CAACC,CAAD,CAAW;AAClD,UAAIO,IAAUd,CAAA,CAAWO,CAAX,CAAd,EACIQ,IAAUb,CAAA,CAAWK,CAAX,CADd;AAEA,UAAK,CAAC,CAAA,EAAGc,CAAA4B,kBAAJ,EAAmCnC,CAAnC,CAAL,IAAqD,CAAC,CAAA,EAAGO,CAAA4B,kBAAJ,EAAmClC,CAAnC,CAArD,CAAA;AAIA,YAAIqC,IAAmBtC,CAAAW,UAAA,EAAvB,EACI4B,IAAmBtC,CAAAU,UAAA,EADvB;AAEArB,cAAAC,KAAA,CAAY+C,CAAZ,CAAA9C,QAAA,CAAsC,QAAS,CAACqB,CAAD,CAAY;AAEzD,cAAMA,CAAN,IAAmB0B,CAAnB,CAKO;AACL,gBAAIC,IAAeF,CAAA,CAAiBzB,CAAjB,CAAAlB,KAAnB,EACI8C,IAAeF,CAAA,CAAiB1B,CAAjB,CAAAlB,KADnB;AAGayB,aAAAC,CAA0CmB,CAA1CnB,EAAwDoB,CAAxDpB,CACb,KACMsB,CAEJ,GAFyB,CAAC,CAAA,EAAGpC,CAAAqC,YAAJ,EAA6BJ,CAA7B,CAAA,GAA6CA,CAAArB,KAA7C,GAAiEqB,CAAAb,SAAA,EAE1F,EADIkB,CACJ,GADyB,CAAC,CAAA,EAAGtC,CAAAqC,YAAJ,EAA6BH,CAA7B,CAAA,GAA6CA,CAAAtB,KAA7C,GAAiEsB,CAAAd,SAAA,EAC1F,EAAAtC,CAAAK,KAAA,CAAqB,CACnBC,KAAMC,CAAAkD,mBADa,EAEnBhD,YAAaL,CAAbK,GAAwB,GAAxBA,GAA8Be,CAA9Bf,GAA0C,qBAA1CA,IAAmE6C,CAAnE7C,GAAwF,MAAxFA,GAAiG+C,CAAjG/C,GAAsH,GAAtHA,CAFmB,CAArB,CAHF;AALK,WALP;AACET,aAAAK,KAAA,CAAqB,CACnBC,KAAMC,CAAAmD,cADa,EAEnBjD,YAAaL,CAAbK,GAAwB,GAAxBA,GAA8Be,CAA9Bf,GAA0C,eAFvB,CAArB,CAAA;AADF;AAFyD,SAA3D,CAAA;AAuBAR,cAAAC,KAAA,CAAYgD,CAAZ,CAAA/C,QAAA,CAAsC,QAAS,CAACqB,CAAD,CAAY;AACnDA,WAAN,IAAmByB,CAAnB,KACM,CAAC,CAAA,EAAG/B,CAAAsB,cAAJ,EAA+BU,CAAA,CAAiB1B,CAAjB,CAAAlB,KAA/B,CAAJ,GACEN,CAAAK,KAAA,CAAqB,CACnBC,KAAMC,CAAAqD,2BADa,EAEnBnD,YAAa,mBAAbA,GAAmCe,CAAnCf,GAA+C,MAA/CA,IAAyD,aAAzDA,GAAyEG,CAAAkB,KAAzErB,GAAwF,aAAxFA,CAFmB,CAArB,CADF,GAMEQ,CAAAZ,KAAA,CAAsB,CACpBC,KAAM6B,CAAA0B,2BADc,EAEpBpD,YAAa,mBAAbA,GAAmCe,CAAnCf,GAA+C,MAA/CA,IAAyD,aAAzDA,GAAyEG,CAAAkB,KAAzErB,GAAwF,aAAxFA,CAFoB,CAAtB,CAPJ;AADyD,SAA3D,CAAA;AA7BA;AAHkD,KAApD,CAAA;AAgDA,WAAO,CACLT,gBAAiBA,CADZ,EAELiB,iBAAkBA,CAFb,CAAP;AAtDyE;AA4D3EoC,UAASA,EAAqC,CAAC1C,CAAD,EAAUC,CAAV,CAAmB;AAC/D,WAAI,CAAC,CAAA,EAAGM,CAAAqC,YAAJ,EAA6B5C,CAA7B,CAAJ,GAGI,CAAC,CAAA,EAAGO,CAAAqC,YAAJ,EAA6B3C,CAA7B,CAHJ,IAG6CD,CAAAmB,KAH7C,KAG8DlB,CAAAkB,KAH9D,IAKI,CAAC,CAAA,EAAGZ,CAAAsB,cAAJ,EAA+B5B,CAA/B,CALJ,IAK+CyC,CAAA,CAAsC1C,CAAtC,EAA+CC,CAAAkD,OAA/C,CAL/C,GAOW,CAAC,CAAA,EAAG5C,CAAA6C,WAAJ,EAA4BpD,CAA5B,CAAJ,GAGH,CAAC,CAAA,EAAGO,CAAA6C,WAAJ,EAA4BnD,CAA5B,CAHG,IAGqCyC,CAAA,CAAsC1C,CAAAmD,OAAtC,EAAsDlD,CAAAkD,OAAtD,CAHrC,IAKH,CAAC,CAAA,EAAG5C,CAAAsB,cAAJ,EAA+B5B,CAA/B,CALG,IAKwCyC,CAAA,CAAsC1C,CAAtC,EAA+CC,CAAAkD,OAA/C,CALxC,GAOI,CAAC,CAAA,EAAG5C,CAAAsB,cAAJ,EAA+B7B,CAA/B,CAAJ,GAEE,CAAC,CAAA,EAAGO,CAAAsB,cAAJ,EAA+B5B,CAA/B,CAFF,IAE6CyC,CAAA,CAAsC1C,CAAAmD,OAAtC,EAAsDlD,CAAAkD,OAAtD,CAF7C,GAIA,CAAA,CAlBP;AAD+D;AAsBjE/B,UAASA,EAAyC,CAACpB,CAAD,EAAUC,CAAV,CAAmB;AACnE,WAAI,CAAC,CAAA,EAAGM,CAAAqC,YAAJ,EAA6B5C,CAA7B,CAAJ,GAES,CAAC,CAAA,EAAGO,CAAAqC,YAAJ,EAA6B3C,CAA7B,CAFT,IAEkDD,CAAAmB,KAFlD,KAEmElB,CAAAkB,KAFnE,GAGW,CAAC,CAAA,EAAGZ,CAAA6C,WAAJ,EAA4BpD,CAA5B,CAAJ,GAEE,CAAC,CAAA,EAAGO,CAAA6C,WAAJ,EAA4BnD,CAA5B,CAFF,IAE0CmB,CAAA,CAA0CpB,CAAAmD,OAA1C,EAA0DlD,CAAAkD,OAA1D,CAF1C,GAGI,CAAC,CAAA,EAAG5C,CAAAsB,cAAJ,EAA+B7B,CAA/B,CAAJ,GAIH,CAAC,CAAA,EAAGO,CAAAsB,cAAJ,EAA+B5B,CAA/B,CAJG,IAIwCmB,CAAA,CAA0CpB,CAAAmD,OAA1C,EAA0DlD,CAAAkD,OAA1D,CAJxC,IAMH,CAAC,CAAC,CAAA,EAAG5C,CAAAsB,cAAJ,EAA+B5B,CAA/B,CANE,IAMyCmB,CAAA,CAA0CpB,CAAAmD,OAA1C,EAA0DlD,CAA1D,CANzC,GASA,CAAA,CAfP;AADmE;AAuBrEoD,UAASA,EAA0B,CAACrE,CAAD,EAAYC,CAAZ,CAAuB;AACxD,QAAIC,IAAaF,CAAAG,WAAA,EAAjB,EACIC,IAAaH,CAAAE,WAAA,EADjB,EAGImE,IAAwB,EAH5B;AAIAhE,UAAAC,KAAA,CAAYL,CAAZ,CAAAM,QAAA,CAAgC,QAAS,CAACC,CAAD,CAAW;AAClD,UAAIO,IAAUd,CAAA,CAAWO,CAAX,CAAd,EACIQ,IAAUb,CAAA,CAAWK,CAAX,CADd;AAEA,UAAK,CAAC,CAAA,EAAGc,CAAA0B,YAAJ,EAA6BjC,CAA7B,CAAL,IAA+C,CAAC,CAAA,EAAGO,CAAA0B,YAAJ,EAA6BhC,CAA7B,CAA/C,CAAA;AAGA,YAAIsD,IAAsBjE,MAAAkE,OAAA,CAAc,IAAd,CAA1B;AACAvD,SAAAwD,SAAA,EAAAjE,QAAA,CAA2B,QAAS,CAACG,CAAD,CAAO;AACzC4D,WAAA,CAAoB5D,CAAAwB,KAApB,CAAA,GAAiC,CAAA,CAAjC;AADyC,SAA3C,CAAA;AAGAnB,SAAAyD,SAAA,EAAAjE,QAAA,CAA2B,QAAS,CAACG,CAAD,CAAO;AACpC4D,WAAA,CAAoB5D,CAAAwB,KAApB,CAAL,IACEmC,CAAA5D,KAAA,CAA2B,CACzBC,KAAMC,CAAA8D,wBADmB,EAEzB5D,YAAaH,CAAAwB,KAAbrB,GAAyB,+BAAzBA,GAA2DL,CAA3DK,GAAsE,GAF7C,CAA3B,CADF;AADyC,SAA3C,CAAA;AAPA;AAHkD,KAApD,CAAA;AAmBA,WAAOwD,CAAP;AAxBwD;AA+B1DK,UAASA,EAAsB,CAAC3E,CAAD,EAAYC,CAAZ,CAAuB;AACpD,QAAIC,IAAaF,CAAAG,WAAA,EAAjB,EACIC,IAAaH,CAAAE,WAAA,EADjB,EAGIyE,IAAoB,EAHxB;AAIAtE,UAAAC,KAAA,CAAYH,CAAZ,CAAAI,QAAA,CAAgC,QAAS,CAACC,CAAD,CAAW;AAClD,UAAIO,IAAUd,CAAA,CAAWO,CAAX,CAAd,EACIQ,IAAUb,CAAA,CAAWK,CAAX,CADd;AAEA,UAAK,CAAC,CAAA,EAAGc,CAAA0B,YAAJ,EAA6BjC,CAA7B,CAAL,IAA+C,CAAC,CAAA,EAAGO,CAAA0B,YAAJ,EAA6BhC,CAA7B,CAA/C,CAAA;AAGA,YAAI4D,IAAsBvE,MAAAkE,OAAA,CAAc,IAAd,CAA1B;AACAxD,SAAAyD,SAAA,EAAAjE,QAAA,CAA2B,QAAS,CAACG,CAAD,CAAO;AACzCkE,WAAA,CAAoBlE,CAAAwB,KAApB,CAAA,GAAiC,CAAA,CAAjC;AADyC,SAA3C,CAAA;AAGAlB,SAAAwD,SAAA,EAAAjE,QAAA,CAA2B,QAAS,CAACG,CAAD,CAAO;AACpCkE,WAAA,CAAoBlE,CAAAwB,KAApB,CAAL,IACEyC,CAAAlE,KAAA,CAAuB,CACrBC,KAAM6B,CAAAsC,oBADe,EAErBhE,YAAaH,CAAAwB,KAAbrB,GAAyB,2BAAzBA,GAAuDL,CAAvDK,GAAkE,GAF7C,CAAvB,CADF;AADyC,SAA3C,CAAA;AAPA;AAHkD,KAApD,CAAA;AAmBA,WAAO8D,CAAP;AAxBoD;AA8BtDG,UAASA,EAA0B,CAAC/E,CAAD,EAAYC,CAAZ,CAAuB;AACxD,QAAIC,IAAaF,CAAAG,WAAA,EAAjB,EACIC,IAAaH,CAAAE,WAAA,EADjB,EAGI6E,IAAyB,EAH7B;AAIA1E,UAAAC,KAAA,CAAYL,CAAZ,CAAAM,QAAA,CAAgC,QAAS,CAACC,CAAD,CAAW;AAClD,UAAIO,IAAUd,CAAA,CAAWO,CAAX,CAAd,EACIQ,IAAUb,CAAA,CAAWK,CAAX,CADd;AAEA,UAAK,CAAC,CAAA,EAAGc,CAAA2B,WAAJ,EAA4BlC,CAA5B,CAAL,IAA8C,CAAC,CAAA,EAAGO,CAAA2B,WAAJ,EAA4BjC,CAA5B,CAA9C,CAAA;AAGA,YAAIgE,IAAkB3E,MAAAkE,OAAA,CAAc,IAAd,CAAtB;AACAvD,SAAAiE,UAAA,EAAA1E,QAAA,CAA4B,QAAS,CAAC2E,CAAD,CAAQ;AAC3CF,WAAA,CAAgBE,CAAAhD,KAAhB,CAAA,GAA8B,CAAA,CAA9B;AAD2C,SAA7C,CAAA;AAGAnB,SAAAkE,UAAA,EAAA1E,QAAA,CAA4B,QAAS,CAAC2E,CAAD,CAAQ;AACtCF,WAAA,CAAgBE,CAAAhD,KAAhB,CAAL,IACE6C,CAAAtE,KAAA,CAA4B,CAC1BC,KAAMC,CAAAwE,wBADoB,EAE1BtE,YAAaqE,CAAAhD,KAAbrB,GAA0B,8BAA1BA,GAA2DL,CAA3DK,GAAsE,GAF5C,CAA5B,CADF;AAD2C,SAA7C,CAAA;AAPA;AAHkD,KAApD,CAAA;AAmBA,WAAOkE,CAAP;AAxBwD;AA+B1DK,UAASA,EAAsB,CAACrF,CAAD,EAAYC,CAAZ,CAAuB;AACpD,QAAIC,IAAaF,CAAAG,WAAA,EAAjB,EACIC,IAAaH,CAAAE,WAAA,EADjB,EAGImF,IAAqB,EAHzB;AAIAhF,UAAAC,KAAA,CAAYL,CAAZ,CAAAM,QAAA,CAAgC,QAAS,CAACC,CAAD,CAAW;AAClD,UAAIO,IAAUd,CAAA,CAAWO,CAAX,CAAd,EACIQ,IAAUb,CAAA,CAAWK,CAAX,CADd;AAEA,UAAK,CAAC,CAAA,EAAGc,CAAA2B,WAAJ,EAA4BlC,CAA5B,CAAL,IAA8C,CAAC,CAAA,EAAGO,CAAA2B,WAAJ,EAA4BjC,CAA5B,CAA9C,CAAA;AAIA,YAAIsE,IAAkBjF,MAAAkE,OAAA,CAAc,IAAd,CAAtB;AACAxD,SAAAkE,UAAA,EAAA1E,QAAA,CAA4B,QAAS,CAAC2E,CAAD,CAAQ;AAC3CI,WAAA,CAAgBJ,CAAAhD,KAAhB,CAAA,GAA8B,CAAA,CAA9B;AAD2C,SAA7C,CAAA;AAGAlB,SAAAiE,UAAA,EAAA1E,QAAA,CAA4B,QAAS,CAAC2E,CAAD,CAAQ;AACtCI,WAAA,CAAgBJ,CAAAhD,KAAhB,CAAL,IACEmD,CAAA5E,KAAA,CAAwB,CACtBC,KAAM6B,CAAAgD,oBADgB,EAEtB1E,YAAaqE,CAAAhD,KAAbrB,GAA0B,0BAA1BA,GAAuDL,CAAvDK,GAAkE,GAF5C,CAAxB,CADF;AAD2C,SAA7C,CAAA;AARA;AAHkD,KAApD,CAAA;AAoBA,WAAOwE,CAAP;AAzBoD;AA4BtDG,UAASA,EAAoC,CAACzF,CAAD,EAAYC,CAAZ,CAAuB;AAClE,QAAIC,IAAaF,CAAAG,WAAA,EAAjB,EACIC,IAAaH,CAAAE,WAAA,EADjB,EAEIE,IAAkB,EAFtB;AAIAC,UAAAC,KAAA,CAAYL,CAAZ,CAAAM,QAAA,CAAgC,QAAS,CAACC,CAAD,CAAW;AAClD,UAAIO,IAAUd,CAAA,CAAWO,CAAX,CAAd,EACIQ,IAAUb,CAAA,CAAWK,CAAX,CADd;AAEA,UAAK,CAAC,CAAA,EAAGc,CAAAC,aAAJ,EAA8BR,CAA9B,CAAL,IAAgD,CAAC,CAAA,EAAGO,CAAAC,aAAJ,EAA8BP,CAA9B,CAAhD,CAAA;AAIIyE,SAAAA,GAAgB1E,CAAA2E,cAAA,EAAhBD;AACJ,YAAIE,IAAgB3E,CAAA0E,cAAA,EAApB;AACAD,SAAAlF,QAAA,CAAsB,QAAS,CAACqF,CAAD,CAAe;AACvCD,WAAAE,KAAA,CAAmB,QAAS,CAACC,CAAD,CAAM;AACrC,mBAAOA,CAAA5D,KAAP,KAAoB0D,CAAA1D,KAApB;AADqC,WAAlC,CAAL,IAGE9B,CAAAK,KAAA,CAAqB,CACnBC,KAAMC,CAAAoF,8BADa,EAEnBlF,YAAaL,CAAbK,GAAwB,kCAAxBA,IAA8D+E,CAAA1D,KAA9DrB,GAAkF,GAAlFA,CAFmB,CAArB,CAHF;AAD4C,SAA9C,CAAA;AANA;AAHkD,KAApD,CAAA;AAoBA,WAAOT,CAAP;AAzBkE;AA4BpE4F,UAASA,EAAgC,CAACjG,CAAD,EAAYC,CAAZ,CAAuB;AAC9D,QAAIC,IAAaF,CAAAG,WAAA,EAAjB,EACIC,IAAaH,CAAAE,WAAA,EADjB,EAEI+F,IAA+B,EAFnC;AAIA5F,UAAAC,KAAA,CAAYH,CAAZ,CAAAI,QAAA,CAAgC,QAAS,CAACC,CAAD,CAAW;AAClD,UAAIO,IAAUd,CAAA,CAAWO,CAAX,CAAd,EACIQ,IAAUb,CAAA,CAAWK,CAAX,CADd;AAEA,UAAK,CAAC,CAAA,EAAGc,CAAAC,aAAJ,EAA8BR,CAA9B,CAAL,IAAgD,CAAC,CAAA,EAAGO,CAAAC,aAAJ,EAA8BP,CAA9B,CAAhD,CAAA;AAIA,YAAIyE,IAAgB1E,CAAA2E,cAAA,EAApB;AACoB1E,SAAA0E,cAAAC,EACpBpF,QAAA,CAAsB,QAAS,CAAC2F,CAAD,CAAe;AACvCT,WAAAI,KAAA,CAAmB,QAAS,CAACC,CAAD,CAAM;AACrC,mBAAOA,CAAA5D,KAAP,KAAoBgE,CAAAhE,KAApB;AADqC,WAAlC,CAAL,IAGE+D,CAAAxF,KAAA,CAAkC,CAChCC,KAAM6B,CAAA4D,0BAD0B,EAEhCtF,YAAaqF,CAAAhE,KAAbrB,GAAiC,mCAAjCA,IAAwE,KAAxEA,GAAgFL,CAAhFK,GAA2F,GAA3FA,CAFgC,CAAlC,CAHF;AAD4C,SAA9C,CAAA;AANA;AAHkD,KAApD,CAAA;AAoBA,WAAOoF,CAAP;AAzB8D;AA4BhEG,UAASA,EAAqB,CAACrG,CAAD,EAAYC,CAAZ,CAAuB;AACnD,QAAIqG,IAAoB,EAAxB,EAEIC,IAAwBC,CAAA,CAAyBvG,CAAzB,CAF5B;AAGAD,KAAAyG,cAAA,EAAAjG,QAAA,CAAkC,QAAS,CAACkG,CAAD,CAAY;AAChDH,OAAA,CAAsBG,CAAAvE,KAAtB,CAAL,IACEmE,CAAA5F,KAAA,CAAuB,CACrBC,KAAMC,CAAA+F,kBADe,EAErB7F,YAAa4F,CAAAvE,KAAbrB,GAA8B,cAFT,CAAvB,CADF;AADqD,KAAvD,CAAA;AASA,WAAOwF,CAAP;AAbmD;AAgBrDM,UAASA,EAA2B,CAACC,CAAD,EAAeC,CAAf,CAA6B;AAC/D,QAAIC,IAAc,EAAlB,EACIC,IAAYC,CAAA,CAA2BH,CAA3B,CADhB;AAGAD,KAAA/E,KAAAtB,QAAA,CAA0B,QAAS,CAAC0B,CAAD,CAAM;AAClC8E,OAAA,CAAU9E,CAAAC,KAAV,CAAL,IACE4E,CAAArG,KAAA,CAAiBwB,CAAjB,CADF;AADuC,KAAzC,CAAA;AAMA,WAAO6E,CAAP;AAV+D;AAajEG,UAASA,EAAwB,CAAClH,CAAD,EAAYC,CAAZ,CAAuB;AACtD,QAAIkH,IAAuB,EAA3B,EACIC,IAAwBZ,CAAA,CAAyBxG,CAAzB,CAD5B;AAGAC,KAAAwG,cAAA,EAAAjG,QAAA,CAAkC,QAAS,CAACsG,CAAD,CAAe;AACxD,UAAID,IAAeO,CAAA,CAAsBN,CAAA3E,KAAtB,CAAnB;AACK0E,OAAL,IAIAD,CAAA,CAA4BC,CAA5B,EAA0CC,CAA1C,CAAAtG,QAAA,CAAgE,QAAS,CAAC0B,CAAD,CAAM;AAC7EiF,SAAAzG,KAAA,CAA0B,CACxBC,KAAMC,CAAAyG,sBADkB,EAExBvG,YAAaoB,CAAAC,KAAbrB,GAAwB,oBAAxBA,GAA+CgG,CAAA3E,KAFvB,CAA1B,CAAA;AAD6E,OAA/E,CAJA;AAFwD,KAA1D,CAAA;AAcA,WAAOgF,CAAP;AAlBsD;AAqBxDG,UAASA,EAAyB,CAACT,CAAD,EAAeC,CAAf,CAA6B;AAC7D,QAAIS,IAAY,EAAhB,EACIC,IAAYP,CAAA,CAA2BJ,CAA3B,CADhB;AAGAC,KAAAhF,KAAAtB,QAAA,CAA0B,QAAS,CAAC0B,CAAD,CAAM;AAClCsF,OAAA,CAAUtF,CAAAC,KAAV,CAAL,IACEoF,CAAA7G,KAAA,CAAewB,CAAf,CADF;AADuC,KAAzC,CAAA;AAMA,WAAOqF,CAAP;AAV6D;AAa/DE,UAASA,EAA6B,CAACzH,CAAD,EAAYC,CAAZ,CAAuB;AAC3D,QAAIyH,IAAuB,EAA3B,EACIN,IAAwBZ,CAAA,CAAyBxG,CAAzB,CAD5B;AAGAC,KAAAwG,cAAA,EAAAjG,QAAA,CAAkC,QAAS,CAACsG,CAAD,CAAe;AACxD,UAAID,IAAeO,CAAA,CAAsBN,CAAA3E,KAAtB,CAAnB;AACK0E,OAAL,IAIAS,CAAA,CAA0BT,CAA1B,EAAwCC,CAAxC,CAAAtG,QAAA,CAA8D,QAAS,CAAC0B,CAAD,CAAM;AACtE,SAAC,CAAA,EAAGX,CAAAsB,cAAJ,EAA+BX,CAAAvB,KAA/B,CAAL,IAIA+G,CAAAhH,KAAA,CAA0B,CACxBC,KAAMC,CAAA+G,6BADkB,EAExB7G,YAAa,iBAAbA,GAAiCoB,CAAAC,KAAjCrB,GAA4C,gBAA5CA,IAAgEgG,CAAA3E,KAAhErB,GAAoF,YAApFA,CAFwB,CAA1B,CAJA;AAD2E,OAA7E,CAJA;AAFwD,KAA1D,CAAA;AAkBA,WAAO4G,CAAP;AAtB2D;AAyB7DE,UAASA,EAAgC,CAACf,CAAD,EAAeC,CAAf,CAA6B;AACpE,QAAIe,IAAmB,EAAvB,EACIC,IAAiB,IAAIC,GAAJ,CAAQjB,CAAAkB,UAAR,CADrB;AAGAnB,KAAAmB,UAAAxH,QAAA,CAA+B,QAAS,CAACyH,CAAD,CAAc;AAC/CH,OAAAI,IAAA,CAAmBD,CAAnB,CAAL,IACEJ,CAAAnH,KAAA,CAAsBuH,CAAtB,CADF;AADoD,KAAtD,CAAA;AAMA,WAAOJ,CAAP;AAVoE;AAatEM,UAASA,EAA6B,CAACnI,CAAD,EAAYC,CAAZ,CAAuB;AAC3D,QAAI4H,IAAmB,EAAvB,EACIT,IAAwBZ,CAAA,CAAyBxG,CAAzB,CAD5B;AAGAC,KAAAwG,cAAA,EAAAjG,QAAA,CAAkC,QAAS,CAACsG,CAAD,CAAe;AACxD,UAAID,IAAeO,CAAA,CAAsBN,CAAA3E,KAAtB,CAAnB;AACK0E,OAAL,IAIAe,CAAA,CAAiCf,CAAjC,EAA+CC,CAA/C,CAAAtG,QAAA,CAAqE,QAAS,CAAC4H,CAAD,CAAW;AACvFP,SAAAnH,KAAA,CAAsB,CACpBC,KAAMC,CAAAyH,2BADc,EAEpBvH,YAAasH,CAAbtH,GAAwB,oBAAxBA,GAA+CgG,CAAA3E,KAF3B,CAAtB,CAAA;AADuF,OAAzF,CAJA;AAFwD,KAA1D,CAAA;AAcA,WAAO0F,CAAP;AAlB2D;AAqB7DrB,UAASA,EAAwB,CAAC8B,CAAD,CAAS;AACxC,WAAO,CAAC,CAAA,EAAGC,CAAAC,QAAJ,EAAsBF,CAAA7B,cAAA,EAAtB,EAA8C,QAAS,CAACgC,CAAD,CAAM;AAClE,aAAOA,CAAAtG,KAAP;AADkE,KAA7D,CAAP;AADwC;AAM1C8E,UAASA,EAA0B,CAACP,CAAD,CAAY;AAC7C,WAAO,CAAC,CAAA,EAAG6B,CAAAC,QAAJ,EAAsB9B,CAAA5E,KAAtB,EAAsC,QAAS,CAACI,CAAD,CAAM;AAC1D,aAAOA,CAAAC,KAAP;AAD0D,KAArD,CAAP;AAD6C;AA9qB/C7B,QAAAoI,eAAA,CAAsB5I,CAAtB,EAA+B,YAA/B,EAA6C,CAC3CqF,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGArF,GAAA0C,oBAAA,GAA8B1C,CAAAc,mBAA9B,GAA2D0B,IAAAA,EAA3D;AACAxC,GAAA6I,oBAAA,GAuEAA,QAA4B,CAAC3I,CAAD,EAAYC,CAAZ,CAAuB;AACjD,WAAO,EAAA2I,OAAA,CAAU7I,CAAA,CAAiBC,CAAjB,EAA4BC,CAA5B,CAAV,EAAkDc,CAAA,CAAyBf,CAAzB,EAAoCC,CAApC,CAAlD,EAAkGoD,CAAA,CAAkDrD,CAAlD,EAA6DC,CAA7D,CAAlG,EAA2K+D,CAAA,CAA4ChE,CAA5C,EAAuDC,CAAvD,CAAAI,gBAA3K,EAA8PgE,CAAA,CAA2BrE,CAA3B,EAAsCC,CAAtC,CAA9P,EAAgT8E,CAAA,CAA2B/E,CAA3B,EAAsCC,CAAtC,CAAhT,EAAkWoB,CAAA,CAAerB,CAAf,EAA0BC,CAA1B,CAAAI,gBAAlW,EAAwZoF,CAAA,CAAqCzF,CAArC,EAAgDC,CAAhD,CAAxZ,EAAodoG,CAAA,CAAsBrG,CAAtB,EAAiCC,CAAjC,CAApd,EAAigBiH,CAAA,CAAyBlH,CAAzB,EAAoCC,CAApC,CAAjgB,EAAijBwH,CAAA,CAA8BzH,CAA9B,EAAyCC,CAAzC,CAAjjB,EAAsmBkI,CAAA,CAA8BnI,CAA9B,EAAyCC,CAAzC,CAAtmB,CAAP;AADiD,GAvEnD;AACAH,GAAA+I,qBAAA,GA8EAA,QAA6B,CAAC7I,CAAD,EAAYC,CAAZ,CAAuB;AAClD,WAAO,EAAA2I,OAAA,CAAUvH,CAAA,CAAerB,CAAf,EAA0BC,CAA1B,CAAAqB,iBAAV,EAAiE+D,CAAA,CAAuBrF,CAAvB,EAAkCC,CAAlC,CAAjE,EAA+GgG,CAAA,CAAiCjG,CAAjC,EAA4CC,CAA5C,CAA/G,EAAuK0E,CAAA,CAAuB3E,CAAvB,EAAkCC,CAAlC,CAAvK,EAAqN+D,CAAA,CAA4ChE,CAA5C,EAAuDC,CAAvD,CAAAqB,iBAArN,CAAP;AADkD,GA9EpD;AACAxB,GAAAC,iBAAA,GAA2BA,CAA3B;AACAD,GAAAiB,yBAAA,GAAmCA,CAAnC;AACAjB,GAAAuB,eAAA,GAAyBA,CAAzB;AACAvB,GAAAuD,kDAAA,GAA4DA,CAA5D;AACAvD,GAAAkE,4CAAA,GAAsDA,CAAtD;AACAlE,GAAAuE,2BAAA,GAAqCA,CAArC;AACAvE,GAAA6E,uBAAA,GAAiCA,CAAjC;AACA7E,GAAAiF,2BAAA,GAAqCA,CAArC;AACAjF,GAAAuF,uBAAA,GAAiCA,CAAjC;AACAvF,GAAA2F,qCAAA,GAA+CA,CAA/C;AACA3F,GAAAmG,iCAAA,GAA2CA,CAA3C;AACAnG,GAAAuG,sBAAA,GAAgCA,CAAhC;AACAvG,GAAAoH,yBAAA,GAAmCA,CAAnC;AACApH,GAAA2H,8BAAA,GAAwCA,CAAxC;AACA3H,GAAA8H,iCAAA,GAA2CA,CAA3C;AACA9H,GAAAqI,8BAAA,GAAwCA,CAAxC;AAEA,MAAI5G,IAAc3B,CAAA,CAAQ,6CAAR,CAAlB;AAEkBA,GAAA,CAAQ,6CAAR,CAAA;AAEJA,GAAA,CAAQ,yCAAR,CAAA;AAId,MAAI2I,IAE0C,CAJ1CO,CAI0C,GAJhClJ,CAAA,CAAQ,4CAAR,CAIgC,KAFRkJ,CAEeC,WAAP,GAFRD,CAEQ,GAA8B,CAAEN,QAFxCM,CAEsC,CAF5E,EAaIlI,IAAqBd,CAAAc,mBAArBA,GAAkD,CACpDkD,mBAAoB,oBADgC,EAEpDC,cAAe,eAFqC,EAGpD5C,kBAAmB,mBAHiC,EAIpDN,aAAc,cAJsC,EAKpD6D,wBAAyB,yBAL2B,EAMpDU,wBAAyB,yBAN2B,EAOpDxC,YAAa,aAPuC,EAQpDF,iBAAkB,kBARkC,EASpDI,mBAAoB,oBATgC,EAUpDmB,2BAA4B,4BAVwB;AAWpD+B,gCAA+B,+BAXqB,EAYpDW,kBAAmB,mBAZiC,EAapDU,sBAAuB,uBAb6B,EAcpDgB,2BAA4B,4BAdwB,EAepDV,6BAA8B,8BAfsB,CAbtD,EA+BInF,IAAsB1C,CAAA0C,oBAAtBA,GAAoD,CACtDC,yBAA0B,0BAD4B,EAEtD+C,oBAAqB,qBAFiC,EAGtDY,0BAA2B,2BAH2B,EAItDtB,oBAAqB,qBAJiC,EAKtDZ,2BAA4B,4BAL0B;AAMtDnB,qBAAoB,oBANkC,CA/BxD;AAlC8H,CAA9H;;",
"sources":["node_modules/graphql/utilities/findBreakingChanges.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$findBreakingChanges\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DangerousChangeType = exports.BreakingChangeType = undefined;\nexports.findBreakingChanges = findBreakingChanges;\nexports.findDangerousChanges = findDangerousChanges;\nexports.findRemovedTypes = findRemovedTypes;\nexports.findTypesThatChangedKind = findTypesThatChangedKind;\nexports.findArgChanges = findArgChanges;\nexports.findFieldsThatChangedTypeOnObjectOrInterfaceTypes = findFieldsThatChangedTypeOnObjectOrInterfaceTypes;\nexports.findFieldsThatChangedTypeOnInputObjectTypes = findFieldsThatChangedTypeOnInputObjectTypes;\nexports.findTypesRemovedFromUnions = findTypesRemovedFromUnions;\nexports.findTypesAddedToUnions = findTypesAddedToUnions;\nexports.findValuesRemovedFromEnums = findValuesRemovedFromEnums;\nexports.findValuesAddedToEnums = findValuesAddedToEnums;\nexports.findInterfacesRemovedFromObjectTypes = findInterfacesRemovedFromObjectTypes;\nexports.findInterfacesAddedToObjectTypes = findInterfacesAddedToObjectTypes;\nexports.findRemovedDirectives = findRemovedDirectives;\nexports.findRemovedDirectiveArgs = findRemovedDirectiveArgs;\nexports.findAddedNonNullDirectiveArgs = findAddedNonNullDirectiveArgs;\nexports.findRemovedLocationsForDirective = findRemovedLocationsForDirective;\nexports.findRemovedDirectiveLocations = findRemovedDirectiveLocations;\n\nvar _definition = require('../type/definition');\n\nvar _directives = require('../type/directives');\n\nvar _schema = require('../type/schema');\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2016-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar BreakingChangeType = exports.BreakingChangeType = {\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  NON_NULL_ARG_ADDED: 'NON_NULL_ARG_ADDED',\n  NON_NULL_INPUT_FIELD_ADDED: 'NON_NULL_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',\n  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',\n  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',\n  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED',\n  NON_NULL_DIRECTIVE_ARG_ADDED: 'NON_NULL_DIRECTIVE_ARG_ADDED'\n};\n\nvar DangerousChangeType = exports.DangerousChangeType = {\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE',\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',\n  NULLABLE_INPUT_FIELD_ADDED: 'NULLABLE_INPUT_FIELD_ADDED',\n  NULLABLE_ARG_ADDED: 'NULLABLE_ARG_ADDED'\n};\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nfunction findBreakingChanges(oldSchema, newSchema) {\n  return [].concat(findRemovedTypes(oldSchema, newSchema), findTypesThatChangedKind(oldSchema, newSchema), findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).breakingChanges, findTypesRemovedFromUnions(oldSchema, newSchema), findValuesRemovedFromEnums(oldSchema, newSchema), findArgChanges(oldSchema, newSchema).breakingChanges, findInterfacesRemovedFromObjectTypes(oldSchema, newSchema), findRemovedDirectives(oldSchema, newSchema), findRemovedDirectiveArgs(oldSchema, newSchema), findAddedNonNullDirectiveArgs(oldSchema, newSchema), findRemovedDirectiveLocations(oldSchema, newSchema));\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\nfunction findDangerousChanges(oldSchema, newSchema) {\n  return [].concat(findArgChanges(oldSchema, newSchema).dangerousChanges, findValuesAddedToEnums(oldSchema, newSchema), findInterfacesAddedToObjectTypes(oldSchema, newSchema), findTypesAddedToUnions(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).dangerousChanges);\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing an entire type.\n */\nfunction findRemovedTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    if (!newTypeMap[typeName]) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED,\n        description: typeName + ' was removed.'\n      });\n    }\n  });\n  return breakingChanges;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to changing the type of a type.\n */\nfunction findTypesThatChangedKind(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    if (!newTypeMap[typeName]) {\n      return;\n    }\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (oldType.constructor !== newType.constructor) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: typeName + ' changed from ' + (typeKindName(oldType) + ' to ' + typeKindName(newType) + '.')\n      });\n    }\n  });\n  return breakingChanges;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any\n * breaking or dangerous changes in the newSchema related to arguments\n * (such as removal or change of type of an argument, or a change in an\n * argument's default value).\n */\nfunction findArgChanges(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  var dangerousChanges = [];\n\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!((0, _definition.isObjectType)(oldType) || (0, _definition.isInterfaceType)(oldType)) || !((0, _definition.isObjectType)(newType) || (0, _definition.isInterfaceType)(newType)) || newType.constructor !== oldType.constructor) {\n      return;\n    }\n\n    var oldTypeFields = oldType.getFields();\n    var newTypeFields = newType.getFields();\n\n    Object.keys(oldTypeFields).forEach(function (fieldName) {\n      if (!newTypeFields[fieldName]) {\n        return;\n      }\n\n      oldTypeFields[fieldName].args.forEach(function (oldArgDef) {\n        var newArgs = newTypeFields[fieldName].args;\n        var newArgDef = newArgs.find(function (arg) {\n          return arg.name === oldArgDef.name;\n        });\n\n        // Arg not present\n        if (!newArgDef) {\n          breakingChanges.push({\n            type: BreakingChangeType.ARG_REMOVED,\n            description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' was removed')\n          });\n        } else {\n          var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldArgDef.type, newArgDef.type);\n          if (!isSafe) {\n            breakingChanges.push({\n              type: BreakingChangeType.ARG_CHANGED_KIND,\n              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed type from ') + (oldArgDef.type.toString() + ' to ' + newArgDef.type.toString())\n            });\n          } else if (oldArgDef.defaultValue !== undefined && oldArgDef.defaultValue !== newArgDef.defaultValue) {\n            dangerousChanges.push({\n              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed defaultValue')\n            });\n          }\n        }\n      });\n      // Check if a non-null arg was added to the field\n      newTypeFields[fieldName].args.forEach(function (newArgDef) {\n        var oldArgs = oldTypeFields[fieldName].args;\n        var oldArgDef = oldArgs.find(function (arg) {\n          return arg.name === newArgDef.name;\n        });\n        if (!oldArgDef) {\n          if ((0, _definition.isNonNullType)(newArgDef.type)) {\n            breakingChanges.push({\n              type: BreakingChangeType.NON_NULL_ARG_ADDED,\n              description: 'A non-null arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')\n            });\n          } else {\n            dangerousChanges.push({\n              type: DangerousChangeType.NULLABLE_ARG_ADDED,\n              description: 'A nullable arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')\n            });\n          }\n        }\n      });\n    });\n  });\n\n  return {\n    breakingChanges: breakingChanges,\n    dangerousChanges: dangerousChanges\n  };\n}\n\nfunction typeKindName(type) {\n  if ((0, _definition.isScalarType)(type)) {\n    return 'a Scalar type';\n  }\n  if ((0, _definition.isObjectType)(type)) {\n    return 'an Object type';\n  }\n  if ((0, _definition.isInterfaceType)(type)) {\n    return 'an Interface type';\n  }\n  if ((0, _definition.isUnionType)(type)) {\n    return 'a Union type';\n  }\n  if ((0, _definition.isEnumType)(type)) {\n    return 'an Enum type';\n  }\n  if ((0, _definition.isInputObjectType)(type)) {\n    return 'an Input type';\n  }\n  throw new TypeError('Unknown type ' + type.constructor.name);\n}\n\nfunction findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!((0, _definition.isObjectType)(oldType) || (0, _definition.isInterfaceType)(oldType)) || !((0, _definition.isObjectType)(newType) || (0, _definition.isInterfaceType)(newType)) || newType.constructor !== oldType.constructor) {\n      return;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: typeName + '.' + fieldName + ' was removed.'\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n        var isSafe = isChangeSafeForObjectOrInterfaceField(oldFieldType, newFieldType);\n        if (!isSafe) {\n          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')\n          });\n        }\n      }\n    });\n  });\n  return breakingChanges;\n}\n\nfunction findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  var dangerousChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isInputObjectType)(oldType) || !(0, _definition.isInputObjectType)(newType)) {\n      return;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: typeName + '.' + fieldName + ' was removed.'\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n\n        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldFieldType, newFieldType);\n        if (!isSafe) {\n          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')\n          });\n        }\n      }\n    });\n    // Check if a field was added to the input object type\n    Object.keys(newTypeFieldsDef).forEach(function (fieldName) {\n      if (!(fieldName in oldTypeFieldsDef)) {\n        if ((0, _definition.isNonNullType)(newTypeFieldsDef[fieldName].type)) {\n          breakingChanges.push({\n            type: BreakingChangeType.NON_NULL_INPUT_FIELD_ADDED,\n            description: 'A non-null field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')\n          });\n        } else {\n          dangerousChanges.push({\n            type: DangerousChangeType.NULLABLE_INPUT_FIELD_ADDED,\n            description: 'A nullable field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')\n          });\n        }\n      }\n    });\n  });\n  return {\n    breakingChanges: breakingChanges,\n    dangerousChanges: dangerousChanges\n  };\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if ((0, _definition.isNamedType)(oldType)) {\n    return (\n      // if they're both named types, see if their names are equivalent\n      (0, _definition.isNamedType)(newType) && oldType.name === newType.name ||\n      // moving from nullable to non-null of the same underlying type is safe\n      (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if ((0, _definition.isListType)(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) ||\n      // moving from nullable to non-null of the same underlying type is safe\n      (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if ((0, _definition.isNonNullType)(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n  return false;\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if ((0, _definition.isNamedType)(oldType)) {\n    // if they're both named types, see if their names are equivalent\n    return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;\n  } else if ((0, _definition.isListType)(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  } else if ((0, _definition.isNonNullType)(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) ||\n      // moving from non-null to nullable of the same underlying type is safe\n      !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  }\n  return false;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing types from a union type.\n */\nfunction findTypesRemovedFromUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var typesRemovedFromUnion = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isUnionType)(oldType) || !(0, _definition.isUnionType)(newType)) {\n      return;\n    }\n    var typeNamesInNewUnion = Object.create(null);\n    newType.getTypes().forEach(function (type) {\n      typeNamesInNewUnion[type.name] = true;\n    });\n    oldType.getTypes().forEach(function (type) {\n      if (!typeNamesInNewUnion[type.name]) {\n        typesRemovedFromUnion.push({\n          type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n          description: type.name + ' was removed from union type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return typesRemovedFromUnion;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding types to a union type.\n */\nfunction findTypesAddedToUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var typesAddedToUnion = [];\n  Object.keys(newTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isUnionType)(oldType) || !(0, _definition.isUnionType)(newType)) {\n      return;\n    }\n    var typeNamesInOldUnion = Object.create(null);\n    oldType.getTypes().forEach(function (type) {\n      typeNamesInOldUnion[type.name] = true;\n    });\n    newType.getTypes().forEach(function (type) {\n      if (!typeNamesInOldUnion[type.name]) {\n        typesAddedToUnion.push({\n          type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n          description: type.name + ' was added to union type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return typesAddedToUnion;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing values from an enum type.\n */\nfunction findValuesRemovedFromEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var valuesRemovedFromEnums = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isEnumType)(oldType) || !(0, _definition.isEnumType)(newType)) {\n      return;\n    }\n    var valuesInNewEnum = Object.create(null);\n    newType.getValues().forEach(function (value) {\n      valuesInNewEnum[value.name] = true;\n    });\n    oldType.getValues().forEach(function (value) {\n      if (!valuesInNewEnum[value.name]) {\n        valuesRemovedFromEnums.push({\n          type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n          description: value.name + ' was removed from enum type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return valuesRemovedFromEnums;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding values to an enum type.\n */\nfunction findValuesAddedToEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var valuesAddedToEnums = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isEnumType)(oldType) || !(0, _definition.isEnumType)(newType)) {\n      return;\n    }\n\n    var valuesInOldEnum = Object.create(null);\n    oldType.getValues().forEach(function (value) {\n      valuesInOldEnum[value.name] = true;\n    });\n    newType.getValues().forEach(function (value) {\n      if (!valuesInOldEnum[value.name]) {\n        valuesAddedToEnums.push({\n          type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n          description: value.name + ' was added to enum type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return valuesAddedToEnums;\n}\n\nfunction findInterfacesRemovedFromObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isObjectType)(oldType) || !(0, _definition.isObjectType)(newType)) {\n      return;\n    }\n\n    var oldInterfaces = oldType.getInterfaces();\n    var newInterfaces = newType.getInterfaces();\n    oldInterfaces.forEach(function (oldInterface) {\n      if (!newInterfaces.some(function (int) {\n        return int.name === oldInterface.name;\n      })) {\n        breakingChanges.push({\n          type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n          description: typeName + ' no longer implements interface ' + (oldInterface.name + '.')\n        });\n      }\n    });\n  });\n  return breakingChanges;\n}\n\nfunction findInterfacesAddedToObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var interfacesAddedToObjectTypes = [];\n\n  Object.keys(newTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(0, _definition.isObjectType)(oldType) || !(0, _definition.isObjectType)(newType)) {\n      return;\n    }\n\n    var oldInterfaces = oldType.getInterfaces();\n    var newInterfaces = newType.getInterfaces();\n    newInterfaces.forEach(function (newInterface) {\n      if (!oldInterfaces.some(function (int) {\n        return int.name === newInterface.name;\n      })) {\n        interfacesAddedToObjectTypes.push({\n          type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,\n          description: newInterface.name + ' added to interfaces implemented ' + ('by ' + typeName + '.')\n        });\n      }\n    });\n  });\n  return interfacesAddedToObjectTypes;\n}\n\nfunction findRemovedDirectives(oldSchema, newSchema) {\n  var removedDirectives = [];\n\n  var newSchemaDirectiveMap = getDirectiveMapForSchema(newSchema);\n  oldSchema.getDirectives().forEach(function (directive) {\n    if (!newSchemaDirectiveMap[directive.name]) {\n      removedDirectives.push({\n        type: BreakingChangeType.DIRECTIVE_REMOVED,\n        description: directive.name + ' was removed'\n      });\n    }\n  });\n\n  return removedDirectives;\n}\n\nfunction findRemovedArgsForDirective(oldDirective, newDirective) {\n  var removedArgs = [];\n  var newArgMap = getArgumentMapForDirective(newDirective);\n\n  oldDirective.args.forEach(function (arg) {\n    if (!newArgMap[arg.name]) {\n      removedArgs.push(arg);\n    }\n  });\n\n  return removedArgs;\n}\n\nfunction findRemovedDirectiveArgs(oldSchema, newSchema) {\n  var removedDirectiveArgs = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n\n  newSchema.getDirectives().forEach(function (newDirective) {\n    var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n    if (!oldDirective) {\n      return;\n    }\n\n    findRemovedArgsForDirective(oldDirective, newDirective).forEach(function (arg) {\n      removedDirectiveArgs.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: arg.name + ' was removed from ' + newDirective.name\n      });\n    });\n  });\n\n  return removedDirectiveArgs;\n}\n\nfunction findAddedArgsForDirective(oldDirective, newDirective) {\n  var addedArgs = [];\n  var oldArgMap = getArgumentMapForDirective(oldDirective);\n\n  newDirective.args.forEach(function (arg) {\n    if (!oldArgMap[arg.name]) {\n      addedArgs.push(arg);\n    }\n  });\n\n  return addedArgs;\n}\n\nfunction findAddedNonNullDirectiveArgs(oldSchema, newSchema) {\n  var addedNonNullableArgs = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n\n  newSchema.getDirectives().forEach(function (newDirective) {\n    var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n    if (!oldDirective) {\n      return;\n    }\n\n    findAddedArgsForDirective(oldDirective, newDirective).forEach(function (arg) {\n      if (!(0, _definition.isNonNullType)(arg.type)) {\n        return;\n      }\n\n      addedNonNullableArgs.push({\n        type: BreakingChangeType.NON_NULL_DIRECTIVE_ARG_ADDED,\n        description: 'A non-null arg ' + arg.name + ' on directive ' + (newDirective.name + ' was added')\n      });\n    });\n  });\n\n  return addedNonNullableArgs;\n}\n\nfunction findRemovedLocationsForDirective(oldDirective, newDirective) {\n  var removedLocations = [];\n  var newLocationSet = new Set(newDirective.locations);\n\n  oldDirective.locations.forEach(function (oldLocation) {\n    if (!newLocationSet.has(oldLocation)) {\n      removedLocations.push(oldLocation);\n    }\n  });\n\n  return removedLocations;\n}\n\nfunction findRemovedDirectiveLocations(oldSchema, newSchema) {\n  var removedLocations = [];\n  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);\n\n  newSchema.getDirectives().forEach(function (newDirective) {\n    var oldDirective = oldSchemaDirectiveMap[newDirective.name];\n    if (!oldDirective) {\n      return;\n    }\n\n    findRemovedLocationsForDirective(oldDirective, newDirective).forEach(function (location) {\n      removedLocations.push({\n        type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n        description: location + ' was removed from ' + newDirective.name\n      });\n    });\n  });\n\n  return removedLocations;\n}\n\nfunction getDirectiveMapForSchema(schema) {\n  return (0, _keyMap2.default)(schema.getDirectives(), function (dir) {\n    return dir.name;\n  });\n}\n\nfunction getArgumentMapForDirective(directive) {\n  return (0, _keyMap2.default)(directive.args, function (arg) {\n    return arg.name;\n  });\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","findRemovedTypes","oldSchema","newSchema","oldTypeMap","getTypeMap","newTypeMap","breakingChanges","Object","keys","forEach","typeName","push","type","BreakingChangeType","TYPE_REMOVED","description","findTypesThatChangedKind","oldType","newType","constructor","TYPE_CHANGED_KIND","typeKindName","findArgChanges","dangerousChanges","_definition","isObjectType","isInterfaceType","oldTypeFields","getFields","newTypeFields","fieldName","args","oldArgDef","newArgDef","find","arg","name","isChangeSafeForInputObjectFieldOrFieldArg","isSafe","undefined","defaultValue","DangerousChangeType","ARG_DEFAULT_VALUE_CHANGE","ARG_CHANGED_KIND","toString","ARG_REMOVED","isNonNullType","NON_NULL_ARG_ADDED","NULLABLE_ARG_ADDED","isScalarType","isUnionType","isEnumType","isInputObjectType","TypeError","findFieldsThatChangedTypeOnObjectOrInterfaceTypes","oldTypeFieldsDef","newTypeFieldsDef","oldFieldType","newFieldType","isChangeSafeForObjectOrInterfaceField","oldFieldTypeString","isNamedType","newFieldTypeString","FIELD_CHANGED_KIND","FIELD_REMOVED","findFieldsThatChangedTypeOnInputObjectTypes","NON_NULL_INPUT_FIELD_ADDED","NULLABLE_INPUT_FIELD_ADDED","ofType","isListType","findTypesRemovedFromUnions","typesRemovedFromUnion","typeNamesInNewUnion","create","getTypes","TYPE_REMOVED_FROM_UNION","findTypesAddedToUnions","typesAddedToUnion","typeNamesInOldUnion","TYPE_ADDED_TO_UNION","findValuesRemovedFromEnums","valuesRemovedFromEnums","valuesInNewEnum","getValues","value","VALUE_REMOVED_FROM_ENUM","findValuesAddedToEnums","valuesAddedToEnums","valuesInOldEnum","VALUE_ADDED_TO_ENUM","findInterfacesRemovedFromObjectTypes","oldInterfaces","getInterfaces","newInterfaces","oldInterface","some","int","INTERFACE_REMOVED_FROM_OBJECT","findInterfacesAddedToObjectTypes","interfacesAddedToObjectTypes","newInterface","INTERFACE_ADDED_TO_OBJECT","findRemovedDirectives","removedDirectives","newSchemaDirectiveMap","getDirectiveMapForSchema","getDirectives","directive","DIRECTIVE_REMOVED","findRemovedArgsForDirective","oldDirective","newDirective","removedArgs","newArgMap","getArgumentMapForDirective","findRemovedDirectiveArgs","removedDirectiveArgs","oldSchemaDirectiveMap","DIRECTIVE_ARG_REMOVED","findAddedArgsForDirective","addedArgs","oldArgMap","findAddedNonNullDirectiveArgs","addedNonNullableArgs","NON_NULL_DIRECTIVE_ARG_ADDED","findRemovedLocationsForDirective","removedLocations","newLocationSet","Set","locations","oldLocation","has","findRemovedDirectiveLocations","location","DIRECTIVE_LOCATION_REMOVED","schema","_keyMap2","default","dir","defineProperty","findBreakingChanges","concat","findDangerousChanges","_keyMap","__esModule"]
}
