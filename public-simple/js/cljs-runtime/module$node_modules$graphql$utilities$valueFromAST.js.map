{
"version":3,
"file":"module$node_modules$graphql$utilities$valueFromAST.js",
"lineCount":98,
"mappings":"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",
"sources":["node_modules/graphql/utilities/valueFromAST.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$valueFromAST\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.valueFromAST = valueFromAST;\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _objectValues = require('../jsutils/objectValues');\n\nvar _objectValues2 = _interopRequireDefault(_objectValues);\n\nvar _kinds = require('../language/kinds');\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\nfunction valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if ((0, _definition.isNonNullType)(type)) {\n    if (valueNode.kind === _kinds.Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === _kinds.Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (valueNode.kind === _kinds.Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n    if (!variables || (0, _isInvalid2.default)(variables[variableName])) {\n      // No valid return value.\n      return;\n    }\n    // Note: we're not doing any checking that this variable is correct. We're\n    // assuming that this query has been validated and the variable usage here\n    // is of the correct type.\n    return variables[variableName];\n  }\n\n  if ((0, _definition.isListType)(type)) {\n    var itemType = type.ofType;\n    if (valueNode.kind === _kinds.Kind.LIST) {\n      var coercedValues = [];\n      var itemNodes = valueNode.values;\n      for (var i = 0; i < itemNodes.length; i++) {\n        if (isMissingVariable(itemNodes[i], variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if ((0, _definition.isNonNullType)(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNodes[i], itemType, variables);\n          if ((0, _isInvalid2.default)(itemValue)) {\n            return; // Invalid: intentionally return no value.\n          }\n          coercedValues.push(itemValue);\n        }\n      }\n      return coercedValues;\n    }\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n    if ((0, _isInvalid2.default)(coercedValue)) {\n      return; // Invalid: intentionally return no value.\n    }\n    return [coercedValue];\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (valueNode.kind !== _kinds.Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n    var coercedObj = Object.create(null);\n    var fieldNodes = (0, _keyMap2.default)(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n    var fields = (0, _objectValues2.default)(type.getFields());\n    for (var _i = 0; _i < fields.length; _i++) {\n      var field = fields[_i];\n      var fieldNode = fieldNodes[field.name];\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (!(0, _isInvalid2.default)(field.defaultValue)) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if ((0, _definition.isNonNullType)(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n        continue;\n      }\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n      if ((0, _isInvalid2.default)(fieldValue)) {\n        return; // Invalid: intentionally return no value.\n      }\n      coercedObj[field.name] = fieldValue;\n    }\n    return coercedObj;\n  }\n\n  if ((0, _definition.isEnumType)(type)) {\n    if (valueNode.kind !== _kinds.Kind.ENUM) {\n      return; // Invalid: intentionally return no value.\n    }\n    var enumValue = type.getValue(valueNode.value);\n    if (!enumValue) {\n      return; // Invalid: intentionally return no value.\n    }\n    return enumValue.value;\n  }\n\n  if ((0, _definition.isScalarType)(type)) {\n    // Scalars fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result = void 0;\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n    if ((0, _isInvalid2.default)(result)) {\n      return; // Invalid: intentionally return no value.\n    }\n    return result;\n  }\n\n  /* istanbul ignore next */\n  throw new Error('Unknown type: ' + type + '.');\n}\n\n// Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === _kinds.Kind.VARIABLE && (!variables || (0, _isInvalid2.default)(variables[valueNode.name.value]));\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","_interopRequireDefault","obj","__esModule","default","valueFromAST","valueNode","type","variables","_definition","isNonNullType","kind","_kinds","Kind","NULL","ofType","VARIABLE","variableName","name","value","_isInvalid2","isListType","itemType","LIST","coercedValues","itemNodes","values","i","length","isMissingVariable","push","itemValue","coercedValue","isInputObjectType","OBJECT","coercedObj","Object","create","fieldNodes","_keyMap2","fields","field","_objectValues2","getFields","_i","fieldNode","defaultValue","fieldValue","isEnumType","ENUM","enumValue","getValue","isScalarType","result","parseLiteral","_error","Error","defineProperty","_keyMap","_isInvalid","_objectValues"]
}
