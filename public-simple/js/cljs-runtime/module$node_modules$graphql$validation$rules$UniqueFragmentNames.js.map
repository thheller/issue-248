{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueFragmentNames.js",
"lineCount":19,
"mappings":"AAAAA,cAAA,iEAAA,GAAqF,QAAQ,CAACC,CAAD,EAAQC,CAAR,EAAgBC,CAAhB,EAAwBC,CAAxB,EAA+BC,CAA/B,CAAwC;AAoBrIC,UAASA,EAA4B,CAACC,CAAD,CAAW;AAC9C,WAAO,wCAAP,GAAkDA,CAAlD,GAA6D,IAA7D;AAD8C;AAjBhDC,QAAAC,eAAA,CAAsBJ,CAAtB,EAA+B,YAA/B,EAA6C,CAC3CK,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAL,GAAAC,6BAAA,GAAuCA,CAAvC;AACAD,GAAAM,oBAAA,GAsBAA,QAA4B,CAACC,CAAD,CAAU;AACpC,QAAIC,IAAqBL,MAAAM,OAAA,CAAc,IAAd,CAAzB;AACA,WAAO,CACLC,oBAAqBA,QAA4B,EAAG;AAClD,aAAO,CAAA,CAAP;AADkD,KAD/C,EAILC,mBAAoBA,QAA2B,CAACC,CAAD,CAAO;AACpD,UAAIC,IAAeD,CAAAE,KAAAT,MAAnB;AACIG,OAAA,CAAmBK,CAAnB,CAAJ,GACEN,CAAAQ,YAAA,CAAoB,IAAIC,CAAAC,aAAJ,CAAwBhB,CAAA,CAA6BY,CAA7B,CAAxB,EAAoE,CAACL,CAAA,CAAmBK,CAAnB,CAAD,EAAmCD,CAAAE,KAAnC,CAApE,CAApB,CADF,GAGEN,CAAA,CAAmBK,CAAnB,CAHF,GAGqCD,CAAAE,KAHrC;AAKA,aAAO,CAAA,CAAP;AAPoD,KAJjD,CAAP;AAFoC,GAtBtC;AAEA,MAAIE,IAASlB,CAAA,CAAQ,yCAAR,CAAb;AATqI,CAArI;;",
"sources":["node_modules/graphql/validation/rules/UniqueFragmentNames.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueFragmentNames\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateFragmentNameMessage = duplicateFragmentNameMessage;\nexports.UniqueFragmentNames = UniqueFragmentNames;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction duplicateFragmentNameMessage(fragName) {\n  return 'There can be only one fragment named \"' + fragName + '\".';\n}\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\nfunction UniqueFragmentNames(context) {\n  var knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var fragmentName = node.name.value;\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new _error.GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n      return false;\n    }\n  };\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","duplicateFragmentNameMessage","fragName","Object","defineProperty","value","UniqueFragmentNames","context","knownFragmentNames","create","OperationDefinition","FragmentDefinition","node","fragmentName","name","reportError","_error","GraphQLError"]
}
