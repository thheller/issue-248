{
"version":3,
"file":"module$node_modules$graphql$validation$rules$UniqueDirectivesPerLocation.js",
"lineCount":20,
"mappings":"AAAAA,cAAA,yEAAA,GAA6F,QAAQ,CAACC,CAAD,EAAQC,CAAR,EAAgBC,CAAhB,EAAwBC,CAAxB,EAA+BC,CAA/B,CAAwC;AAoB7IC,UAASA,EAAyB,CAACC,CAAD,CAAgB;AAChD,WAAO,iBAAP,GAA2BA,CAA3B,GAA2E,2CAA3E;AADgD;AAjBlDC,QAAAC,eAAA,CAAsBJ,CAAtB,EAA+B,YAA/B,EAA6C,CAC3CK,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAL,GAAAC,0BAAA,GAAoCA,CAApC;AACAD,GAAAM,4BAAA,GAuBAA,QAAoC,CAACC,CAAD,CAAU;AAC5C,WAAO,CAILC,MAAOA,QAAc,CAACC,CAAD,CAAO;AAG1B,UADIC,CACJ,GADiBD,CAAAC,WACjB,CAAgB;AACd,YAAIC,IAAkBR,MAAAS,OAAA,CAAc,IAAd,CAAtB;AACAF,SAAAG,QAAA,CAAmB,QAAS,CAACC,CAAD,CAAY;AACtC,cAAIZ,IAAgBY,CAAAC,KAAAV,MAApB;AACIM,WAAA,CAAgBT,CAAhB,CAAJ,GACEK,CAAAS,YAAA,CAAoB,IAAIC,CAAAC,aAAJ,CAAwBjB,CAAA,CAA0BC,CAA1B,CAAxB,EAAkE,CAACS,CAAA,CAAgBT,CAAhB,CAAD,EAAiCY,CAAjC,CAAlE,CAApB,CADF,GAGEH,CAAA,CAAgBT,CAAhB,CAHF,GAGmCY,CAHnC;AAFsC,SAAxC,CAAA;AAFc;AAHU,KAJvB,CAAP;AAD4C,GAvB9C;AAEA,MAAIG,IAASnB,CAAA,CAAQ,yCAAR,CAAb;AAT6I,CAA7I;;",
"sources":["node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$UniqueDirectivesPerLocation\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.duplicateDirectiveMessage = duplicateDirectiveMessage;\nexports.UniqueDirectivesPerLocation = UniqueDirectivesPerLocation;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction duplicateDirectiveMessage(directiveName) {\n  return 'The directive \"' + directiveName + '\" can only be used once at ' + 'this location.';\n}\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all directives at a given location\n * are uniquely named.\n */\nfunction UniqueDirectivesPerLocation(context) {\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      var directives = node.directives;\n      if (directives) {\n        var knownDirectives = Object.create(null);\n        directives.forEach(function (directive) {\n          var directiveName = directive.name.value;\n          if (knownDirectives[directiveName]) {\n            context.reportError(new _error.GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));\n          } else {\n            knownDirectives[directiveName] = directive;\n          }\n        });\n      }\n    }\n  };\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","duplicateDirectiveMessage","directiveName","Object","defineProperty","value","UniqueDirectivesPerLocation","context","enter","node","directives","knownDirectives","create","forEach","directive","name","reportError","_error","GraphQLError"]
}
