shadow$provide.module$node_modules$graphql$utilities$schemaPrinter = function(e, r, b, u, a) {
  function g(a) {
    return a && a.__esModule ? a : {default:a};
  }
  function c(a) {
    return !(0, B.isSpecifiedScalarType)(a) && !(0, v.isIntrospectionType)(a);
  }
  function k(a, b, c, d) {
    b = a.getDirectives().filter(b);
    var e = a.getTypeMap();
    c = (0, J.default)(e).sort(function(a, b) {
      return a.name.localeCompare(b.name);
    }).filter(c);
    return [l(a)].concat(b.map(function(a) {
      return n(d, a) + "directive @" + a.name + z(d, a.args) + " on " + a.locations.join(" | ");
    }), c.map(function(a) {
      return f(a, d);
    })).filter(Boolean).join("\n\n") + "\n";
  }
  function l(a) {
    var b;
    b = (b = a.getQueryType()) && "Query" !== b.name ? !1 : (b = a.getMutationType()) && "Mutation" !== b.name ? !1 : (b = a.getSubscriptionType()) && "Subscription" !== b.name ? !1 : !0;
    if (!b) {
      b = [];
      var c = a.getQueryType();
      c && b.push("  query: " + c.name);
      (c = a.getMutationType()) && b.push("  mutation: " + c.name);
      (a = a.getSubscriptionType()) && b.push("  subscription: " + a.name);
      return "schema {\n" + b.join("\n") + "\n}";
    }
  }
  function f(a, b) {
    if ((0, F.isScalarType)(a)) {
      return n(b, a) + ("scalar " + a.name);
    }
    if ((0, F.isObjectType)(a)) {
      return h(a, b);
    }
    if ((0, F.isInterfaceType)(a)) {
      return n(b, a) + ("interface " + a.name + " {\n") + q(b, a) + "\n}";
    }
    if ((0, F.isUnionType)(a)) {
      return n(b, a) + ("union " + a.name + " \x3d " + a.getTypes().join(" | "));
    }
    if ((0, F.isEnumType)(a)) {
      return n(b, a) + ("enum " + a.name + " {\n") + m(a.getValues(), b) + "\n}";
    }
    if ((0, F.isInputObjectType)(a)) {
      return d(a, b);
    }
    throw Error("Unknown type: " + a + ".");
  }
  function h(a, b) {
    var c = a.getInterfaces();
    c = c.length ? " implements " + c.map(function(a) {
      return a.name;
    }).join(" \x26 ") : "";
    return n(b, a) + ("type " + a.name + c + " {\n") + q(b, a) + "\n}";
  }
  function m(a, b) {
    return a.map(function(a, c) {
      return n(b, a, "  ", !c) + "  " + a.name + y(a);
    }).join("\n");
  }
  function d(a, b) {
    var c = (0, J.default)(a.getFields());
    return n(b, a) + ("input " + a.name + " {\n") + c.map(function(a, c) {
      return n(b, a, "  ", !c) + "  " + t(a);
    }).join("\n") + "\n}";
  }
  function q(a, b) {
    return (0, J.default)(b.getFields()).map(function(b, c) {
      return n(a, b, "  ", !c) + "  " + b.name + z(a, b.args, "  ") + ": " + String(b.type) + y(b);
    }).join("\n");
  }
  function z(a, b) {
    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : "";
    return 0 === b.length ? "" : b.every(function(a) {
      return !a.description;
    }) ? "(" + b.map(t).join(", ") + ")" : "(\n" + b.map(function(b, d) {
      return n(a, b, "  " + c, !d) + "  " + c + t(b);
    }).join("\n") + "\n" + c + ")";
  }
  function t(a) {
    var b = a.name + ": " + String(a.type);
    (0, C.default)(a.defaultValue) || (b += " \x3d " + (0, M.print)((0, H.astFromValue)(a.defaultValue, a.type)));
    return b;
  }
  function y(a) {
    if (!a.isDeprecated) {
      return "";
    }
    a = a.deprecationReason;
    return (0, p.default)(a) || "" === a || a === x.DEFAULT_DEPRECATION_REASON ? " @deprecated" : " @deprecated(reason: " + (0, M.print)((0, H.astFromValue)(a, B.GraphQLString)) + ")";
  }
  function n(a, b) {
    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : "", d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : !0;
    if (!b.description) {
      return "";
    }
    for (var f = 120 - c.length, e = [], h = b.description.split("\n"), g = 0; g < h.length; g++) {
      if ("" === h[g]) {
        e.push(h[g]);
      } else {
        var k = h[g];
        if (k.length < f + 5) {
          var l = [k];
        } else {
          if (l = k.split(new RegExp("((?: |^).{15," + (f - 40) + "}(?\x3d |$))")), 4 > l.length) {
            l = [k];
          } else {
            k = [l[0] + l[1] + l[2]];
            for (var m = 3; m < l.length; m += 2) {
              k.push(l[m].slice(1) + l[m + 1]);
            }
            l = k;
          }
        }
        for (k = 0; k < l.length; k++) {
          e.push(l[k]);
        }
      }
    }
    if (a && a.commentDescriptions) {
      d = c && !d ? "\n" : "";
      for (f = 0; f < e.length; f++) {
        d = "" === e[f] ? d + (c + "#\n") : d + (c + "# " + e[f] + "\n");
      }
      return d;
    }
    d = c && !d ? "\n" + c + '"""' : c + '"""';
    if (1 === e.length && 70 > e[0].length && '"' !== e[0][e[0].length - 1]) {
      return d + e[0].replace(/"""/g, '\\"""') + '"""\n';
    }
    (f = " " === e[0][0] || "\t" === e[0][0]) || (d += "\n");
    for (h = 0; h < e.length; h++) {
      0 === h && f || (d += c), d += e[h].replace(/"""/g, '\\"""') + "\n";
    }
    return d + (c + '"""\n');
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.printSchema = function(a, b) {
    return k(a, function(a) {
      return !(0, x.isSpecifiedDirective)(a);
    }, c, b);
  };
  a.printIntrospectionSchema = function(a, b) {
    return k(a, x.isSpecifiedDirective, v.isIntrospectionType, b);
  };
  a.printType = f;
  e = b("module$node_modules$graphql$jsutils$isNullish");
  var p = g(e);
  e = b("module$node_modules$graphql$jsutils$isInvalid");
  var C = g(e);
  e = b("module$node_modules$graphql$jsutils$objectValues");
  var J = g(e), H = b("module$node_modules$graphql$utilities$astFromValue"), M = b("module$node_modules$graphql$language$printer"), F = b("module$node_modules$graphql$type$definition"), B = b("module$node_modules$graphql$type$scalars"), x = b("module$node_modules$graphql$type$directives"), v = b("module$node_modules$graphql$type$introspection");
};

//# sourceMappingURL=module$node_modules$graphql$utilities$schemaPrinter.js.map
