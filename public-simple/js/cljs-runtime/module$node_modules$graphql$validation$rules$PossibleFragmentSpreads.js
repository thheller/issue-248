shadow$provide.module$node_modules$graphql$validation$rules$PossibleFragmentSpreads = function(e, r, b, u, a) {
  function g(a, b, c) {
    return 'Fragment "' + a + '" cannot be spread here as objects of ' + ('type "' + String(b) + '" can never be of type "' + String(c) + '".');
  }
  function c(a, b) {
    return "Fragment cannot be spread here as objects of " + ('type "' + String(a) + '" can never be of type "' + String(b) + '".');
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.typeIncompatibleSpreadMessage = g;
  a.typeIncompatibleAnonSpreadMessage = c;
  a.PossibleFragmentSpreads = function(a) {
    return {InlineFragment:function(b) {
      var d = a.getType(), f = a.getParentType();
      (0, h.isCompositeType)(d) && (0, h.isCompositeType)(f) && !(0, l.doTypesOverlap)(a.getSchema(), d, f) && a.reportError(new k.GraphQLError(c(f, d), [b]));
    }, FragmentSpread:function(b) {
      var d = b.name.value, c;
      a: {
        if (c = a.getFragment(d)) {
          if (c = (0, f.typeFromAST)(a.getSchema(), c.typeCondition), (0, h.isCompositeType)(c)) {
            break a;
          }
        }
        c = void 0;
      }
      var e = a.getParentType();
      c && e && !(0, l.doTypesOverlap)(a.getSchema(), c, e) && a.reportError(new k.GraphQLError(g(d, e, c), [b]));
    }};
  };
  var k = b("module$node_modules$graphql$error$index"), l = b("module$node_modules$graphql$utilities$typeComparators"), f = b("module$node_modules$graphql$utilities$typeFromAST"), h = b("module$node_modules$graphql$type$definition");
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$PossibleFragmentSpreads.js.map
