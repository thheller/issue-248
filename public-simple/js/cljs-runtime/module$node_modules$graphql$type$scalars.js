shadow$provide.module$node_modules$graphql$type$scalars = function(e, r, b, u, a) {
  function g(a) {
    if ("" === a) {
      throw new TypeError("Int cannot represent non 32-bit signed integer value: (empty string)");
    }
    var d = Number(a);
    if (d !== d || 2147483647 < d || -2147483648 > d) {
      throw new TypeError("Int cannot represent non 32-bit signed integer value: " + String(a));
    }
    var b = Math.floor(d);
    if (b !== d) {
      throw new TypeError("Int cannot represent non-integer value: " + String(a));
    }
    return b;
  }
  function c(a) {
    if ("" === a) {
      throw new TypeError("Float cannot represent non numeric value: (empty string)");
    }
    var d = Number(a);
    if (d === d) {
      return d;
    }
    throw new TypeError("Float cannot represent non numeric value: " + String(a));
  }
  function k(a) {
    if (Array.isArray(a)) {
      throw new TypeError("String cannot represent an array value: [" + String(a) + "]");
    }
    return String(a);
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.specifiedScalarTypes = a.GraphQLID = a.GraphQLBoolean = a.GraphQLString = a.GraphQLFloat = a.GraphQLInt = void 0;
  a.isSpecifiedScalarType = function(a) {
    return (0, l.isNamedType)(a) && (a.name === d.name || a.name === h.name || a.name === m.name || a.name === q.name || a.name === z.name);
  };
  var l = b("module$node_modules$graphql$type$definition"), f = b("module$node_modules$graphql$language$kinds"), h = a.GraphQLInt = new l.GraphQLScalarType({name:"Int", description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ", serialize:g, parseValue:g, parseLiteral:function(a) {
    if (a.kind === f.Kind.INT && (a = parseInt(a.value, 10), 2147483647 >= a && -2147483648 <= a)) {
      return a;
    }
  }}), m = a.GraphQLFloat = new l.GraphQLScalarType({name:"Float", description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ", serialize:c, parseValue:c, parseLiteral:function(a) {
    return a.kind === f.Kind.FLOAT || a.kind === f.Kind.INT ? parseFloat(a.value) : void 0;
  }}), d = a.GraphQLString = new l.GraphQLScalarType({name:"String", description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.", serialize:k, parseValue:k, parseLiteral:function(a) {
    return a.kind === f.Kind.STRING ? a.value : void 0;
  }}), q = a.GraphQLBoolean = new l.GraphQLScalarType({name:"Boolean", description:"The `Boolean` scalar type represents `true` or `false`.", serialize:Boolean, parseValue:Boolean, parseLiteral:function(a) {
    return a.kind === f.Kind.BOOLEAN ? a.value : void 0;
  }}), z = a.GraphQLID = new l.GraphQLScalarType({name:"ID", description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.', serialize:String, parseValue:String, parseLiteral:function(a) {
    return a.kind === f.Kind.STRING || a.kind === f.Kind.INT ? a.value : void 0;
  }});
  a.specifiedScalarTypes = [d, h, m, q, z];
};

//# sourceMappingURL=module$node_modules$graphql$type$scalars.js.map
