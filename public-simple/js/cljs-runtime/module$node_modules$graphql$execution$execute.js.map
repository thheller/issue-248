{
"version":3,
"file":"module$node_modules$graphql$execution$execute.js",
"lineCount":381,
"mappings":"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",
"sources":["node_modules/graphql/execution/execute.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$execution$execute\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultFieldResolver = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  strict\n                                                                                                                                                                                                                                                                               */\n\nexports.execute = execute;\nexports.responsePathAsArray = responsePathAsArray;\nexports.addPath = addPath;\nexports.assertValidExecutionArguments = assertValidExecutionArguments;\nexports.buildExecutionContext = buildExecutionContext;\nexports.getOperationRootType = getOperationRootType;\nexports.collectFields = collectFields;\nexports.buildResolveInfo = buildResolveInfo;\nexports.resolveFieldValueOrError = resolveFieldValueOrError;\nexports.getFieldDef = getFieldDef;\n\nvar _iterall = require('iterall');\n\nvar _error = require('../error');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isPromise = require('../jsutils/isPromise');\n\nvar _isPromise2 = _interopRequireDefault(_isPromise);\n\nvar _memoize = require('../jsutils/memoize3');\n\nvar _memoize2 = _interopRequireDefault(_memoize);\n\nvar _promiseForObject = require('../jsutils/promiseForObject');\n\nvar _promiseForObject2 = _interopRequireDefault(_promiseForObject);\n\nvar _promiseReduce = require('../jsutils/promiseReduce');\n\nvar _promiseReduce2 = _interopRequireDefault(_promiseReduce);\n\nvar _typeFromAST = require('../utilities/typeFromAST');\n\nvar _kinds = require('../language/kinds');\n\nvar _values = require('./values');\n\nvar _definition = require('../type/definition');\n\nvar _schema = require('../type/schema');\n\nvar _introspection = require('../type/introspection');\n\nvar _directives = require('../type/directives');\n\nvar _validate = require('../type/validate');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n\n/**\n * The result of GraphQL execution.\n *\n *   - `errors` is included when any errors occurred as a non-empty array.\n *   - `data` is the result of a successful execution of the query.\n */\n\n\n/**\n * Implements the \"Evaluating requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\n/* eslint-disable no-redeclare */\nfunction execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues);\n\n  // If a valid context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n  var context = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n\n  // Return early errors if execution context failed.\n  if (Array.isArray(context)) {\n    return { errors: context };\n  }\n\n  // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  var data = executeOperation(context, context.operation, rootValue);\n  return buildResponse(context, data);\n}\n\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\nfunction buildResponse(context, data) {\n  if ((0, _isPromise2.default)(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(context, resolved);\n    });\n  }\n  return context.errors.length === 0 ? { data: data } : { errors: context.errors, data: data };\n}\n\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\nfunction responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n  return flattened.reverse();\n}\n\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\nfunction addPath(prev, key) {\n  return { prev: prev, key: key };\n}\n\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\nfunction assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? (0, _invariant2.default)(0, 'Must provide document') : void 0;\n\n  // If the schema used for execution is invalid, throw an error.\n  (0, _validate.assertValidSchema)(schema);\n\n  // Variables, if provided, must be an object.\n  !(!rawVariableValues || (typeof rawVariableValues === 'undefined' ? 'undefined' : _typeof(rawVariableValues)) === 'object') ? (0, _invariant2.default)(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\nfunction buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation = void 0;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n    switch (definition.kind) {\n      case _kinds.Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n        break;\n      case _kinds.Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      errors.push(new _error.GraphQLError('Unknown operation named \"' + operationName + '\".'));\n    } else {\n      errors.push(new _error.GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new _error.GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));\n  }\n\n  var variableValues = void 0;\n  if (operation) {\n    var coercedVariableValues = (0, _values.getVariableValues)(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n\n  if (errors.length !== 0) {\n    return errors;\n  }\n\n  !operation ? (0, _invariant2.default)(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? (0, _invariant2.default)(0, 'Has variables if no errors.') : void 0;\n\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n\n  var path = undefined;\n\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n    if ((0, _isPromise2.default)(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nfunction getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      var queryType = schema.getQueryType();\n      if (!queryType) {\n        throw new _error.GraphQLError('Schema does not define the required query root type.', [operation]);\n      }\n      return queryType;\n    case 'mutation':\n      var mutationType = schema.getMutationType();\n      if (!mutationType) {\n        throw new _error.GraphQLError('Schema is not configured for mutations.', [operation]);\n      }\n      return mutationType;\n    case 'subscription':\n      var subscriptionType = schema.getSubscriptionType();\n      if (!subscriptionType) {\n        throw new _error.GraphQLError('Schema is not configured for subscriptions.', [operation]);\n      }\n      return subscriptionType;\n    default:\n      throw new _error.GraphQLError('Can only execute queries, mutations and subscriptions.', [operation]);\n  }\n}\n\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return (0, _promiseReduce2.default)(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    if ((0, _isPromise2.default)(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var containsPromise = false;\n\n  var finalResults = Object.keys(fields).reduce(function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    results[responseName] = result;\n    if (!containsPromise && (0, _isPromise2.default)(result)) {\n      containsPromise = true;\n    }\n    return results;\n  }, Object.create(null));\n\n  // If there are no promises, we can just return the object\n  if (!containsPromise) {\n    return finalResults;\n  }\n\n  // Otherwise, results is a map from field name to the result\n  // of resolving that field, which is possibly a promise. Return\n  // a promise that will return this same map, but with any\n  // promises replaced with the values they resolved to.\n  return (0, _promiseForObject2.default)(finalResults);\n}\n\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\nfunction collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n    switch (selection.kind) {\n      case _kinds.Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        var name = getFieldEntryKey(selection);\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n        fields[name].push(selection);\n        break;\n      case _kinds.Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n      case _kinds.Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n  return fields;\n}\n\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, exeContext.variableValues);\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, exeContext.variableValues);\n  if (include && include.if === false) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Determines if a fragment is applicable to the given type.\n */\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n  if (!typeConditionNode) {\n    return true;\n  }\n  var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);\n  if (conditionalType === type) {\n    return true;\n  }\n  if ((0, _definition.isAbstractType)(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n  return false;\n}\n\n/**\n * Implements the logic to compute the key of a given field's entry\n */\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);\n\n  // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nfunction buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldNodes[0].name.value,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\n\n// Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\nfunction resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues);\n\n    // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n    var context = exeContext.contextValue;\n\n    var result = resolveFn(source, args, context, info);\n    return (0, _isPromise2.default)(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n}\n\n// Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\nfunction asErrorInstance(error) {\n  return error instanceof Error ? error : new Error(error || undefined);\n}\n\n// This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if ((0, _definition.isNonNullType)(returnType)) {\n    return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n  try {\n    var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n    if ((0, _isPromise2.default)(completed)) {\n      // If `completeValueWithLocatedError` returned a rejected promise, log\n      // the rejection error and resolve to null.\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return completed;\n  } catch (error) {\n    // If `completeValueWithLocatedError` returned abruptly (threw an error),\n    // log the error and return null.\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n\n// This is a small wrapper around completeValue which annotates errors with\n// location information.\nfunction completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    if ((0, _isPromise2.default)(completed)) {\n      return completed.then(undefined, function (error) {\n        return Promise.reject((0, _error.locatedError)(asErrorInstance(error), fieldNodes, responsePathAsArray(path)));\n      });\n    }\n    return completed;\n  } catch (error) {\n    throw (0, _error.locatedError)(asErrorInstance(error), fieldNodes, responsePathAsArray(path));\n  }\n}\n\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is a Promise, apply-lift over completeValue.\n  if ((0, _isPromise2.default)(result)) {\n    return result.then(function (resolved) {\n      return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n    });\n  }\n\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  }\n\n  // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n  if ((0, _definition.isNonNullType)(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n    if (completed === null) {\n      throw new Error('Cannot return null for non-nullable field ' + info.parentType.name + '.' + info.fieldName + '.');\n    }\n    return completed;\n  }\n\n  // If result value is null-ish (null, undefined, or NaN) then return null.\n  if ((0, _isNullish2.default)(result)) {\n    return null;\n  }\n\n  // If field type is List, complete each item in the list with the inner type\n  if ((0, _definition.isListType)(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n  if ((0, _definition.isLeafType)(returnType)) {\n    return completeLeafValue(returnType, result);\n  }\n\n  // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n  if ((0, _definition.isAbstractType)(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // If field type is Object, execute and complete all sub-selections.\n  if ((0, _definition.isObjectType)(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // Not reachable. All possible output types have been considered.\n  /* istanbul ignore next */\n  throw new Error('Cannot complete value of unexpected type \"' + String(returnType) + '\".');\n}\n\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !(0, _iterall.isCollection)(result) ? (0, _invariant2.default)(0, 'Expected Iterable, but did not find one for field ' + info.parentType.name + '.' + info.fieldName + '.') : void 0;\n\n  // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  (0, _iterall.forEach)(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && (0, _isPromise2.default)(completedItem)) {\n      containsPromise = true;\n    }\n    completedResults.push(completedItem);\n  });\n\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? (0, _invariant2.default)(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n  if ((0, _isInvalid2.default)(serializedResult)) {\n    throw new Error('Expected a value of type \"' + String(returnType) + '\" but ' + ('received: ' + String(result)));\n  }\n  return serializedResult;\n}\n\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n\n  if ((0, _isPromise2.default)(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!(0, _definition.isObjectType)(runtimeType)) {\n    throw new _error.GraphQLError('Abstract type ' + returnType.name + ' must resolve to an Object type at ' + ('runtime for field ' + info.parentType.name + '.' + info.fieldName + ' with ') + ('value \"' + String(result) + '\", received \"' + String(runtimeType) + '\". ') + ('Either the ' + returnType.name + ' type should provide a \"resolveType\" ') + 'function or each possible types should provide an ' + '\"isTypeOf\" function.', fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new _error.GraphQLError('Runtime Object type \"' + runtimeType.name + '\" is not a possible type ' + ('for \"' + returnType.name + '\".'), fieldNodes);\n  }\n\n  return runtimeType;\n}\n\n/**\n * Complete an Object value by executing all sub-selections.\n */\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if ((0, _isPromise2.default)(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new _error.GraphQLError('Expected value of type \"' + returnType.name + '\" but got: ' + String(result) + '.', fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\n/**\n * A memoized collection of relevant subfields in the context of the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\nvar collectSubfields = (0, _memoize2.default)(_collectSubfields);\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n  return subFieldNodes;\n}\n\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\nfunction defaultResolveTypeFn(value, context, info, abstractType) {\n  // First, look for `__typename`.\n  if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.__typename === 'string') {\n    return value.__typename;\n  }\n\n  // Otherwise, test each possible type.\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, context, info);\n\n      if ((0, _isPromise2.default)(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context.\n */\nvar defaultFieldResolver = exports.defaultFieldResolver = function defaultFieldResolver(source, args, context, info) {\n  // ensure source is a value for which property access is acceptable.\n  if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, context, info);\n    }\n    return property;\n  }\n};\n\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\nfunction getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.SchemaMetaFieldDef;\n  } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.TypeMetaFieldDef;\n  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n  return parentType.getFields()[fieldName];\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","_interopRequireDefault","obj","__esModule","default","executeImpl","schema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","assertValidExecutionArguments","context","buildExecutionContext","Array","isArray","errors","data","executeOperation","operation","buildResponse","_isPromise2","then","resolved","length","responsePathAsArray","path","flattened","curr","push","key","prev","reverse","addPath","rawVariableValues","_invariant2","_validate","assertValidSchema","_typeof","hasMultipleAssumedOperations","fragments","Object","create","i","definitions","definition","kind","_kinds","Kind","OPERATION_DEFINITION","name","value","FRAGMENT_DEFINITION","_error","GraphQLError","coercedVariableValues","_values","getVariableValues","variableDefinitions","apply","coerced","defaultFieldResolver","exeContext","type","getOperationRootType","fields","collectFields","selectionSet","result","executeFieldsSerially","undefined","executeFields","error","Promise","resolve","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType","parentType","sourceValue","_promiseReduce2","keys","results","responseName","fieldNodes","fieldPath","resolveField","resolvedResult","containsPromise","finalResults","reduce","_promiseForObject2","runtimeType","visitedFragmentNames","selections","selection","FIELD","shouldIncludeNode","alias","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","fragment","node","skip","getDirectiveValues","_directives","GraphQLSkipDirective","if","include","GraphQLIncludeDirective","typeConditionNode","typeCondition","conditionalType","_typeFromAST","typeFromAST","_definition","isAbstractType","isPossibleType","source","fieldDef","getFieldDef","fieldNode","resolveFn","info","buildResolveInfo","resolveFieldValueOrError","completeValueCatchingError","fieldName","returnType","args","getArgumentValues","asErrorInstance","Error","isNonNullType","completeValueWithLocatedError","completed","completeValue","reject","locatedError","ofType","_isNullish2","isListType","completeListValue","isLeafType","completeLeafValue","completeAbstractValue","isObjectType","completeObjectValue","String","_iterall","isCollection","itemType","completedResults","forEach","item","index","completedItem","all","serialize","serializedResult","_isInvalid2","resolveType","defaultResolveTypeFn","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","getType","isTypeOf","resolvedIsTypeOf","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","collectSubfields","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","isTypeOfResult","isTypeOfResults","_i","_introspection","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","getFields","defineProperty","Symbol","iterator","constructor","prototype","execute","argsOrSchema","arguments","_invariant","_isInvalid","_isNullish","_isPromise","_memoize","_memoize2","_promiseForObject","_promiseReduce","_collectSubfields","exports.defaultFieldResolver","property"]
}
