{
"version":3,
"file":"module$node_modules$graphql$utilities$separateOperations.js",
"lineCount":39,
"mappings":"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",
"sources":["node_modules/graphql/utilities/separateOperations.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$separateOperations\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.separateOperations = separateOperations;\n\nvar _visitor = require('../language/visitor');\n\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\nfunction separateOperations(documentAST) {\n  var operations = [];\n  var fragments = Object.create(null);\n  var positions = new Map();\n  var depGraph = Object.create(null);\n  var fromName = void 0;\n  var idx = 0;\n\n  // Populate metadata and build a dependency graph.\n  (0, _visitor.visit)(documentAST, {\n    OperationDefinition: function OperationDefinition(node) {\n      fromName = opName(node);\n      operations.push(node);\n      positions.set(node, idx++);\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fromName = node.name.value;\n      fragments[fromName] = node;\n      positions.set(node, idx++);\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var toName = node.name.value;\n      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;\n    }\n  });\n\n  // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n  var separatedDocumentASTs = Object.create(null);\n  operations.forEach(function (operation) {\n    var operationName = opName(operation);\n    var dependencies = Object.create(null);\n    collectTransitiveDependencies(dependencies, depGraph, operationName);\n\n    // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n    var definitions = [operation];\n    Object.keys(dependencies).forEach(function (name) {\n      definitions.push(fragments[name]);\n    });\n    definitions.sort(function (n1, n2) {\n      return (positions.get(n1) || 0) - (positions.get(n2) || 0);\n    });\n\n    separatedDocumentASTs[operationName] = {\n      kind: 'Document',\n      definitions: definitions\n    };\n  });\n\n  return separatedDocumentASTs;\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n\n// Provides the empty string for anonymous operations.\nfunction opName(operation) {\n  return operation.name ? operation.name.value : '';\n}\n\n// From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  var immediateDeps = depGraph[fromName];\n  if (immediateDeps) {\n    Object.keys(immediateDeps).forEach(function (toName) {\n      if (!collected[toName]) {\n        collected[toName] = true;\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    });\n  }\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","collectTransitiveDependencies","collected","depGraph","fromName","immediateDeps","Object","keys","forEach","toName","defineProperty","value","separateOperations","documentAST","operations","fragments","create","positions","Map","idx","_visitor","visit","OperationDefinition","node","name","push","set","FragmentDefinition","FragmentSpread","separatedDocumentASTs","operation","operationName","dependencies","definitions","sort","n1","n2","get","kind"]
}
