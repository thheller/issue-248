{
"version":3,
"file":"module$node_modules$graphql$type$scalars.js",
"lineCount":52,
"mappings":"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",
"sources":["node_modules/graphql/type/scalars.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$type$scalars\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.specifiedScalarTypes = exports.GraphQLID = exports.GraphQLBoolean = exports.GraphQLString = exports.GraphQLFloat = exports.GraphQLInt = undefined;\nexports.isSpecifiedScalarType = isSpecifiedScalarType;\n\nvar _definition = require('./definition');\n\nvar _kinds = require('../language/kinds');\n\n// As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction coerceInt(value) {\n  if (value === '') {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: (empty string)');\n  }\n  var num = Number(value);\n  if (num !== num || num > MAX_INT || num < MIN_INT) {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: ' + String(value));\n  }\n  var int = Math.floor(num);\n  if (int !== num) {\n    throw new TypeError('Int cannot represent non-integer value: ' + String(value));\n  }\n  return int;\n}\n\nvar GraphQLInt = exports.GraphQLInt = new _definition.GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: coerceInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === _kinds.Kind.INT) {\n      var num = parseInt(ast.value, 10);\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n    return undefined;\n  }\n});\n\nfunction coerceFloat(value) {\n  if (value === '') {\n    throw new TypeError('Float cannot represent non numeric value: (empty string)');\n  }\n  var num = Number(value);\n  if (num === num) {\n    return num;\n  }\n  throw new TypeError('Float cannot represent non numeric value: ' + String(value));\n}\n\nvar GraphQLFloat = exports.GraphQLFloat = new _definition.GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: coerceFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.FLOAT || ast.kind === _kinds.Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n});\n\nfunction coerceString(value) {\n  if (Array.isArray(value)) {\n    throw new TypeError('String cannot represent an array value: [' + String(value) + ']');\n  }\n  return String(value);\n}\n\nvar GraphQLString = exports.GraphQLString = new _definition.GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',\n  serialize: coerceString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.STRING ? ast.value : undefined;\n  }\n});\n\nvar GraphQLBoolean = exports.GraphQLBoolean = new _definition.GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: Boolean,\n  parseValue: Boolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\n\nvar GraphQLID = exports.GraphQLID = new _definition.GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',\n  serialize: String,\n  parseValue: String,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === _kinds.Kind.STRING || ast.kind === _kinds.Kind.INT ? ast.value : undefined;\n  }\n});\n\nvar specifiedScalarTypes = exports.specifiedScalarTypes = [GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID];\n\nfunction isSpecifiedScalarType(type) {\n  return (0, _definition.isNamedType)(type) && (\n  // Would prefer to use specifiedScalarTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === GraphQLString.name || type.name === GraphQLInt.name || type.name === GraphQLFloat.name || type.name === GraphQLBoolean.name || type.name === GraphQLID.name);\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","coerceInt","value","TypeError","num","Number","MAX_INT","MIN_INT","String","int","Math","floor","coerceFloat","coerceString","Array","isArray","Object","defineProperty","specifiedScalarTypes","GraphQLID","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","undefined","isSpecifiedScalarType","type","_definition","isNamedType","name","_kinds","GraphQLScalarType","description","serialize","parseValue","parseLiteral","ast","kind","Kind","INT","parseInt","FLOAT","parseFloat","STRING","Boolean","BOOLEAN"]
}
