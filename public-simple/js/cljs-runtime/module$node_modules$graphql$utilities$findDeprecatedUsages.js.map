{
"version":3,
"file":"module$node_modules$graphql$utilities$findDeprecatedUsages.js",
"lineCount":30,
"mappings":"AAAAA,cAAA,2DAAA,GAA+E,QAAQ,CAACC,CAAD,EAAQC,CAAR,EAAgBC,CAAhB,EAAwBC,CAAxB,EAA+BC,CAA/B,CAAwC;AAG/HC,QAAAC,eAAA,CAAsBF,CAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAH,GAAAI,qBAAA,GAiBAA,QAA6B,CAACC,CAAD,EAASC,CAAT,CAAc;AACzC,QAAIC,IAAS,EAAb,EACIC,IAAW,IAAIC,CAAAC,SAAJ,CAAuBL,CAAvB,CADf;AAGA,KAAC,CAAA,EAAGM,CAAAC,MAAJ,EAAoBN,CAApB,EAAyB,CAAC,CAAA,EAAGK,CAAAE,kBAAJ,EAAgCL,CAAhC,EAA0C,CACjEM,MAAOA,QAAc,CAACC,CAAD,CAAO;AAC1B,UAAIC,IAAWR,CAAAS,YAAA,EAAf;AACA,UAAID,CAAJ,IAAgBA,CAAAE,aAAhB,CAAuC;AACrC,YAAIC,IAAaX,CAAAY,cAAA,EAAjB;AACA,YAAID,CAAJ,CAAgB;AACd,cAAIE,IAASL,CAAAM,kBAAb;AACAf,WAAAgB,KAAA,CAAY,IAAIC,CAAAC,aAAJ,CAA+B,YAA/B,GAA8CN,CAAAO,KAA9C,GAAgE,GAAhE,GAAsEV,CAAAU,KAAtE,GAAsF,iBAAtF,IAA2GL,CAAA,GAAS,GAAT,GAAeA,CAAf,GAAwB,EAAnI,GAAwI,CAACN,CAAD,CAAxI,CAAZ,CAAA;AAFc;AAFqB;AAFb,KADqC,EAWjEY,UAAWA,QAAkB,CAACZ,CAAD,CAAO;AAClC,UAAIa,IAAUpB,CAAAqB,aAAA,EAAd;AACA,UAAID,CAAJ,IAAeA,CAAAV,aAAf,CAAqC;AACnC,YAAIY,IAAO,CAAC,CAAA,EAAGC,CAAAC,aAAJ,EAA8BxB,CAAAyB,aAAA,EAA9B,CAAX;AACA,YAAIH,CAAJ,CAAU;AACR,cAAIT,IAASO,CAAAN,kBAAb;AACAf,WAAAgB,KAAA,CAAY,IAAIC,CAAAC,aAAJ,CAA+B,iBAA/B,GAAmDK,CAAAJ,KAAnD,GAA+D,GAA/D,GAAqEE,CAAAF,KAArE,GAAoF,iBAApF,IAAyGL,CAAA,GAAS,GAAT,GAAeA,CAAf,GAAwB,EAAjI,GAAsI,CAACN,CAAD,CAAtI,CAAZ,CAAA;AAFQ;AAFyB;AAFH,KAX6B,CAA1C,CAAzB,CAAA;AAuBA,WAAOR,CAAP;AA3ByC,GAjB3C;AAEA,MAAIiB,IAAgB1B,CAAA,CAAQ,gDAAR,CAApB,EAEIa,IAAWb,CAAA,CAAQ,8CAAR,CAFf,EAIIiC,IAAcjC,CAAA,CAAQ,6CAAR,CAJlB;AAMcA,GAAA,CAAQ,yCAAR,CAAA;AAEd,MAAIW,IAAYX,CAAA,CAAQ,gDAAR,CAAhB;AAhB+H,CAA/H;;",
"sources":["node_modules/graphql/utilities/findDeprecatedUsages.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$utilities$findDeprecatedUsages\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findDeprecatedUsages = findDeprecatedUsages;\n\nvar _GraphQLError = require('../error/GraphQLError');\n\nvar _visitor = require('../language/visitor');\n\nvar _definition = require('../type/definition');\n\nvar _schema = require('../type/schema');\n\nvar _TypeInfo = require('./TypeInfo');\n\n/**\n * A validation rule which reports deprecated usages.\n *\n * Returns a list of GraphQLError instances describing each deprecated use.\n */\nfunction findDeprecatedUsages(schema, ast) {\n  var errors = [];\n  var typeInfo = new _TypeInfo.TypeInfo(schema);\n\n  (0, _visitor.visit)(ast, (0, _visitor.visitWithTypeInfo)(typeInfo, {\n    Field: function Field(node) {\n      var fieldDef = typeInfo.getFieldDef();\n      if (fieldDef && fieldDef.isDeprecated) {\n        var parentType = typeInfo.getParentType();\n        if (parentType) {\n          var reason = fieldDef.deprecationReason;\n          errors.push(new _GraphQLError.GraphQLError('The field ' + parentType.name + '.' + fieldDef.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var enumVal = typeInfo.getEnumValue();\n      if (enumVal && enumVal.isDeprecated) {\n        var type = (0, _definition.getNamedType)(typeInfo.getInputType());\n        if (type) {\n          var reason = enumVal.deprecationReason;\n          errors.push(new _GraphQLError.GraphQLError('The enum value ' + type.name + '.' + enumVal.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));\n        }\n      }\n    }\n  }));\n\n  return errors;\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   *  strict\n   */\n};"],
"names":["shadow$provide","global","process","require","module","exports","Object","defineProperty","value","findDeprecatedUsages","schema","ast","errors","typeInfo","_TypeInfo","TypeInfo","_visitor","visit","visitWithTypeInfo","Field","node","fieldDef","getFieldDef","isDeprecated","parentType","getParentType","reason","deprecationReason","push","_GraphQLError","GraphQLError","name","EnumValue","enumVal","getEnumValue","type","_definition","getNamedType","getInputType"]
}
