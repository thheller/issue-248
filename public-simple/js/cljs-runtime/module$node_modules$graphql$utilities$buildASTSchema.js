shadow$provide.module$node_modules$graphql$utilities$buildASTSchema = function(e, r, b, u, a) {
  function g(a) {
    return a && a.__esModule ? a : {default:a};
  }
  function c(a, b) {
    return b.kind === p.Kind.LIST_TYPE ? (0, C.GraphQLList)(c(a, b.type)) : b.kind === p.Kind.NON_NULL_TYPE ? (a = c(a, b.type), (0, C.GraphQLNonNull)((0, C.assertNullableType)(a))) : a;
  }
  function k(a) {
    for (; a.kind === p.Kind.LIST_TYPE || a.kind === p.Kind.NON_NULL_TYPE;) {
      a = a.type;
    }
    return a;
  }
  function l(a, b) {
    function c(a) {
      var b = {};
      a.operationTypes.forEach(function(a) {
        var c = a.type.name.value, d = a.operation;
        if (b[d]) {
          throw Error("Must provide only one " + d + " type in schema.");
        }
        if (!e[c]) {
          throw Error("Specified " + d + ' type "' + c + '" not found in document.');
        }
        b[d] = a.type;
      });
      return b;
    }
    if (!a || a.kind !== p.Kind.DOCUMENT) {
      throw Error("Must provide a document ast.");
    }
    for (var d = void 0, f = [], e = Object.create(null), h = [], g = 0; g < a.definitions.length; g++) {
      var k = a.definitions[g];
      switch(k.kind) {
        case p.Kind.SCHEMA_DEFINITION:
          if (d) {
            throw Error("Must provide only one schema definition.");
          }
          d = k;
          break;
        case p.Kind.SCALAR_TYPE_DEFINITION:
        case p.Kind.OBJECT_TYPE_DEFINITION:
        case p.Kind.INTERFACE_TYPE_DEFINITION:
        case p.Kind.ENUM_TYPE_DEFINITION:
        case p.Kind.UNION_TYPE_DEFINITION:
        case p.Kind.INPUT_OBJECT_TYPE_DEFINITION:
          var l = k.name.value;
          if (e[l]) {
            throw Error('Type "' + l + '" was defined more than once.');
          }
          f.push(k);
          e[l] = k;
          break;
        case p.Kind.DIRECTIVE_DEFINITION:
          h.push(k);
      }
    }
    a = d ? c(d) : {query:e.Query, mutation:e.Mutation, subscription:e.Subscription};
    var v = new B(e, b, function(a) {
      throw Error('Type "' + a.name.value + '" not found in document.');
    });
    f = v.buildTypes(f);
    h = h.map(function(a) {
      return v.buildDirective(a);
    });
    h.some(function(a) {
      return "skip" === a.name;
    }) || h.push(J.GraphQLSkipDirective);
    h.some(function(a) {
      return "include" === a.name;
    }) || h.push(J.GraphQLIncludeDirective);
    h.some(function(a) {
      return "deprecated" === a.name;
    }) || h.push(J.GraphQLDeprecatedDirective);
    return new F.GraphQLSchema({query:a.query ? v.buildType(a.query) : null, mutation:a.mutation ? v.buildType(a.mutation) : null, subscription:a.subscription ? v.buildType(a.subscription) : null, types:f, directives:h, astNode:d, assumeValid:b && b.assumeValid, allowedLegacyNames:b && b.allowedLegacyNames});
  }
  function f(a) {
    return (a = (0, n.getDirectiveValues)(J.GraphQLDeprecatedDirective, a)) && a.reason;
  }
  function h(a, b) {
    if (a.description) {
      return a.description.value;
    }
    if (b && b.commentDescriptions) {
      if (b = a.loc) {
        a = [];
        for (b = b.startToken.prev; b && b.kind === t.TokenKind.COMMENT && b.next && b.prev && b.line + 1 === b.next.line && b.line !== b.prev.line;) {
          a.push(String(b.value)), b = b.prev;
        }
        a = a.reverse().join("\n");
      } else {
        a = void 0;
      }
      if (void 0 !== a) {
        return (0, z.default)("\n" + a);
      }
    }
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.ASTDefinitionBuilder = void 0;
  a.buildASTSchema = l;
  a.getDescription = h;
  a.buildSchema = function(a, b) {
    return l((0, y.parse)(a, b), b);
  };
  e = b("module$node_modules$graphql$jsutils$keyMap");
  var m = g(e);
  e = b("module$node_modules$graphql$jsutils$keyValMap");
  var d = g(e), q = b("module$node_modules$graphql$utilities$valueFromAST");
  e = b("module$node_modules$graphql$language$blockStringValue");
  var z = g(e), t = b("module$node_modules$graphql$language$lexer"), y = b("module$node_modules$graphql$language$parser"), n = b("module$node_modules$graphql$execution$values"), p = b("module$node_modules$graphql$language$kinds"), C = b("module$node_modules$graphql$type$definition"), J = b("module$node_modules$graphql$type$directives"), H = b("module$node_modules$graphql$type$introspection"), M = b("module$node_modules$graphql$type$scalars"), F = b("module$node_modules$graphql$type$schema"), B = 
  a.ASTDefinitionBuilder = function() {
    function a(b, c, d) {
      if (!(this instanceof a)) {
        throw new TypeError("Cannot call a class as a function");
      }
      this._typeDefinitionsMap = b;
      this._options = c;
      this._resolveType = d;
      this._cache = (0, m.default)(M.specifiedScalarTypes.concat(H.introspectionTypes), function(a) {
        return a.name;
      });
    }
    a.prototype.buildTypes = function(a) {
      var b = this;
      return a.map(function(a) {
        return b.buildType(a);
      });
    };
    a.prototype.buildType = function(a) {
      var b = a.name.value;
      if (!this._cache[b]) {
        if (a.kind === p.Kind.NAMED_TYPE) {
          var c = this._typeDefinitionsMap[b];
          this._cache[b] = c ? this._makeSchemaDef(c) : this._resolveType(a);
        } else {
          this._cache[b] = this._makeSchemaDef(a);
        }
      }
      return this._cache[b];
    };
    a.prototype._buildWrappedType = function(a) {
      var b = this.buildType(k(a));
      return c(b, a);
    };
    a.prototype.buildDirective = function(a) {
      return new J.GraphQLDirective({name:a.name.value, description:h(a, this._options), locations:a.locations.map(function(a) {
        return a.value;
      }), args:a.arguments && this._makeInputValues(a.arguments), astNode:a});
    };
    a.prototype.buildField = function(a) {
      return {type:this._buildWrappedType(a.type), description:h(a, this._options), args:a.arguments && this._makeInputValues(a.arguments), deprecationReason:f(a), astNode:a};
    };
    a.prototype._makeSchemaDef = function(a) {
      switch(a.kind) {
        case p.Kind.OBJECT_TYPE_DEFINITION:
          return this._makeTypeDef(a);
        case p.Kind.INTERFACE_TYPE_DEFINITION:
          return this._makeInterfaceDef(a);
        case p.Kind.ENUM_TYPE_DEFINITION:
          return this._makeEnumDef(a);
        case p.Kind.UNION_TYPE_DEFINITION:
          return this._makeUnionDef(a);
        case p.Kind.SCALAR_TYPE_DEFINITION:
          return this._makeScalarDef(a);
        case p.Kind.INPUT_OBJECT_TYPE_DEFINITION:
          return this._makeInputObjectDef(a);
        default:
          throw Error('Type kind "' + a.kind + '" not supported.');
      }
    };
    a.prototype._makeTypeDef = function(a) {
      var b = this, c = a.interfaces;
      return new C.GraphQLObjectType({name:a.name.value, description:h(a, this._options), fields:function() {
        return b._makeFieldDefMap(a);
      }, interfaces:c ? function() {
        return b.buildTypes(c);
      } : [], astNode:a});
    };
    a.prototype._makeFieldDefMap = function(a) {
      var b = this;
      return a.fields ? (0, d.default)(a.fields, function(a) {
        return a.name.value;
      }, function(a) {
        return b.buildField(a);
      }) : {};
    };
    a.prototype._makeInputValues = function(a) {
      var b = this;
      return (0, d.default)(a, function(a) {
        return a.name.value;
      }, function(a) {
        var c = b._buildWrappedType(a.type);
        return {type:c, description:h(a, b._options), defaultValue:(0, q.valueFromAST)(a.defaultValue, c), astNode:a};
      });
    };
    a.prototype._makeInterfaceDef = function(a) {
      var b = this;
      return new C.GraphQLInterfaceType({name:a.name.value, description:h(a, this._options), fields:function() {
        return b._makeFieldDefMap(a);
      }, astNode:a});
    };
    a.prototype._makeEnumDef = function(a) {
      var b = this;
      return new C.GraphQLEnumType({name:a.name.value, description:h(a, this._options), values:a.values ? (0, d.default)(a.values, function(a) {
        return a.name.value;
      }, function(a) {
        return {description:h(a, b._options), deprecationReason:f(a), astNode:a};
      }) : {}, astNode:a});
    };
    a.prototype._makeUnionDef = function(a) {
      return new C.GraphQLUnionType({name:a.name.value, description:h(a, this._options), types:a.types ? this.buildTypes(a.types) : [], astNode:a});
    };
    a.prototype._makeScalarDef = function(a) {
      return new C.GraphQLScalarType({name:a.name.value, description:h(a, this._options), astNode:a, serialize:function(a) {
        return a;
      }});
    };
    a.prototype._makeInputObjectDef = function(a) {
      var b = this;
      return new C.GraphQLInputObjectType({name:a.name.value, description:h(a, this._options), fields:function() {
        return a.fields ? b._makeInputValues(a.fields) : {};
      }, astNode:a});
    };
    return a;
  }();
};

//# sourceMappingURL=module$node_modules$graphql$utilities$buildASTSchema.js.map
