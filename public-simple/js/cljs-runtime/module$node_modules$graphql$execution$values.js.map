{
"version":3,
"file":"module$node_modules$graphql$execution$values.js",
"lineCount":93,
"mappings":"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",
"sources":["node_modules/graphql/execution/values.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$execution$values\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getVariableValues = getVariableValues;\nexports.getArgumentValues = getArgumentValues;\nexports.getDirectiveValues = getDirectiveValues;\n\nvar _error = require('../error');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _coerceValue = require('../utilities/coerceValue');\n\nvar _typeFromAST = require('../utilities/typeFromAST');\n\nvar _valueFromAST = require('../utilities/valueFromAST');\n\nvar _kinds = require('../language/kinds');\n\nvar _printer = require('../language/printer');\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction getVariableValues(schema, varDefNodes, inputs) {\n  var errors = [];\n  var coercedValues = {};\n  for (var i = 0; i < varDefNodes.length; i++) {\n    var varDefNode = varDefNodes[i];\n    var varName = varDefNode.variable.name.value;\n    var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);\n    if (!(0, _definition.isInputType)(varType)) {\n      errors.push(new _error.GraphQLError('Variable \"$' + varName + '\" expected value of type ' + ('\"' + (0, _printer.print)(varDefNode.type) + '\" which cannot be used as an input type.'), [varDefNode.type]));\n    } else {\n      var value = inputs[varName];\n      if ((0, _isInvalid2.default)(value)) {\n        if ((0, _definition.isNonNullType)(varType)) {\n          errors.push(new _error.GraphQLError('Variable \"$' + varName + '\" of required type ' + ('\"' + String(varType) + '\" was not provided.'), [varDefNode]));\n        } else if (varDefNode.defaultValue) {\n          coercedValues[varName] = (0, _valueFromAST.valueFromAST)(varDefNode.defaultValue, varType);\n        }\n      } else {\n        var _coerced = (0, _coerceValue.coerceValue)(value, varType, varDefNode);\n        var coercionErrors = _coerced.errors;\n        if (coercionErrors) {\n          (function () {\n            var messagePrelude = 'Variable \"$' + varName + '\" got invalid value ' + JSON.stringify(value) + '; ';\n            coercionErrors.forEach(function (error) {\n              error.message = messagePrelude + error.message;\n            });\n            errors.push.apply(errors, coercionErrors);\n          })();\n        } else {\n          coercedValues[varName] = _coerced.value;\n        }\n      }\n    }\n  }\n  return errors.length === 0 ? { errors: undefined, coerced: coercedValues } : { errors: errors, coerced: undefined };\n}\n\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getArgumentValues(def, node, variableValues) {\n  var coercedValues = {};\n  var argDefs = def.args;\n  var argNodes = node.arguments;\n  if (!argDefs || !argNodes) {\n    return coercedValues;\n  }\n  var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {\n    return arg.name.value;\n  });\n  for (var i = 0; i < argDefs.length; i++) {\n    var argDef = argDefs[i];\n    var name = argDef.name;\n    var argType = argDef.type;\n    var argumentNode = argNodeMap[name];\n    var defaultValue = argDef.defaultValue;\n    if (!argumentNode) {\n      if (!(0, _isInvalid2.default)(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if ((0, _definition.isNonNullType)(argType)) {\n        throw new _error.GraphQLError('Argument \"' + name + '\" of required type ' + ('\"' + String(argType) + '\" was not provided.'), [node]);\n      }\n    } else if (argumentNode.value.kind === _kinds.Kind.VARIABLE) {\n      var variableName = argumentNode.value.name.value;\n      if (variableValues && Object.prototype.hasOwnProperty.call(variableValues, variableName) && !(0, _isInvalid2.default)(variableValues[variableName])) {\n        // Note: this does not check that this variable value is correct.\n        // This assumes that this query has been validated and the variable\n        // usage here is of the correct type.\n        coercedValues[name] = variableValues[variableName];\n      } else if (!(0, _isInvalid2.default)(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if ((0, _definition.isNonNullType)(argType)) {\n        throw new _error.GraphQLError('Argument \"' + name + '\" of required type \"' + String(argType) + '\" was ' + ('provided the variable \"$' + variableName + '\" which was not provided ') + 'a runtime value.', [argumentNode.value]);\n      }\n    } else {\n      var valueNode = argumentNode.value;\n      var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);\n      if ((0, _isInvalid2.default)(coercedValue)) {\n        // Note: ValuesOfCorrectType validation should catch this before\n        // execution. This is a runtime check to ensure execution does not\n        // continue with an invalid argument value.\n        throw new _error.GraphQLError('Argument \"' + name + '\" has invalid value ' + (0, _printer.print)(valueNode) + '.', [argumentNode.value]);\n      }\n      coercedValues[name] = coercedValue;\n    }\n  }\n  return coercedValues;\n}\n\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getDirectiveValues(directiveDef, node, variableValues) {\n  var directiveNode = node.directives && (0, _find2.default)(node.directives, function (directive) {\n    return directive.name.value === directiveDef.name;\n  });\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","_interopRequireDefault","obj","__esModule","default","getArgumentValues","def","node","variableValues","coercedValues","argDefs","args","argNodes","arguments","argNodeMap","_keyMap2","arg","name","value","i","length","argDef","argType","type","argumentNode","defaultValue","kind","_kinds","Kind","VARIABLE","variableName","Object","prototype","hasOwnProperty","call","_isInvalid2","_definition","isNonNullType","_error","GraphQLError","String","valueNode","coercedValue","_valueFromAST","valueFromAST","_printer","print","defineProperty","getVariableValues","schema","varDefNodes","inputs","errors","varDefNode","varName","variable","varType","_typeFromAST","typeFromAST","isInputType","push","_coerced","_coerceValue","coerceValue","coercionErrors","messagePrelude","JSON","stringify","forEach","error","message","apply","undefined","coerced","getDirectiveValues","directiveDef","directiveNode","directives","_find2","directive","_find","_isInvalid","_keyMap"]
}
