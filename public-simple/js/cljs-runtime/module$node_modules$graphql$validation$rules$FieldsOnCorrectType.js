shadow$provide.module$node_modules$graphql$validation$rules$FieldsOnCorrectType = function(e, r, b, u, a) {
  function g(a, b, c, h) {
    a = 'Cannot query field "' + a + '" on type "' + b + '".';
    0 !== c.length ? (c = (0, f.default)(c), a += " Did you mean to use an inline fragment on " + c + "?") : 0 !== h.length && (a += " Did you mean " + (0, f.default)(h) + "?");
    return a;
  }
  function c(a, b, c) {
    if ((0, h.isAbstractType)(b)) {
      var d = [], f = Object.create(null);
      a.getPossibleTypes(b).forEach(function(a) {
        a.getFields()[c] && (d.push(a.name), a.getInterfaces().forEach(function(a) {
          a.getFields()[c] && (f[a.name] = (f[a.name] || 0) + 1);
        }));
      });
      return Object.keys(f).sort(function(a, b) {
        return f[b] - f[a];
      }).concat(d);
    }
    return [];
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.undefinedFieldMessage = g;
  a.FieldsOnCorrectType = function(a) {
    return {Field:function(b) {
      var d = a.getParentType();
      if (d && !a.getFieldDef()) {
        var f = a.getSchema(), e = b.name.value;
        f = c(f, d, e);
        if (0 !== f.length) {
          var m = [];
        } else {
          (0, h.isObjectType)(d) || (0, h.isInterfaceType)(d) ? (m = Object.keys(d.getFields()), m = (0, l.default)(e, m)) : m = [];
        }
        a.reportError(new k.GraphQLError(g(e, d.name, f, m), [b]));
      }
    }};
  };
  var k = b("module$node_modules$graphql$error$index"), l = (e = b("module$node_modules$graphql$jsutils$suggestionList")) && e.__esModule ? e : {default:e}, f = (e = b("module$node_modules$graphql$jsutils$quotedOrList")) && e.__esModule ? e : {default:e}, h = b("module$node_modules$graphql$type$definition");
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$FieldsOnCorrectType.js.map
