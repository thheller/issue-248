{
"version":3,
"file":"module$node_modules$graphql$validation$rules$FieldsOnCorrectType.js",
"lineCount":40,
"mappings":"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",
"sources":["node_modules/graphql/validation/rules/FieldsOnCorrectType.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$validation$rules$FieldsOnCorrectType\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.undefinedFieldMessage = undefinedFieldMessage;\nexports.FieldsOnCorrectType = FieldsOnCorrectType;\n\nvar _error = require('../../error');\n\nvar _suggestionList = require('../../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nvar _quotedOrList = require('../../jsutils/quotedOrList');\n\nvar _quotedOrList2 = _interopRequireDefault(_quotedOrList);\n\nvar _definition = require('../../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var message = 'Cannot query field \"' + fieldName + '\" on type \"' + type + '\".';\n  if (suggestedTypeNames.length !== 0) {\n    var suggestions = (0, _quotedOrList2.default)(suggestedTypeNames);\n    message += ' Did you mean to use an inline fragment on ' + suggestions + '?';\n  } else if (suggestedFieldNames.length !== 0) {\n    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedFieldNames) + '?';\n  }\n  return message;\n}\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n      if (type) {\n        var fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value;\n          // First determine if there are any suggested types to condition on.\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName);\n          // If there are no suggested types, then perhaps this was a typo?\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName);\n\n          // Report an error, including helpful suggestions.\n          context.reportError(new _error.GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));\n        }\n      }\n    }\n  };\n}\n\n/**\n * Go through all of the implementations of type, as well as the interfaces\n * that they implement. If any of those types include the provided field,\n * suggest them, sorted by how often the type is referenced,  starting\n * with Interfaces.\n */\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if ((0, _definition.isAbstractType)(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n    schema.getPossibleTypes(type).forEach(function (possibleType) {\n      if (!possibleType.getFields()[fieldName]) {\n        return;\n      }\n      // This object type defines this field.\n      suggestedObjectTypes.push(possibleType.name);\n      possibleType.getInterfaces().forEach(function (possibleInterface) {\n        if (!possibleInterface.getFields()[fieldName]) {\n          return;\n        }\n        // This interface type defines this field.\n        interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n      });\n    });\n\n    // Suggest interface types based on how common they are.\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    });\n\n    // Suggest both interface and object types.\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  }\n\n  // Otherwise, must be an Object type, which does not have possible fields.\n  return [];\n}\n\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return (0, _suggestionList2.default)(fieldName, possibleFieldNames);\n  }\n  // Otherwise, must be a Union type, which does not define fields.\n  return [];\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","undefinedFieldMessage","fieldName","type","suggestedTypeNames","suggestedFieldNames","message","length","suggestions","_quotedOrList2","default","getSuggestedTypeNames","schema","_definition","isAbstractType","suggestedObjectTypes","interfaceUsageCount","Object","create","getPossibleTypes","forEach","possibleType","getFields","push","name","getInterfaces","possibleInterface","keys","sort","suggestedInterfaceTypes","a","b","concat","defineProperty","value","FieldsOnCorrectType","context","Field","node","getParentType","getFieldDef","fieldDef","getSchema","isObjectType","isInterfaceType","possibleFieldNames","_suggestionList2","reportError","_error","GraphQLError","_suggestionList","__esModule","_quotedOrList"]
}
