shadow$provide.module$node_modules$graphql$language$visitor = function(e, r, b, u, a) {
  function g(a) {
    return !(!a || "string" !== typeof a.kind);
  }
  function c(a, b, c) {
    var d = a[b];
    if (d) {
      if (!c && "function" === typeof d) {
        return d;
      }
      b = c ? d.leave : d.enter;
      if ("function" === typeof b) {
        return b;
      }
    } else {
      if (a = c ? a.leave : a.enter) {
        if ("function" === typeof a) {
          return a;
        }
        b = a[b];
        if ("function" === typeof b) {
          return b;
        }
      }
    }
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.visit = function(a, b) {
    var f = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : k, d = void 0, h = Array.isArray(a), e = [a], t = -1, y = [], n = void 0, p = [], C = [], J = a;
    do {
      t++;
      var H = t === e.length, M = H && 0 !== y.length;
      if (H) {
        var F = 0 === C.length ? void 0 : p[p.length - 1];
        var B = n;
        n = C.pop();
        if (M) {
          if (h) {
            B = B.slice();
          } else {
            e = {};
            for (var x in B) {
              B.hasOwnProperty(x) && (e[x] = B[x]);
            }
            B = e;
          }
          for (t = e = 0; t < y.length; t++) {
            var v = y[t][0], I = y[t][1];
            h && (v -= e);
            h && null === I ? (B.splice(v, 1), e++) : B[v] = I;
          }
        }
        t = d.index;
        e = d.keys;
        y = d.edits;
        h = d.inArray;
        d = d.prev;
      } else {
        F = n ? h ? t : e[t] : void 0;
        B = n ? n[F] : J;
        if (null === B || void 0 === B) {
          continue;
        }
        n && p.push(F);
      }
      v = void 0;
      if (!Array.isArray(B)) {
        if (!g(B)) {
          throw Error("Invalid AST Node: " + JSON.stringify(B));
        }
        if (I = c(b, B.kind, H)) {
          v = I.call(b, B, F, n, p, C);
          if (v === l) {
            break;
          }
          if (!1 === v) {
            if (!H) {
              p.pop();
              continue;
            }
          } else {
            if (void 0 !== v && (y.push([F, v]), !H)) {
              if (g(v)) {
                B = v;
              } else {
                p.pop();
                continue;
              }
            }
          }
        }
      }
      void 0 === v && M && y.push([F, B]);
      H ? p.pop() : (d = {inArray:h, index:t, keys:e, edits:y, prev:d}, e = (h = Array.isArray(B)) ? B : f[B.kind] || [], t = -1, y = [], n && C.push(n), n = B);
    } while (void 0 !== d);
    0 !== y.length && (J = y[y.length - 1][1]);
    return J;
  };
  a.visitInParallel = function(a) {
    var b = Array(a.length);
    return {enter:function(f) {
      for (var d = 0; d < a.length; d++) {
        if (!b[d]) {
          var h = c(a[d], f.kind, !1);
          if (h) {
            if (h = h.apply(a[d], arguments), !1 === h) {
              b[d] = f;
            } else {
              if (h === l) {
                b[d] = l;
              } else {
                if (void 0 !== h) {
                  return h;
                }
              }
            }
          }
        }
      }
    }, leave:function(f) {
      for (var d = 0; d < a.length; d++) {
        if (b[d]) {
          b[d] === f && (b[d] = null);
        } else {
          var h = c(a[d], f.kind, !0);
          if (h) {
            if (h = h.apply(a[d], arguments), h === l) {
              b[d] = l;
            } else {
              if (void 0 !== h && !1 !== h) {
                return h;
              }
            }
          }
        }
      }
    }};
  };
  a.visitWithTypeInfo = function(a, b) {
    return {enter:function(f) {
      a.enter(f);
      var d = c(b, f.kind, !1);
      if (d) {
        return d = d.apply(b, arguments), void 0 !== d && (a.leave(f), g(d) && a.enter(d)), d;
      }
    }, leave:function(f) {
      var d = c(b, f.kind, !0), h = void 0;
      d && (h = d.apply(b, arguments));
      a.leave(f);
      return h;
    }};
  };
  a.getVisitFn = c;
  var k = a.QueryDocumentKeys = {Name:[], Document:["definitions"], OperationDefinition:["name", "variableDefinitions", "directives", "selectionSet"], VariableDefinition:["variable", "type", "defaultValue"], Variable:["name"], SelectionSet:["selections"], Field:["alias", "name", "arguments", "directives", "selectionSet"], Argument:["name", "value"], FragmentSpread:["name", "directives"], InlineFragment:["typeCondition", "directives", "selectionSet"], FragmentDefinition:["name", "variableDefinitions", 
  "typeCondition", "directives", "selectionSet"], IntValue:[], FloatValue:[], StringValue:[], BooleanValue:[], NullValue:[], EnumValue:[], ListValue:["values"], ObjectValue:["fields"], ObjectField:["name", "value"], Directive:["name", "arguments"], NamedType:["name"], ListType:["type"], NonNullType:["type"], SchemaDefinition:["directives", "operationTypes"], OperationTypeDefinition:["type"], ScalarTypeDefinition:["description", "name", "directives"], ObjectTypeDefinition:["description", "name", "interfaces", 
  "directives", "fields"], FieldDefinition:["description", "name", "arguments", "type", "directives"], InputValueDefinition:["description", "name", "type", "defaultValue", "directives"], InterfaceTypeDefinition:["description", "name", "directives", "fields"], UnionTypeDefinition:["description", "name", "directives", "types"], EnumTypeDefinition:["description", "name", "directives", "values"], EnumValueDefinition:["description", "name", "directives"], InputObjectTypeDefinition:["description", "name", 
  "directives", "fields"], ScalarTypeExtension:["name", "directives"], ObjectTypeExtension:["name", "interfaces", "directives", "fields"], InterfaceTypeExtension:["name", "directives", "fields"], UnionTypeExtension:["name", "directives", "types"], EnumTypeExtension:["name", "directives", "values"], InputObjectTypeExtension:["name", "directives", "fields"], DirectiveDefinition:["description", "name", "arguments", "locations"]}, l = a.BREAK = {};
};

//# sourceMappingURL=module$node_modules$graphql$language$visitor.js.map
