shadow$provide.module$node_modules$graphql$utilities$lexicographicSortSchema = function(e, r, b, u, a) {
  function g(a, b) {
    var c = Object.create(null), d = k(Object.keys(a), function(a) {
      return a;
    }), f = !0, e = !1, h = void 0;
    try {
      for (var g = d[Symbol.iterator](), l; !(f = (l = g.next()).done); f = !0) {
        var m = l.value, n = a[m];
        c[m] = b ? b(n) : n;
      }
    } catch (I) {
      e = !0, h = I;
    } finally {
      try {
        !f && g.return && g.return();
      } finally {
        if (e) {
          throw h;
        }
      }
    }
    return c;
  }
  function c(a) {
    return k(a, function(a) {
      return a.name;
    });
  }
  function k(a, b) {
    return a.slice().sort(function(a, c) {
      a = b(a);
      c = b(c);
      return a.localeCompare(c);
    });
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  var l = Object.assign || function(a) {
    for (var b = 1; b < arguments.length; b++) {
      var c = arguments[b], d;
      for (d in c) {
        Object.prototype.hasOwnProperty.call(c, d) && (a[d] = c[d]);
      }
    }
    return a;
  };
  a.lexicographicSortSchema = function(a) {
    function b(a) {
      return (0, f.default)(c(a), function(a) {
        return a.name;
      }, function(a) {
        return l({}, a, {type:r(a.type)});
      });
    }
    function e(a) {
      return g(a, function(a) {
        return {type:r(a.type), args:b(a.args), resolve:a.resolve, subscribe:a.subscribe, deprecationReason:a.deprecationReason, description:a.description, astNode:a.astNode};
      });
    }
    function u(a) {
      return g(a, function(a) {
        return {type:r(a.type), defaultValue:a.defaultValue, description:a.description, astNode:a.astNode};
      });
    }
    function r(a) {
      return (0, q.isListType)(a) ? new q.GraphQLList(r(a.ofType)) : (0, q.isNonNullType)(a) ? new q.GraphQLNonNull(r(a.ofType)) : y(a);
    }
    function y(a) {
      if ((0, z.isSpecifiedScalarType)(a) || (0, t.isIntrospectionType)(a)) {
        return a;
      }
      var b = F[a.name];
      b || (b = M(a), F[a.name] = b);
      return b;
    }
    function M(a) {
      if ((0, q.isScalarType)(a)) {
        return a;
      }
      if ((0, q.isObjectType)(a)) {
        return new q.GraphQLObjectType({name:a.name, interfaces:function() {
          return c(a.getInterfaces()).map(y);
        }, fields:function() {
          return e(a.getFields());
        }, isTypeOf:a.isTypeOf, description:a.description, astNode:a.astNode, extensionASTNodes:a.extensionASTNodes});
      }
      if ((0, q.isInterfaceType)(a)) {
        return new q.GraphQLInterfaceType({name:a.name, fields:function() {
          return e(a.getFields());
        }, resolveType:a.resolveType, description:a.description, astNode:a.astNode, extensionASTNodes:a.extensionASTNodes});
      }
      if ((0, q.isUnionType)(a)) {
        return new q.GraphQLUnionType({name:a.name, types:function() {
          return c(a.getTypes()).map(y);
        }, resolveType:a.resolveType, description:a.description, astNode:a.astNode});
      }
      if ((0, q.isEnumType)(a)) {
        return new q.GraphQLEnumType({name:a.name, values:(0, f.default)(c(a.getValues()), function(a) {
          return a.name;
        }, function(a) {
          return {value:a.value, deprecationReason:a.deprecationReason, description:a.description, astNode:a.astNode};
        }), description:a.description, astNode:a.astNode});
      }
      if ((0, q.isInputObjectType)(a)) {
        return new q.GraphQLInputObjectType({name:a.name, fields:function() {
          return u(a.getFields());
        }, description:a.description, astNode:a.astNode});
      }
      throw Error('Unknown type: "' + a + '"');
    }
    var F = Object.create(null), B = function(a) {
      return a && y(a);
    };
    return new m.GraphQLSchema({types:c((0, h.default)(a.getTypeMap())).map(y), directives:c(a.getDirectives()).map(function(a) {
      return new d.GraphQLDirective({name:a.name, description:a.description, locations:k(a.locations, function(a) {
        return a;
      }), args:b(a.args), astNode:a.astNode});
    }), query:B(a.getQueryType()), mutation:B(a.getMutationType()), subscription:B(a.getSubscriptionType()), astNode:a.astNode});
  };
  var f = (e = b("module$node_modules$graphql$jsutils$keyValMap")) && e.__esModule ? e : {default:e}, h = (e = b("module$node_modules$graphql$jsutils$objectValues")) && e.__esModule ? e : {default:e}, m = b("module$node_modules$graphql$type$schema"), d = b("module$node_modules$graphql$type$directives"), q = b("module$node_modules$graphql$type$definition"), z = b("module$node_modules$graphql$type$scalars"), t = b("module$node_modules$graphql$type$introspection");
};

//# sourceMappingURL=module$node_modules$graphql$utilities$lexicographicSortSchema.js.map
