shadow$provide.module$node_modules$graphql$validation$rules$FragmentsOnCompositeTypes = function(e, r, b, u, a) {
  function g(a) {
    return 'Fragment cannot condition on non composite type "' + String(a) + '".';
  }
  function c(a, b) {
    return 'Fragment "' + a + '" cannot condition on non composite ' + ('type "' + String(b) + '".');
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.inlineFragmentOnNonCompositeErrorMessage = g;
  a.fragmentOnNonCompositeErrorMessage = c;
  a.FragmentsOnCompositeTypes = function(a) {
    return {InlineFragment:function(b) {
      if (b = b.typeCondition) {
        var d = (0, h.typeFromAST)(a.getSchema(), b);
        d && !(0, f.isCompositeType)(d) && a.reportError(new k.GraphQLError(g((0, l.print)(b)), [b]));
      }
    }, FragmentDefinition:function(b) {
      var d = (0, h.typeFromAST)(a.getSchema(), b.typeCondition);
      d && !(0, f.isCompositeType)(d) && a.reportError(new k.GraphQLError(c(b.name.value, (0, l.print)(b.typeCondition)), [b.typeCondition]));
    }};
  };
  var k = b("module$node_modules$graphql$error$index"), l = b("module$node_modules$graphql$language$printer"), f = b("module$node_modules$graphql$type$definition"), h = b("module$node_modules$graphql$utilities$typeFromAST");
};

//# sourceMappingURL=module$node_modules$graphql$validation$rules$FragmentsOnCompositeTypes.js.map
