shadow$provide.module$node_modules$graphql$language$lexer = function(e, r, b, u, a) {
  function g() {
    this.lastToken = this.token;
    return this.token = this.lookahead();
  }
  function c() {
    var a = this.token;
    if (a.kind !== z.EOF) {
      do {
        a = a.next || (a.next = f(this, a));
      } while (a.kind === z.COMMENT);
    }
    return a;
  }
  function k(a, b, d, c, f, h, k) {
    this.kind = a;
    this.start = b;
    this.end = d;
    this.line = c;
    this.column = f;
    this.value = k;
    this.prev = h;
    this.next = null;
  }
  function l(a) {
    return isNaN(a) ? z.EOF : 127 > a ? JSON.stringify(String.fromCharCode(a)) : '"\\u' + ("00" + a.toString(16).toUpperCase()).slice(-4) + '"';
  }
  function f(a, b) {
    var c = a.source, f = c.body, e = f.length;
    var g = f.length;
    for (var n = b.end; n < g;) {
      var p = t.call(f, n);
      if (9 === p || 32 === p || 44 === p || 65279 === p) {
        ++n;
      } else {
        if (10 === p) {
          ++n, ++a.line, a.lineStart = n;
        } else {
          if (13 === p) {
            10 === t.call(f, n + 1) ? n += 2 : ++n, ++a.line, a.lineStart = n;
          } else {
            break;
          }
        }
      }
    }
    g = n;
    n = a.line;
    a = 1 + g - a.lineStart;
    if (g >= e) {
      return new k(z.EOF, e, e, n, a, b);
    }
    e = t.call(f, g);
    if (32 > e && 9 !== e && 10 !== e && 13 !== e) {
      throw (0, d.syntaxError)(c, g, "Cannot contain the invalid character " + l(e) + ".");
    }
    switch(e) {
      case 33:
        return new k(z.BANG, g, g + 1, n, a, b);
      case 35:
        c = c.body;
        e = g;
        do {
          f = t.call(c, ++e);
        } while (null !== f && (31 < f || 9 === f));
        return new k(z.COMMENT, g, e, n, a, b, y.call(c, g + 1, e));
      case 36:
        return new k(z.DOLLAR, g, g + 1, n, a, b);
      case 38:
        return new k(z.AMP, g, g + 1, n, a, b);
      case 40:
        return new k(z.PAREN_L, g, g + 1, n, a, b);
      case 41:
        return new k(z.PAREN_R, g, g + 1, n, a, b);
      case 46:
        if (46 === t.call(f, g + 1) && 46 === t.call(f, g + 2)) {
          return new k(z.SPREAD, g, g + 3, n, a, b);
        }
        break;
      case 58:
        return new k(z.COLON, g, g + 1, n, a, b);
      case 61:
        return new k(z.EQUALS, g, g + 1, n, a, b);
      case 64:
        return new k(z.AT, g, g + 1, n, a, b);
      case 91:
        return new k(z.BRACKET_L, g, g + 1, n, a, b);
      case 93:
        return new k(z.BRACKET_R, g, g + 1, n, a, b);
      case 123:
        return new k(z.BRACE_L, g, g + 1, n, a, b);
      case 124:
        return new k(z.PIPE, g, g + 1, n, a, b);
      case 125:
        return new k(z.BRACE_R, g, g + 1, n, a, b);
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 95:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
        c = c.body;
        f = c.length;
        e = g + 1;
        for (p = 0; e !== f && null !== (p = t.call(c, e)) && (95 === p || 48 <= p && 57 >= p || 65 <= p && 90 >= p || 97 <= p && 122 >= p);) {
          ++e;
        }
        return new k(z.NAME, g, e, n, a, b, y.call(c, g, e));
      case 45:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        f = c.body;
        p = g;
        var x = !1;
        45 === e && (e = t.call(f, ++p));
        if (48 === e) {
          if (e = t.call(f, ++p), 48 <= e && 57 >= e) {
            throw (0, d.syntaxError)(c, p, "Invalid number, unexpected digit after 0: " + l(e) + ".");
          }
        } else {
          p = h(c, p, e), e = t.call(f, p);
        }
        46 === e && (x = !0, e = t.call(f, ++p), p = h(c, p, e), e = t.call(f, p));
        if (69 === e || 101 === e) {
          x = !0;
          e = t.call(f, ++p);
          if (43 === e || 45 === e) {
            e = t.call(f, ++p);
          }
          p = h(c, p, e);
        }
        return new k(x ? z.FLOAT : z.INT, g, p, n, a, b, y.call(f, g, p));
      case 34:
        if (34 === t.call(f, g + 1) && 34 === t.call(f, g + 2)) {
          a: {
            f = c.body;
            p = e = g + 3;
            x = 0;
            for (var v = ""; e < f.length && null !== (x = t.call(f, e));) {
              if (34 === x && 34 === t.call(f, e + 1) && 34 === t.call(f, e + 2)) {
                v += y.call(f, p, e);
                b = new k(z.BLOCK_STRING, g, e + 3, n, a, b, (0, q.default)(v));
                break a;
              }
              if (32 > x && 9 !== x && 10 !== x && 13 !== x) {
                throw (0, d.syntaxError)(c, e, "Invalid character within String: " + l(x) + ".");
              }
              92 === x && 34 === t.call(f, e + 1) && 34 === t.call(f, e + 2) && 34 === t.call(f, e + 3) ? (v += y.call(f, p, e) + '"""', p = e += 4) : ++e;
            }
            throw (0, d.syntaxError)(c, e, "Unterminated string.");
          }
          return b;
        }
        a: {
          f = c.body;
          v = e = g + 1;
          p = 0;
          for (x = ""; e < f.length && null !== (p = t.call(f, e)) && 10 !== p && 13 !== p;) {
            if (34 === p) {
              x += y.call(f, v, e);
              b = new k(z.STRING, g, e + 1, n, a, b, x);
              break a;
            }
            if (32 > p && 9 !== p) {
              throw (0, d.syntaxError)(c, e, "Invalid character within String: " + l(p) + ".");
            }
            ++e;
            if (92 === p) {
              x += y.call(f, v, e - 1);
              p = t.call(f, e);
              switch(p) {
                case 34:
                  x += '"';
                  break;
                case 47:
                  x += "/";
                  break;
                case 92:
                  x += "\\";
                  break;
                case 98:
                  x += "\b";
                  break;
                case 102:
                  x += "\f";
                  break;
                case 110:
                  x += "\n";
                  break;
                case 114:
                  x += "\r";
                  break;
                case 116:
                  x += "\t";
                  break;
                case 117:
                  v = t.call(f, e + 1);
                  var I = t.call(f, e + 2), w = t.call(f, e + 3), L = t.call(f, e + 4);
                  v = m(v) << 12 | m(I) << 8 | m(w) << 4 | m(L);
                  if (0 > v) {
                    throw (0, d.syntaxError)(c, e, "Invalid character escape sequence: " + ("\\u" + f.slice(e + 1, e + 5) + "."));
                  }
                  x += String.fromCharCode(v);
                  e += 4;
                  break;
                default:
                  throw (0, d.syntaxError)(c, e, "Invalid character escape sequence: \\" + String.fromCharCode(p) + ".");
              }
              ++e;
              v = e;
            }
          }
          throw (0, d.syntaxError)(c, e, "Unterminated string.");
        }
        return b;
    }
    b = (0, d.syntaxError);
    n = 39 === e ? "Unexpected single quote character ('), did you mean to use a double quote (\")?" : "Cannot parse the unexpected character " + l(e) + ".";
    throw b(c, g, n);
  }
  function h(a, b, c) {
    var f = a.body;
    if (48 <= c && 57 >= c) {
      do {
        c = t.call(f, ++b);
      } while (48 <= c && 57 >= c);
      return b;
    }
    throw (0, d.syntaxError)(a, b, "Invalid number, expected digit but got: " + l(c) + ".");
  }
  function m(a) {
    return 48 <= a && 57 >= a ? a - 48 : 65 <= a && 70 >= a ? a - 55 : 97 <= a && 102 >= a ? a - 87 : -1;
  }
  Object.defineProperty(a, "__esModule", {value:!0});
  a.TokenKind = void 0;
  a.createLexer = function(a, b) {
    var d = new k(z.SOF, 0, 0, 0, 0, null);
    return {source:a, options:b, lastToken:d, token:d, line:1, lineStart:0, advance:g, lookahead:c};
  };
  a.getTokenDesc = function(a) {
    var b = a.value;
    return b ? a.kind + ' "' + b + '"' : a.kind;
  };
  var d = b("module$node_modules$graphql$error$index"), q = (e = b("module$node_modules$graphql$language$blockStringValue")) && e.__esModule ? e : {default:e}, z = a.TokenKind = Object.freeze({SOF:"\x3cSOF\x3e", EOF:"\x3cEOF\x3e", BANG:"!", DOLLAR:"$", AMP:"\x26", PAREN_L:"(", PAREN_R:")", SPREAD:"...", COLON:":", EQUALS:"\x3d", AT:"@", BRACKET_L:"[", BRACKET_R:"]", BRACE_L:"{", PIPE:"|", BRACE_R:"}", NAME:"Name", INT:"Int", FLOAT:"Float", STRING:"String", BLOCK_STRING:"BlockString", COMMENT:"Comment"}), 
  t = String.prototype.charCodeAt, y = String.prototype.slice;
  k.prototype.toJSON = k.prototype.inspect = function() {
    return {kind:this.kind, value:this.value, line:this.line, column:this.column};
  };
};

//# sourceMappingURL=module$node_modules$graphql$language$lexer.js.map
