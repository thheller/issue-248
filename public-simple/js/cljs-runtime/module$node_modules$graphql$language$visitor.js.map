{
"version":3,
"file":"module$node_modules$graphql$language$visitor.js",
"lineCount":159,
"mappings":"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",
"sources":["node_modules/graphql/language/visitor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$language$visitor\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visit = visit;\nexports.visitInParallel = visitInParallel;\nexports.visitWithTypeInfo = visitWithTypeInfo;\nexports.getVisitFn = getVisitFn;\n\n\n/**\n * A visitor is comprised of visit functions, which are called on each node\n * during the visitor's traversal.\n */\n\n\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nvar QueryDocumentKeys = exports.QueryDocumentKeys = {\n  Name: [],\n\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name',\n  // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n\n  Directive: ['name', 'arguments'],\n\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations']\n};\n\n/**\n * A KeyMap describes each the traversable properties of each kind of node.\n */\nvar BREAK = exports.BREAK = {};\n\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\nfunction visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n          for (var k in node) {\n            if (node.hasOwnProperty(k)) {\n              clone[k] = node[k];\n            }\n          }\n          node = clone;\n        }\n        var editOffset = 0;\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n          if (inArray) {\n            editKey -= editOffset;\n          }\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n      if (node === null || node === undefined) {\n        continue;\n      }\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + JSON.stringify(node));\n      }\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = { inArray: inArray, index: index, keys: keys, edits: edits, prev: stack };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n      if (parent) {\n        ancestors.push(parent);\n      }\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\nfunction visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */false);\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */true);\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\nfunction visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */false);\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n        if (result !== undefined) {\n          typeInfo.leave(node);\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */true);\n      var result = void 0;\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\nfunction getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n      var specificKindVisitor = specificVisitor[kind];\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","isNode","maybeNode","kind","getVisitFn","visitor","isLeaving","kindVisitor","kindSpecificVisitor","leave","enter","specificVisitor","specificKindVisitor","Object","defineProperty","value","visit","root","visitorKeys","arguments","length","undefined","QueryDocumentKeys","stack","inArray","Array","isArray","keys","index","edits","parent","path","ancestors","newRoot","isEdited","key","node","pop","slice","clone","k","hasOwnProperty","ii","editOffset","editKey","editValue","splice","prev","push","result","Error","JSON","stringify","visitFn","call","BREAK","visitInParallel","visitors","skipping","i","fn","apply","visitWithTypeInfo","typeInfo","Name","Document","OperationDefinition","VariableDefinition","Variable","SelectionSet","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","FieldDefinition","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","DirectiveDefinition"]
}
