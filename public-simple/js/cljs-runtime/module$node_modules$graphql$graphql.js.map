{
"version":3,
"file":"module$node_modules$graphql$graphql.js",
"lineCount":32,
"mappings":"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",
"sources":["node_modules/graphql/graphql.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$graphql$graphql\"] = function(global,process,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.graphql = graphql;\nexports.graphqlSync = graphqlSync;\n\nvar _validate = require('./type/validate');\n\nvar _parser = require('./language/parser');\n\nvar _validate2 = require('./validation/validate');\n\nvar _execute = require('./execution/execute');\n\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n */\n\n/* eslint-disable no-redeclare */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\nfunction graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  var _arguments = arguments;\n\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n  return new Promise(function (resolve) {\n    return resolve(\n    // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}\n\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\n/* eslint-disable no-redeclare */\nfunction graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver);\n\n  // Assert that the execution was synchronous.\n  if (result.then) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Validate Schema\n  var schemaValidationErrors = (0, _validate.validateSchema)(schema);\n  if (schemaValidationErrors.length > 0) {\n    return { errors: schemaValidationErrors };\n  }\n\n  // Parse\n  var document = void 0;\n  try {\n    document = (0, _parser.parse)(source);\n  } catch (syntaxError) {\n    return { errors: [syntaxError] };\n  }\n\n  // Validate\n  var validationErrors = (0, _validate2.validate)(schema, document);\n  if (validationErrors.length > 0) {\n    return { errors: validationErrors };\n  }\n\n  // Execute\n  return (0, _execute.execute)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","graphqlImpl","schema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","schemaValidationErrors","_validate","validateSchema","length","errors","document","_parser","parse","syntaxError","validationErrors","_validate2","validate","_execute","execute","Object","defineProperty","value","graphql","argsOrSchema","_arguments","arguments","Promise","resolve","graphqlSync","result","then","Error"]
}
