shadow$provide.module$node_modules$graphql$validation$rules$PossibleFragmentSpreads = function($global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $typeIncompatibleSpreadMessage$$($exports$$, $require$$, $typeIncompatibleAnonSpreadMessage$$) {
    return 'Fragment "' + $exports$$ + '" cannot be spread here as objects of ' + ('type "' + String($require$$) + '" can never be of type "' + String($typeIncompatibleAnonSpreadMessage$$) + '".');
  }
  function $typeIncompatibleAnonSpreadMessage$$($exports$$, $require$$) {
    return "Fragment cannot be spread here as objects of " + ('type "' + String($exports$$) + '" can never be of type "' + String($require$$) + '".');
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.typeIncompatibleSpreadMessage = $typeIncompatibleSpreadMessage$$;
  $exports$$.typeIncompatibleAnonSpreadMessage = $typeIncompatibleAnonSpreadMessage$$;
  $exports$$.PossibleFragmentSpreads = function($exports$$) {
    return {InlineFragment:function($require$$) {
      var $node$$ = $exports$$.getType(), $_typeFromAST$$ = $exports$$.getParentType();
      (0, $_definition$$.isCompositeType)($node$$) && (0, $_definition$$.isCompositeType)($_typeFromAST$$) && !(0, $_typeComparators$$.doTypesOverlap)($exports$$.getSchema(), $node$$, $_typeFromAST$$) && $exports$$.reportError(new $_error$$.GraphQLError($typeIncompatibleAnonSpreadMessage$$($_typeFromAST$$, $node$$), [$require$$]));
    }, FragmentSpread:function($require$$) {
      var $node$$ = $require$$.name.value, $typeIncompatibleAnonSpreadMessage$$;
      a: {
        if ($typeIncompatibleAnonSpreadMessage$$ = $exports$$.getFragment($node$$)) {
          if ($typeIncompatibleAnonSpreadMessage$$ = (0, $_typeFromAST$$.typeFromAST)($exports$$.getSchema(), $typeIncompatibleAnonSpreadMessage$$.typeCondition), (0, $_definition$$.isCompositeType)($typeIncompatibleAnonSpreadMessage$$)) {
            break a;
          }
        }
        $typeIncompatibleAnonSpreadMessage$$ = void 0;
      }
      var $global$$ = $exports$$.getParentType();
      $typeIncompatibleAnonSpreadMessage$$ && $global$$ && !(0, $_typeComparators$$.doTypesOverlap)($exports$$.getSchema(), $typeIncompatibleAnonSpreadMessage$$, $global$$) && $exports$$.reportError(new $_error$$.GraphQLError($typeIncompatibleSpreadMessage$$($node$$, $global$$, $typeIncompatibleAnonSpreadMessage$$), [$require$$]));
    }};
  };
  var $_error$$ = $require$$("module$node_modules$graphql$error$index"), $_typeComparators$$ = $require$$("module$node_modules$graphql$utilities$typeComparators"), $_typeFromAST$$ = $require$$("module$node_modules$graphql$utilities$typeFromAST"), $_definition$$ = $require$$("module$node_modules$graphql$type$definition");
};
