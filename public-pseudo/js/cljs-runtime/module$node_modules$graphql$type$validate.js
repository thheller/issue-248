shadow$provide.module$node_modules$graphql$type$validate = function($_find$jscomp$1__invariant$jscomp$4__objectValues$jscomp$3_global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $_interopRequireDefault$$($exports$$) {
    return $exports$$ && $exports$$.__esModule ? $exports$$ : {default:$exports$$};
  }
  function $validateSchema$$($exports$$) {
    (0, $_schema$$.isSchema)($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL schema.");
    if ($exports$$.__validationErrors) {
      return $exports$$.__validationErrors;
    }
    var $require$$ = new $SchemaValidationContext$$($exports$$), $validateObjectInterfaces$$ = $require$$.schema, $validateSchema$$ = $validateObjectInterfaces$$.getQueryType();
    $validateSchema$$ ? (0, $_definition$$.isObjectType)($validateSchema$$) || $require$$.reportError("Query root type must be Object type, it cannot be " + String($validateSchema$$) + ".", $getOperationTypeNode$$($validateObjectInterfaces$$, $validateSchema$$, "query")) : $require$$.reportError("Query root type must be provided.", $validateObjectInterfaces$$.astNode);
    ($validateSchema$$ = $validateObjectInterfaces$$.getMutationType()) && !(0, $_definition$$.isObjectType)($validateSchema$$) && $require$$.reportError("Mutation root type must be Object type if provided, it cannot be " + (String($validateSchema$$) + "."), $getOperationTypeNode$$($validateObjectInterfaces$$, $validateSchema$$, "mutation"));
    ($validateSchema$$ = $validateObjectInterfaces$$.getSubscriptionType()) && !(0, $_definition$$.isObjectType)($validateSchema$$) && $require$$.reportError("Subscription root type must be Object type if provided, it cannot be " + (String($validateSchema$$) + "."), $getOperationTypeNode$$($validateObjectInterfaces$$, $validateSchema$$, "subscription"));
    $validateDirectives$$($require$$);
    $validateTypes$$($require$$);
    $require$$ = $require$$.getErrors();
    return $exports$$.__validationErrors = $require$$;
  }
  function $getOperationTypeNode$$($exports$$, $require$$, $validateObjectInterfaces$$) {
    return ($exports$$ = ($exports$$ = $exports$$.astNode) && $exports$$.operationTypes.find(function($exports$$) {
      return $exports$$.operation === $validateObjectInterfaces$$;
    })) ? $exports$$.type : $require$$ && $require$$.astNode;
  }
  function $validateDirectives$$($exports$$) {
    $exports$$.schema.getDirectives().forEach(function($require$$) {
      if ((0, $_directives$$.isDirective)($require$$)) {
        $validateName$$($exports$$, $require$$);
        var $validateObjectInterfaces$$ = Object.create(null);
        $require$$.args.forEach(function($validateSchema$$) {
          var $validateTypes$$ = $validateSchema$$.name;
          $validateName$$($exports$$, $validateSchema$$);
          $validateObjectInterfaces$$[$validateTypes$$] ? $exports$$.reportError("Argument @" + $require$$.name + "(" + $validateTypes$$ + ":) can only be defined once.", $getAllDirectiveArgNodes$$($require$$, $validateTypes$$)) : ($validateObjectInterfaces$$[$validateTypes$$] = !0, (0, $_definition$$.isInputType)($validateSchema$$.type) || $exports$$.reportError("The type of @" + $require$$.name + "(" + $validateTypes$$ + ":) must be Input Type " + ("but got: " + String($validateSchema$$.type) + 
          "."), $getDirectiveArgTypeNode$$($require$$, $validateTypes$$)));
        });
      } else {
        $exports$$.reportError("Expected directive but got: " + String($require$$) + ".", $require$$ && $require$$.astNode);
      }
    });
  }
  function $validateName$$($exports$$, $require$$) {
    $exports$$.schema.__allowedLegacyNames && -1 !== $exports$$.schema.__allowedLegacyNames.indexOf($require$$.name) || ($require$$ = (0, $_assertValidName$$.isValidNameError)($require$$.name, $require$$.astNode || void 0)) && $exports$$.addError($require$$);
  }
  function $validateTypes$$($exports$$) {
    var $require$$ = $exports$$.schema.getTypeMap();
    (0, $_objectValues2$$.default)($require$$).forEach(function($require$$) {
      (0, $_definition$$.isNamedType)($require$$) ? ((0, $_introspection$$.isIntrospectionType)($require$$) || $validateName$$($exports$$, $require$$), (0, $_definition$$.isObjectType)($require$$) ? ($validateFields$$($exports$$, $require$$), $validateObjectInterfaces$$($exports$$, $require$$)) : (0, $_definition$$.isInterfaceType)($require$$) ? $validateFields$$($exports$$, $require$$) : (0, $_definition$$.isUnionType)($require$$) ? $validateUnionMembers$$($exports$$, $require$$) : (0, $_definition$$.isEnumType)($require$$) ? 
      $validateEnumValues$$($exports$$, $require$$) : (0, $_definition$$.isInputObjectType)($require$$) && $validateInputFields$$($exports$$, $require$$)) : $exports$$.reportError("Expected GraphQL named type but got: " + String($require$$) + ".", $require$$ && $require$$.astNode);
    });
  }
  function $validateFields$$($exports$$, $require$$) {
    var $validateObjectInterfaces$$ = (0, $_objectValues2$$.default)($require$$.getFields());
    0 === $validateObjectInterfaces$$.length && $exports$$.reportError("Type " + $require$$.name + " must define one or more fields.", $getAllObjectOrInterfaceNodes$$($require$$));
    $validateObjectInterfaces$$.forEach(function($validateObjectInterfaces$$) {
      $validateName$$($exports$$, $validateObjectInterfaces$$);
      var $validateSchema$$ = $getAllFieldNodes$$($require$$, $validateObjectInterfaces$$.name);
      if (1 < $validateSchema$$.length) {
        $exports$$.reportError("Field " + $require$$.name + "." + $validateObjectInterfaces$$.name + " can only be defined once.", $validateSchema$$);
      } else {
        (0, $_definition$$.isOutputType)($validateObjectInterfaces$$.type) || $exports$$.reportError("The type of " + $require$$.name + "." + $validateObjectInterfaces$$.name + " must be Output Type " + ("but got: " + String($validateObjectInterfaces$$.type) + "."), $getFieldTypeNode$$($require$$, $validateObjectInterfaces$$.name));
        var $validateTypes$$ = Object.create(null);
        $validateObjectInterfaces$$.args.forEach(function($validateSchema$$) {
          var $getOperationTypeNode$$ = $validateSchema$$.name;
          $validateName$$($exports$$, $validateSchema$$);
          $validateTypes$$[$getOperationTypeNode$$] && $exports$$.reportError("Field argument " + $require$$.name + "." + $validateObjectInterfaces$$.name + "(" + $getOperationTypeNode$$ + ":) can only be defined once.", $getAllFieldArgNodes$$($require$$, $validateObjectInterfaces$$.name, $getOperationTypeNode$$));
          $validateTypes$$[$getOperationTypeNode$$] = !0;
          (0, $_definition$$.isInputType)($validateSchema$$.type) || $exports$$.reportError("The type of " + $require$$.name + "." + $validateObjectInterfaces$$.name + "(" + $getOperationTypeNode$$ + ":) must be Input " + ("Type but got: " + String($validateSchema$$.type) + "."), $getFieldArgTypeNode$$($require$$, $validateObjectInterfaces$$.name, $getOperationTypeNode$$));
        });
      }
    });
  }
  function $validateObjectInterfaces$$($exports$$, $require$$) {
    var $validateObjectInterfaces$$ = Object.create(null);
    $require$$.getInterfaces().forEach(function($validateSchema$$) {
      (0, $_definition$$.isInterfaceType)($validateSchema$$) ? $validateObjectInterfaces$$[$validateSchema$$.name] ? $exports$$.reportError("Type " + $require$$.name + " can only implement " + $validateSchema$$.name + " once.", $getAllImplementsInterfaceNodes$$($require$$, $validateSchema$$)) : ($validateObjectInterfaces$$[$validateSchema$$.name] = !0, $validateObjectImplementsInterface$$($exports$$, $require$$, $validateSchema$$)) : $exports$$.reportError("Type " + String($require$$) + " must only implement Interface types, " + 
      ("it cannot implement " + String($validateSchema$$) + "."), $getAllImplementsInterfaceNodes$$($require$$, $validateSchema$$)[0]);
    });
  }
  function $validateObjectImplementsInterface$$($exports$$, $require$$, $validateObjectInterfaces$$) {
    var $validateSchema$$ = $require$$.getFields(), $validateName$$ = $validateObjectInterfaces$$.getFields();
    Object.keys($validateName$$).forEach(function($validateTypes$$) {
      var $getOperationTypeNode$$ = $validateSchema$$[$validateTypes$$], $validateDirectives$$ = $validateName$$[$validateTypes$$];
      $getOperationTypeNode$$ ? ((0, $_typeComparators$$.isTypeSubTypeOf)($exports$$.schema, $getOperationTypeNode$$.type, $validateDirectives$$.type) || $exports$$.reportError("Interface field " + $validateObjectInterfaces$$.name + "." + $validateTypes$$ + " expects type " + (String($validateDirectives$$.type) + " but " + $require$$.name + "." + $validateTypes$$ + " ") + ("is type " + String($getOperationTypeNode$$.type) + "."), [$getFieldTypeNode$$($validateObjectInterfaces$$, $validateTypes$$), 
      $getFieldTypeNode$$($require$$, $validateTypes$$)]), $validateDirectives$$.args.forEach(function($validateSchema$$) {
        var $validateName$$ = $validateSchema$$.name, $validateDirectives$$ = (0, $_find2$$.default)($getOperationTypeNode$$.args, function($exports$$) {
          return $exports$$.name === $validateName$$;
        });
        $validateDirectives$$ ? (0, $_typeComparators$$.isEqualType)($validateSchema$$.type, $validateDirectives$$.type) || $exports$$.reportError("Interface field argument " + $validateObjectInterfaces$$.name + "." + $validateTypes$$ + "(" + $validateName$$ + ":) " + ("expects type " + String($validateSchema$$.type) + " but ") + ($require$$.name + "." + $validateTypes$$ + "(" + $validateName$$ + ":) is type ") + (String($validateDirectives$$.type) + "."), [$getFieldArgTypeNode$$($validateObjectInterfaces$$, 
        $validateTypes$$, $validateName$$), $getFieldArgTypeNode$$($require$$, $validateTypes$$, $validateName$$)]) : $exports$$.reportError("Interface field argument " + $validateObjectInterfaces$$.name + "." + $validateTypes$$ + "(" + $validateName$$ + ":) " + ("expected but " + $require$$.name + "." + $validateTypes$$ + " does not provide it."), [$getAllFieldArgNodes$$($validateObjectInterfaces$$, $validateTypes$$, $validateName$$)[0], $getAllFieldNodes$$($require$$, $validateTypes$$)[0]]);
      }), $getOperationTypeNode$$.args.forEach(function($validateSchema$$) {
        var $validateName$$ = $validateSchema$$.name;
        !(0, $_find2$$.default)($validateDirectives$$.args, function($exports$$) {
          return $exports$$.name === $validateName$$;
        }) && (0, $_definition$$.isNonNullType)($validateSchema$$.type) && $exports$$.reportError("Object field argument " + $require$$.name + "." + $validateTypes$$ + "(" + $validateName$$ + ":) " + ("is of required type " + String($validateSchema$$.type) + " but is not also ") + ("provided by the Interface field " + $validateObjectInterfaces$$.name + "." + $validateTypes$$ + "."), [$getFieldArgTypeNode$$($require$$, $validateTypes$$, $validateName$$), $getAllFieldNodes$$($validateObjectInterfaces$$, 
        $validateTypes$$)[0]]);
      })) : $exports$$.reportError("Interface field " + $validateObjectInterfaces$$.name + "." + $validateTypes$$ + " expected but " + ($require$$.name + " does not provide it."), [$getAllFieldNodes$$($validateObjectInterfaces$$, $validateTypes$$)[0], $require$$.astNode]);
    });
  }
  function $validateUnionMembers$$($exports$$, $require$$) {
    var $validateObjectInterfaces$$ = $require$$.getTypes();
    0 === $validateObjectInterfaces$$.length && $exports$$.reportError("Union type " + $require$$.name + " must define one or more member types.", $require$$.astNode);
    var $validateSchema$$ = Object.create(null);
    $validateObjectInterfaces$$.forEach(function($validateObjectInterfaces$$) {
      $validateSchema$$[$validateObjectInterfaces$$.name] ? $exports$$.reportError("Union type " + $require$$.name + " can only include type " + ($validateObjectInterfaces$$.name + " once."), $getUnionMemberTypeNodes$$($require$$, $validateObjectInterfaces$$.name)) : ($validateSchema$$[$validateObjectInterfaces$$.name] = !0, (0, $_definition$$.isObjectType)($validateObjectInterfaces$$) || $exports$$.reportError("Union type " + $require$$.name + " can only include Object types, " + ("it cannot include " + 
      String($validateObjectInterfaces$$) + "."), $getUnionMemberTypeNodes$$($require$$, String($validateObjectInterfaces$$))));
    });
  }
  function $validateEnumValues$$($exports$$, $require$$) {
    var $validateObjectInterfaces$$ = $require$$.getValues();
    0 === $validateObjectInterfaces$$.length && $exports$$.reportError("Enum type " + $require$$.name + " must define one or more values.", $require$$.astNode);
    $validateObjectInterfaces$$.forEach(function($validateObjectInterfaces$$) {
      var $validateSchema$$ = $validateObjectInterfaces$$.name, $validateTypes$$ = $getEnumValueNodes$$($require$$, $validateSchema$$);
      $validateTypes$$ && 1 < $validateTypes$$.length && $exports$$.reportError("Enum type " + $require$$.name + " can include value " + $validateSchema$$ + " only once.", $validateTypes$$);
      $validateName$$($exports$$, $validateObjectInterfaces$$);
      "true" !== $validateSchema$$ && "false" !== $validateSchema$$ && "null" !== $validateSchema$$ || $exports$$.reportError("Enum type " + $require$$.name + " cannot include value: " + $validateSchema$$ + ".", $validateObjectInterfaces$$.astNode);
    });
  }
  function $validateInputFields$$($exports$$, $require$$) {
    var $validateObjectInterfaces$$ = (0, $_objectValues2$$.default)($require$$.getFields());
    0 === $validateObjectInterfaces$$.length && $exports$$.reportError("Input Object type " + $require$$.name + " must define one or more fields.", $require$$.astNode);
    $validateObjectInterfaces$$.forEach(function($validateObjectInterfaces$$) {
      $validateName$$($exports$$, $validateObjectInterfaces$$);
      (0, $_definition$$.isInputType)($validateObjectInterfaces$$.type) || $exports$$.reportError("The type of " + $require$$.name + "." + $validateObjectInterfaces$$.name + " must be Input Type " + ("but got: " + String($validateObjectInterfaces$$.type) + "."), $validateObjectInterfaces$$.astNode && $validateObjectInterfaces$$.astNode.type);
    });
  }
  function $getAllObjectNodes$$($exports$$) {
    return $exports$$.astNode ? $exports$$.extensionASTNodes ? [$exports$$.astNode].concat($exports$$.extensionASTNodes) : [$exports$$.astNode] : $exports$$.extensionASTNodes || [];
  }
  function $getAllObjectOrInterfaceNodes$$($exports$$) {
    return $exports$$.astNode ? $exports$$.extensionASTNodes ? [$exports$$.astNode].concat($exports$$.extensionASTNodes) : [$exports$$.astNode] : $exports$$.extensionASTNodes || [];
  }
  function $getAllImplementsInterfaceNodes$$($exports$$, $require$$) {
    var $validateObjectInterfaces$$ = [];
    $exports$$ = $getAllObjectNodes$$($exports$$);
    for (var $validateSchema$$ = 0; $validateSchema$$ < $exports$$.length; $validateSchema$$++) {
      var $validateName$$ = $exports$$[$validateSchema$$];
      $validateName$$ && $validateName$$.interfaces && $validateName$$.interfaces.forEach(function($exports$$) {
        $exports$$.name.value === $require$$.name && $validateObjectInterfaces$$.push($exports$$);
      });
    }
    return $validateObjectInterfaces$$;
  }
  function $getAllFieldNodes$$($exports$$, $require$$) {
    var $validateObjectInterfaces$$ = [];
    $exports$$ = $getAllObjectOrInterfaceNodes$$($exports$$);
    for (var $validateSchema$$ = 0; $validateSchema$$ < $exports$$.length; $validateSchema$$++) {
      var $validateName$$ = $exports$$[$validateSchema$$];
      $validateName$$ && $validateName$$.fields && $validateName$$.fields.forEach(function($exports$$) {
        $exports$$.name.value === $require$$ && $validateObjectInterfaces$$.push($exports$$);
      });
    }
    return $validateObjectInterfaces$$;
  }
  function $getFieldTypeNode$$($exports$$, $require$$) {
    return ($exports$$ = $getAllFieldNodes$$($exports$$, $require$$)[0]) && $exports$$.type;
  }
  function $getAllFieldArgNodes$$($exports$$, $require$$, $validateObjectInterfaces$$) {
    var $validateSchema$$ = [];
    ($exports$$ = $getAllFieldNodes$$($exports$$, $require$$)[0]) && $exports$$.arguments && $exports$$.arguments.forEach(function($exports$$) {
      $exports$$.name.value === $validateObjectInterfaces$$ && $validateSchema$$.push($exports$$);
    });
    return $validateSchema$$;
  }
  function $getFieldArgTypeNode$$($exports$$, $require$$, $validateObjectInterfaces$$) {
    return ($exports$$ = $getAllFieldArgNodes$$($exports$$, $require$$, $validateObjectInterfaces$$)[0]) && $exports$$.type;
  }
  function $getAllDirectiveArgNodes$$($exports$$, $require$$) {
    var $validateObjectInterfaces$$ = [];
    ($exports$$ = $exports$$.astNode) && $exports$$.arguments && $exports$$.arguments.forEach(function($exports$$) {
      $exports$$.name.value === $require$$ && $validateObjectInterfaces$$.push($exports$$);
    });
    return $validateObjectInterfaces$$;
  }
  function $getDirectiveArgTypeNode$$($exports$$, $require$$) {
    return ($exports$$ = $getAllDirectiveArgNodes$$($exports$$, $require$$)[0]) && $exports$$.type;
  }
  function $getUnionMemberTypeNodes$$($exports$$, $require$$) {
    return $exports$$.astNode && $exports$$.astNode.types && $exports$$.astNode.types.filter(function($exports$$) {
      return $exports$$.name.value === $require$$;
    });
  }
  function $getEnumValueNodes$$($exports$$, $require$$) {
    return $exports$$.astNode && $exports$$.astNode.values && $exports$$.astNode.values.filter(function($exports$$) {
      return $exports$$.name.value === $require$$;
    });
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.validateSchema = $validateSchema$$;
  $exports$$.assertValidSchema = function($exports$$) {
    $exports$$ = $validateSchema$$($exports$$);
    if (0 !== $exports$$.length) {
      throw Error($exports$$.map(function($exports$$) {
        return $exports$$.message;
      }).join("\n\n"));
    }
  };
  var $_definition$$ = $require$$("module$node_modules$graphql$type$definition"), $_directives$$ = $require$$("module$node_modules$graphql$type$directives"), $_introspection$$ = $require$$("module$node_modules$graphql$type$introspection"), $_schema$$ = $require$$("module$node_modules$graphql$type$schema");
  $_find$jscomp$1__invariant$jscomp$4__objectValues$jscomp$3_global$$ = $require$$("module$node_modules$graphql$jsutils$find");
  var $_find2$$ = $_interopRequireDefault$$($_find$jscomp$1__invariant$jscomp$4__objectValues$jscomp$3_global$$);
  $_find$jscomp$1__invariant$jscomp$4__objectValues$jscomp$3_global$$ = $require$$("module$node_modules$graphql$jsutils$invariant");
  var $_invariant2$$ = $_interopRequireDefault$$($_find$jscomp$1__invariant$jscomp$4__objectValues$jscomp$3_global$$);
  $_find$jscomp$1__invariant$jscomp$4__objectValues$jscomp$3_global$$ = $require$$("module$node_modules$graphql$jsutils$objectValues");
  var $_objectValues2$$ = $_interopRequireDefault$$($_find$jscomp$1__invariant$jscomp$4__objectValues$jscomp$3_global$$), $_GraphQLError$$ = $require$$("module$node_modules$graphql$error$GraphQLError"), $_assertValidName$$ = $require$$("module$node_modules$graphql$utilities$assertValidName"), $_typeComparators$$ = $require$$("module$node_modules$graphql$utilities$typeComparators"), $SchemaValidationContext$$ = function() {
    function $exports$$($require$$) {
      if (!(this instanceof $exports$$)) {
        throw new TypeError("Cannot call a class as a function");
      }
      this._errors = [];
      this.schema = $require$$;
    }
    $exports$$.prototype.reportError = function($exports$$, $require$$) {
      $require$$ = (Array.isArray($require$$) ? $require$$ : [$require$$]).filter(Boolean);
      this.addError(new $_GraphQLError$$.GraphQLError($exports$$, $require$$));
    };
    $exports$$.prototype.addError = function($exports$$) {
      this._errors.push($exports$$);
    };
    $exports$$.prototype.getErrors = function() {
      return this._errors;
    };
    return $exports$$;
  }();
};
