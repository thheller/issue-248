shadow$provide.module$node_modules$graphql$utilities$buildASTSchema = function($_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $_interopRequireDefault$$($exports$$) {
    return $exports$$ && $exports$$.__esModule ? $exports$$ : {default:$exports$$};
  }
  function $buildWrappedType$$($exports$$, $require$$) {
    return $require$$.kind === $_kinds$$.Kind.LIST_TYPE ? (0, $_definition$$.GraphQLList)($buildWrappedType$$($exports$$, $require$$.type)) : $require$$.kind === $_kinds$$.Kind.NON_NULL_TYPE ? ($exports$$ = $buildWrappedType$$($exports$$, $require$$.type), (0, $_definition$$.GraphQLNonNull)((0, $_definition$$.assertNullableType)($exports$$))) : $exports$$;
  }
  function $getNamedTypeNode$$($exports$$) {
    for (; $exports$$.kind === $_kinds$$.Kind.LIST_TYPE || $exports$$.kind === $_kinds$$.Kind.NON_NULL_TYPE;) {
      $exports$$ = $exports$$.type;
    }
    return $exports$$;
  }
  function $buildASTSchema$$($exports$$, $require$$) {
    function $buildWrappedType$$($exports$$) {
      var $require$$ = {};
      $exports$$.operationTypes.forEach(function($exports$$) {
        var $buildWrappedType$$ = $exports$$.type.name.value, $_keyValMap2$$ = $exports$$.operation;
        if ($require$$[$_keyValMap2$$]) {
          throw Error("Must provide only one " + $_keyValMap2$$ + " type in schema.");
        }
        if (!$_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$[$buildWrappedType$$]) {
          throw Error("Specified " + $_keyValMap2$$ + ' type "' + $buildWrappedType$$ + '" not found in document.');
        }
        $require$$[$_keyValMap2$$] = $exports$$.type;
      });
      return $require$$;
    }
    if (!$exports$$ || $exports$$.kind !== $_kinds$$.Kind.DOCUMENT) {
      throw Error("Must provide a document ast.");
    }
    for (var $_keyValMap2$$ = void 0, $getDeprecationReason$$ = [], $_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$ = Object.create(null), $getDescription$$ = [], $_interopRequireDefault$$ = 0; $_interopRequireDefault$$ < $exports$$.definitions.length; $_interopRequireDefault$$++) {
      var $getNamedTypeNode$$ = $exports$$.definitions[$_interopRequireDefault$$];
      switch($getNamedTypeNode$$.kind) {
        case $_kinds$$.Kind.SCHEMA_DEFINITION:
          if ($_keyValMap2$$) {
            throw Error("Must provide only one schema definition.");
          }
          $_keyValMap2$$ = $getNamedTypeNode$$;
          break;
        case $_kinds$$.Kind.SCALAR_TYPE_DEFINITION:
        case $_kinds$$.Kind.OBJECT_TYPE_DEFINITION:
        case $_kinds$$.Kind.INTERFACE_TYPE_DEFINITION:
        case $_kinds$$.Kind.ENUM_TYPE_DEFINITION:
        case $_kinds$$.Kind.UNION_TYPE_DEFINITION:
        case $_kinds$$.Kind.INPUT_OBJECT_TYPE_DEFINITION:
          var $buildASTSchema$$ = $getNamedTypeNode$$.name.value;
          if ($_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$[$buildASTSchema$$]) {
            throw Error('Type "' + $buildASTSchema$$ + '" was defined more than once.');
          }
          $getDeprecationReason$$.push($getNamedTypeNode$$);
          $_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$[$buildASTSchema$$] = $getNamedTypeNode$$;
          break;
        case $_kinds$$.Kind.DIRECTIVE_DEFINITION:
          $getDescription$$.push($getNamedTypeNode$$);
      }
    }
    $exports$$ = $_keyValMap2$$ ? $buildWrappedType$$($_keyValMap2$$) : {query:$_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$.Query, mutation:$_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$.Mutation, subscription:$_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$.Subscription};
    var $options$$ = new $ASTDefinitionBuilder$$($_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$, $require$$, function($exports$$) {
      throw Error('Type "' + $exports$$.name.value + '" not found in document.');
    });
    $getDeprecationReason$$ = $options$$.buildTypes($getDeprecationReason$$);
    $getDescription$$ = $getDescription$$.map(function($exports$$) {
      return $options$$.buildDirective($exports$$);
    });
    $getDescription$$.some(function($exports$$) {
      return "skip" === $exports$$.name;
    }) || $getDescription$$.push($_directives$$.GraphQLSkipDirective);
    $getDescription$$.some(function($exports$$) {
      return "include" === $exports$$.name;
    }) || $getDescription$$.push($_directives$$.GraphQLIncludeDirective);
    $getDescription$$.some(function($exports$$) {
      return "deprecated" === $exports$$.name;
    }) || $getDescription$$.push($_directives$$.GraphQLDeprecatedDirective);
    return new $_schema$$.GraphQLSchema({query:$exports$$.query ? $options$$.buildType($exports$$.query) : null, mutation:$exports$$.mutation ? $options$$.buildType($exports$$.mutation) : null, subscription:$exports$$.subscription ? $options$$.buildType($exports$$.subscription) : null, types:$getDeprecationReason$$, directives:$getDescription$$, astNode:$_keyValMap2$$, assumeValid:$require$$ && $require$$.assumeValid, allowedLegacyNames:$require$$ && $require$$.allowedLegacyNames});
  }
  function $getDeprecationReason$$($exports$$) {
    return ($exports$$ = (0, $_values$$.getDirectiveValues)($_directives$$.GraphQLDeprecatedDirective, $exports$$)) && $exports$$.reason;
  }
  function $getDescription$$($exports$$, $require$$) {
    if ($exports$$.description) {
      return $exports$$.description.value;
    }
    if ($require$$ && $require$$.commentDescriptions) {
      if ($require$$ = $exports$$.loc) {
        $exports$$ = [];
        for ($require$$ = $require$$.startToken.prev; $require$$ && $require$$.kind === $_lexer$$.TokenKind.COMMENT && $require$$.next && $require$$.prev && $require$$.line + 1 === $require$$.next.line && $require$$.line !== $require$$.prev.line;) {
          $exports$$.push(String($require$$.value)), $require$$ = $require$$.prev;
        }
        $exports$$ = $exports$$.reverse().join("\n");
      } else {
        $exports$$ = void 0;
      }
      if (void 0 !== $exports$$) {
        return (0, $_blockStringValue2$$.default)("\n" + $exports$$);
      }
    }
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.ASTDefinitionBuilder = void 0;
  $exports$$.buildASTSchema = $buildASTSchema$$;
  $exports$$.getDescription = $getDescription$$;
  $exports$$.buildSchema = function($exports$$, $require$$) {
    return $buildASTSchema$$((0, $_parser$$.parse)($exports$$, $require$$), $require$$);
  };
  $_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$ = $require$$("module$node_modules$graphql$jsutils$keyMap");
  var $_keyMap2$$ = $_interopRequireDefault$$($_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$);
  $_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$ = $require$$("module$node_modules$graphql$jsutils$keyValMap");
  var $_keyValMap2$$ = $_interopRequireDefault$$($_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$), $_valueFromAST$$ = $require$$("module$node_modules$graphql$utilities$valueFromAST");
  $_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$ = $require$$("module$node_modules$graphql$language$blockStringValue");
  var $_blockStringValue2$$ = $_interopRequireDefault$$($_blockStringValue$jscomp$1__keyMap$jscomp$5__keyValMap$jscomp$2_global$$), $_lexer$$ = $require$$("module$node_modules$graphql$language$lexer"), $_parser$$ = $require$$("module$node_modules$graphql$language$parser"), $_values$$ = $require$$("module$node_modules$graphql$execution$values"), $_kinds$$ = $require$$("module$node_modules$graphql$language$kinds"), $_definition$$ = $require$$("module$node_modules$graphql$type$definition"), $_directives$$ = 
  $require$$("module$node_modules$graphql$type$directives"), $_introspection$$ = $require$$("module$node_modules$graphql$type$introspection"), $_scalars$$ = $require$$("module$node_modules$graphql$type$scalars"), $_schema$$ = $require$$("module$node_modules$graphql$type$schema"), $ASTDefinitionBuilder$$ = $exports$$.ASTDefinitionBuilder = function() {
    function $exports$$($require$$, $buildWrappedType$$, $_keyValMap2$$) {
      if (!(this instanceof $exports$$)) {
        throw new TypeError("Cannot call a class as a function");
      }
      this._typeDefinitionsMap = $require$$;
      this._options = $buildWrappedType$$;
      this._resolveType = $_keyValMap2$$;
      this._cache = (0, $_keyMap2$$.default)($_scalars$$.specifiedScalarTypes.concat($_introspection$$.introspectionTypes), function($exports$$) {
        return $exports$$.name;
      });
    }
    $exports$$.prototype.buildTypes = function($exports$$) {
      var $require$$ = this;
      return $exports$$.map(function($exports$$) {
        return $require$$.buildType($exports$$);
      });
    };
    $exports$$.prototype.buildType = function($exports$$) {
      var $require$$ = $exports$$.name.value;
      if (!this._cache[$require$$]) {
        if ($exports$$.kind === $_kinds$$.Kind.NAMED_TYPE) {
          var $buildWrappedType$$ = this._typeDefinitionsMap[$require$$];
          this._cache[$require$$] = $buildWrappedType$$ ? this._makeSchemaDef($buildWrappedType$$) : this._resolveType($exports$$);
        } else {
          this._cache[$require$$] = this._makeSchemaDef($exports$$);
        }
      }
      return this._cache[$require$$];
    };
    $exports$$.prototype._buildWrappedType = function($exports$$) {
      var $require$$ = this.buildType($getNamedTypeNode$$($exports$$));
      return $buildWrappedType$$($require$$, $exports$$);
    };
    $exports$$.prototype.buildDirective = function($exports$$) {
      return new $_directives$$.GraphQLDirective({name:$exports$$.name.value, description:$getDescription$$($exports$$, this._options), locations:$exports$$.locations.map(function($exports$$) {
        return $exports$$.value;
      }), args:$exports$$.arguments && this._makeInputValues($exports$$.arguments), astNode:$exports$$});
    };
    $exports$$.prototype.buildField = function($exports$$) {
      return {type:this._buildWrappedType($exports$$.type), description:$getDescription$$($exports$$, this._options), args:$exports$$.arguments && this._makeInputValues($exports$$.arguments), deprecationReason:$getDeprecationReason$$($exports$$), astNode:$exports$$};
    };
    $exports$$.prototype._makeSchemaDef = function($exports$$) {
      switch($exports$$.kind) {
        case $_kinds$$.Kind.OBJECT_TYPE_DEFINITION:
          return this._makeTypeDef($exports$$);
        case $_kinds$$.Kind.INTERFACE_TYPE_DEFINITION:
          return this._makeInterfaceDef($exports$$);
        case $_kinds$$.Kind.ENUM_TYPE_DEFINITION:
          return this._makeEnumDef($exports$$);
        case $_kinds$$.Kind.UNION_TYPE_DEFINITION:
          return this._makeUnionDef($exports$$);
        case $_kinds$$.Kind.SCALAR_TYPE_DEFINITION:
          return this._makeScalarDef($exports$$);
        case $_kinds$$.Kind.INPUT_OBJECT_TYPE_DEFINITION:
          return this._makeInputObjectDef($exports$$);
        default:
          throw Error('Type kind "' + $exports$$.kind + '" not supported.');
      }
    };
    $exports$$.prototype._makeTypeDef = function($exports$$) {
      var $require$$ = this, $buildWrappedType$$ = $exports$$.interfaces;
      return new $_definition$$.GraphQLObjectType({name:$exports$$.name.value, description:$getDescription$$($exports$$, this._options), fields:function() {
        return $require$$._makeFieldDefMap($exports$$);
      }, interfaces:$buildWrappedType$$ ? function() {
        return $require$$.buildTypes($buildWrappedType$$);
      } : [], astNode:$exports$$});
    };
    $exports$$.prototype._makeFieldDefMap = function($exports$$) {
      var $require$$ = this;
      return $exports$$.fields ? (0, $_keyValMap2$$.default)($exports$$.fields, function($exports$$) {
        return $exports$$.name.value;
      }, function($exports$$) {
        return $require$$.buildField($exports$$);
      }) : {};
    };
    $exports$$.prototype._makeInputValues = function($exports$$) {
      var $require$$ = this;
      return (0, $_keyValMap2$$.default)($exports$$, function($exports$$) {
        return $exports$$.name.value;
      }, function($exports$$) {
        var $buildWrappedType$$ = $require$$._buildWrappedType($exports$$.type);
        return {type:$buildWrappedType$$, description:$getDescription$$($exports$$, $require$$._options), defaultValue:(0, $_valueFromAST$$.valueFromAST)($exports$$.defaultValue, $buildWrappedType$$), astNode:$exports$$};
      });
    };
    $exports$$.prototype._makeInterfaceDef = function($exports$$) {
      var $require$$ = this;
      return new $_definition$$.GraphQLInterfaceType({name:$exports$$.name.value, description:$getDescription$$($exports$$, this._options), fields:function() {
        return $require$$._makeFieldDefMap($exports$$);
      }, astNode:$exports$$});
    };
    $exports$$.prototype._makeEnumDef = function($exports$$) {
      var $require$$ = this;
      return new $_definition$$.GraphQLEnumType({name:$exports$$.name.value, description:$getDescription$$($exports$$, this._options), values:$exports$$.values ? (0, $_keyValMap2$$.default)($exports$$.values, function($exports$$) {
        return $exports$$.name.value;
      }, function($exports$$) {
        return {description:$getDescription$$($exports$$, $require$$._options), deprecationReason:$getDeprecationReason$$($exports$$), astNode:$exports$$};
      }) : {}, astNode:$exports$$});
    };
    $exports$$.prototype._makeUnionDef = function($exports$$) {
      return new $_definition$$.GraphQLUnionType({name:$exports$$.name.value, description:$getDescription$$($exports$$, this._options), types:$exports$$.types ? this.buildTypes($exports$$.types) : [], astNode:$exports$$});
    };
    $exports$$.prototype._makeScalarDef = function($exports$$) {
      return new $_definition$$.GraphQLScalarType({name:$exports$$.name.value, description:$getDescription$$($exports$$, this._options), astNode:$exports$$, serialize:function($exports$$) {
        return $exports$$;
      }});
    };
    $exports$$.prototype._makeInputObjectDef = function($exports$$) {
      var $require$$ = this;
      return new $_definition$$.GraphQLInputObjectType({name:$exports$$.name.value, description:$getDescription$$($exports$$, this._options), fields:function() {
        return $exports$$.fields ? $require$$._makeInputValues($exports$$.fields) : {};
      }, astNode:$exports$$});
    };
    return $exports$$;
  }();
};
