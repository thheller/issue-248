shadow$provide.module$node_modules$graphql$utilities$TypeInfo = function($_find$jscomp$2_global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $getFieldDef$$($exports$$, $require$$, $_kinds$$) {
    $_kinds$$ = $_kinds$$.name.value;
    if ($_kinds$$ === $_introspection$$.SchemaMetaFieldDef.name && $exports$$.getQueryType() === $require$$) {
      return $_introspection$$.SchemaMetaFieldDef;
    }
    if ($_kinds$$ === $_introspection$$.TypeMetaFieldDef.name && $exports$$.getQueryType() === $require$$) {
      return $_introspection$$.TypeMetaFieldDef;
    }
    if ($_kinds$$ === $_introspection$$.TypeNameMetaFieldDef.name && (0, $_definition$$.isCompositeType)($require$$)) {
      return $_introspection$$.TypeNameMetaFieldDef;
    }
    if ((0, $_definition$$.isObjectType)($require$$) || (0, $_definition$$.isInterfaceType)($require$$)) {
      return $require$$.getFields()[$_kinds$$];
    }
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.TypeInfo = void 0;
  var $_kinds$$ = $require$$("module$node_modules$graphql$language$kinds"), $_definition$$ = $require$$("module$node_modules$graphql$type$definition"), $_introspection$$ = $require$$("module$node_modules$graphql$type$introspection"), $_typeFromAST$$ = $require$$("module$node_modules$graphql$utilities$typeFromAST"), $_find2$$ = ($_find$jscomp$2_global$$ = $require$$("module$node_modules$graphql$jsutils$find")) && $_find$jscomp$2_global$$.__esModule ? $_find$jscomp$2_global$$ : {default:$_find$jscomp$2_global$$};
  $exports$$.TypeInfo = function() {
    function $exports$$($require$$, $_kinds$$, $_typeFromAST$$) {
      if (!(this instanceof $exports$$)) {
        throw new TypeError("Cannot call a class as a function");
      }
      this._schema = $require$$;
      this._typeStack = [];
      this._parentTypeStack = [];
      this._inputTypeStack = [];
      this._fieldDefStack = [];
      this._enumValue = this._argument = this._directive = null;
      this._getFieldDef = $_kinds$$ || $getFieldDef$$;
      $_typeFromAST$$ && ((0, $_definition$$.isInputType)($_typeFromAST$$) && this._inputTypeStack.push($_typeFromAST$$), (0, $_definition$$.isCompositeType)($_typeFromAST$$) && this._parentTypeStack.push($_typeFromAST$$), (0, $_definition$$.isOutputType)($_typeFromAST$$) && this._typeStack.push($_typeFromAST$$));
    }
    $exports$$.prototype.getType = function() {
      if (0 < this._typeStack.length) {
        return this._typeStack[this._typeStack.length - 1];
      }
    };
    $exports$$.prototype.getParentType = function() {
      if (0 < this._parentTypeStack.length) {
        return this._parentTypeStack[this._parentTypeStack.length - 1];
      }
    };
    $exports$$.prototype.getInputType = function() {
      if (0 < this._inputTypeStack.length) {
        return this._inputTypeStack[this._inputTypeStack.length - 1];
      }
    };
    $exports$$.prototype.getParentInputType = function() {
      if (1 < this._inputTypeStack.length) {
        return this._inputTypeStack[this._inputTypeStack.length - 2];
      }
    };
    $exports$$.prototype.getFieldDef = function() {
      if (0 < this._fieldDefStack.length) {
        return this._fieldDefStack[this._fieldDefStack.length - 1];
      }
    };
    $exports$$.prototype.getDirective = function() {
      return this._directive;
    };
    $exports$$.prototype.getArgument = function() {
      return this._argument;
    };
    $exports$$.prototype.getEnumValue = function() {
      return this._enumValue;
    };
    $exports$$.prototype.enter = function($exports$$) {
      var $require$$ = this._schema;
      switch($exports$$.kind) {
        case $_kinds$$.Kind.SELECTION_SET:
          $require$$ = (0, $_definition$$.getNamedType)(this.getType());
          this._parentTypeStack.push((0, $_definition$$.isCompositeType)($require$$) ? $require$$ : void 0);
          break;
        case $_kinds$$.Kind.FIELD:
          var $node$$ = this.getParentType(), $_find$jscomp$2_global$$ = void 0, $getFieldDef$$ = void 0;
          $node$$ && ($_find$jscomp$2_global$$ = this._getFieldDef($require$$, $node$$, $exports$$)) && ($getFieldDef$$ = $_find$jscomp$2_global$$.type);
          this._fieldDefStack.push($_find$jscomp$2_global$$);
          this._typeStack.push((0, $_definition$$.isOutputType)($getFieldDef$$) ? $getFieldDef$$ : void 0);
          break;
        case $_kinds$$.Kind.DIRECTIVE:
          this._directive = $require$$.getDirective($exports$$.name.value);
          break;
        case $_kinds$$.Kind.OPERATION_DEFINITION:
          $node$$ = void 0;
          "query" === $exports$$.operation ? $node$$ = $require$$.getQueryType() : "mutation" === $exports$$.operation ? $node$$ = $require$$.getMutationType() : "subscription" === $exports$$.operation && ($node$$ = $require$$.getSubscriptionType());
          this._typeStack.push((0, $_definition$$.isObjectType)($node$$) ? $node$$ : void 0);
          break;
        case $_kinds$$.Kind.INLINE_FRAGMENT:
        case $_kinds$$.Kind.FRAGMENT_DEFINITION:
          $require$$ = ($node$$ = $exports$$.typeCondition) ? (0, $_typeFromAST$$.typeFromAST)($require$$, $node$$) : (0, $_definition$$.getNamedType)(this.getType());
          this._typeStack.push((0, $_definition$$.isOutputType)($require$$) ? $require$$ : void 0);
          break;
        case $_kinds$$.Kind.VARIABLE_DEFINITION:
          $require$$ = (0, $_typeFromAST$$.typeFromAST)($require$$, $exports$$.type);
          this._inputTypeStack.push((0, $_definition$$.isInputType)($require$$) ? $require$$ : void 0);
          break;
        case $_kinds$$.Kind.ARGUMENT:
          $node$$ = $require$$ = void 0;
          if ($_find$jscomp$2_global$$ = this.getDirective() || this.getFieldDef()) {
            if ($require$$ = (0, $_find2$$.default)($_find$jscomp$2_global$$.args, function($require$$) {
              return $require$$.name === $exports$$.name.value;
            })) {
              $node$$ = $require$$.type;
            }
          }
          this._argument = $require$$;
          this._inputTypeStack.push((0, $_definition$$.isInputType)($node$$) ? $node$$ : void 0);
          break;
        case $_kinds$$.Kind.LIST:
          $require$$ = (0, $_definition$$.getNullableType)(this.getInputType());
          $require$$ = (0, $_definition$$.isListType)($require$$) ? $require$$.ofType : $require$$;
          this._inputTypeStack.push((0, $_definition$$.isInputType)($require$$) ? $require$$ : void 0);
          break;
        case $_kinds$$.Kind.OBJECT_FIELD:
          $node$$ = (0, $_definition$$.getNamedType)(this.getInputType());
          $require$$ = void 0;
          (0, $_definition$$.isInputObjectType)($node$$) && ($node$$ = $node$$.getFields()[$exports$$.name.value]) && ($require$$ = $node$$.type);
          this._inputTypeStack.push((0, $_definition$$.isInputType)($require$$) ? $require$$ : void 0);
          break;
        case $_kinds$$.Kind.ENUM:
          $require$$ = (0, $_definition$$.getNamedType)(this.getInputType()), $node$$ = void 0, (0, $_definition$$.isEnumType)($require$$) && ($node$$ = $require$$.getValue($exports$$.value)), this._enumValue = $node$$;
      }
    };
    $exports$$.prototype.leave = function($exports$$) {
      switch($exports$$.kind) {
        case $_kinds$$.Kind.SELECTION_SET:
          this._parentTypeStack.pop();
          break;
        case $_kinds$$.Kind.FIELD:
          this._fieldDefStack.pop();
          this._typeStack.pop();
          break;
        case $_kinds$$.Kind.DIRECTIVE:
          this._directive = null;
          break;
        case $_kinds$$.Kind.OPERATION_DEFINITION:
        case $_kinds$$.Kind.INLINE_FRAGMENT:
        case $_kinds$$.Kind.FRAGMENT_DEFINITION:
          this._typeStack.pop();
          break;
        case $_kinds$$.Kind.VARIABLE_DEFINITION:
          this._inputTypeStack.pop();
          break;
        case $_kinds$$.Kind.ARGUMENT:
          this._argument = null;
          this._inputTypeStack.pop();
          break;
        case $_kinds$$.Kind.LIST:
        case $_kinds$$.Kind.OBJECT_FIELD:
          this._inputTypeStack.pop();
          break;
        case $_kinds$$.Kind.ENUM:
          this._enumValue = null;
      }
    };
    return $exports$$;
  }();
};
