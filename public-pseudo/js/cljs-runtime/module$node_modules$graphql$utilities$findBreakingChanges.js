shadow$provide.module$node_modules$graphql$utilities$findBreakingChanges = function($_keyMap$jscomp$7_global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $findRemovedTypes$$($exports$$, $require$$) {
    $exports$$ = $exports$$.getTypeMap();
    var $findTypesThatChangedKind$$ = $require$$.getTypeMap(), $isChangeSafeForInputObjectFieldOrFieldArg$$ = [];
    Object.keys($exports$$).forEach(function($exports$$) {
      $findTypesThatChangedKind$$[$exports$$] || $isChangeSafeForInputObjectFieldOrFieldArg$$.push({type:$BreakingChangeType$$.TYPE_REMOVED, description:$exports$$ + " was removed."});
    });
    return $isChangeSafeForInputObjectFieldOrFieldArg$$;
  }
  function $findTypesThatChangedKind$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = $exports$$.getTypeMap(), $isChangeSafeForInputObjectFieldOrFieldArg$$ = $require$$.getTypeMap(), $_keyMap$jscomp$7_global$$ = [];
    Object.keys($findTypesThatChangedKind$$).forEach(function($exports$$) {
      if ($isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$]) {
        var $require$$ = $findTypesThatChangedKind$$[$exports$$], $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$ = $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$];
        $require$$.constructor !== $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.constructor && $_keyMap$jscomp$7_global$$.push({type:$BreakingChangeType$$.TYPE_CHANGED_KIND, description:$exports$$ + " changed from " + ($typeKindName$$($require$$) + " to " + $typeKindName$$($findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$) + ".")});
      }
    });
    return $_keyMap$jscomp$7_global$$;
  }
  function $findArgChanges$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = $exports$$.getTypeMap(), $_keyMap$jscomp$7_global$$ = $require$$.getTypeMap(), $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$ = [], $findFieldsThatChangedTypeOnInputObjectTypes$$ = [];
    Object.keys($findTypesThatChangedKind$$).forEach(function($exports$$) {
      var $require$$ = $findTypesThatChangedKind$$[$exports$$], $findRemovedTypes$$ = $_keyMap$jscomp$7_global$$[$exports$$];
      if (((0, $_definition$$.isObjectType)($require$$) || (0, $_definition$$.isInterfaceType)($require$$)) && ((0, $_definition$$.isObjectType)($findRemovedTypes$$) || (0, $_definition$$.isInterfaceType)($findRemovedTypes$$)) && $findRemovedTypes$$.constructor === $require$$.constructor) {
        var $findArgChanges$$ = $require$$.getFields(), $typeKindName$$ = $findRemovedTypes$$.getFields();
        Object.keys($findArgChanges$$).forEach(function($exports$$) {
          $typeKindName$$[$exports$$] && ($findArgChanges$$[$exports$$].args.forEach(function($findTypesThatChangedKind$$) {
            var $_keyMap$jscomp$7_global$$ = $typeKindName$$[$exports$$].args.find(function($exports$$) {
              return $exports$$.name === $findTypesThatChangedKind$$.name;
            });
            $_keyMap$jscomp$7_global$$ ? $isChangeSafeForInputObjectFieldOrFieldArg$$($findTypesThatChangedKind$$.type, $_keyMap$jscomp$7_global$$.type) ? void 0 !== $findTypesThatChangedKind$$.defaultValue && $findTypesThatChangedKind$$.defaultValue !== $_keyMap$jscomp$7_global$$.defaultValue && $findFieldsThatChangedTypeOnInputObjectTypes$$.push({type:$DangerousChangeType$$.ARG_DEFAULT_VALUE_CHANGE, description:$require$$.name + "." + $exports$$ + " arg " + ($findTypesThatChangedKind$$.name + " has changed defaultValue")}) : 
            $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.push({type:$BreakingChangeType$$.ARG_CHANGED_KIND, description:$require$$.name + "." + $exports$$ + " arg " + ($findTypesThatChangedKind$$.name + " has changed type from ") + ($findTypesThatChangedKind$$.type.toString() + " to " + $_keyMap$jscomp$7_global$$.type.toString())}) : $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.push({type:$BreakingChangeType$$.ARG_REMOVED, description:$require$$.name + "." + $exports$$ + " arg " + 
            ($findTypesThatChangedKind$$.name + " was removed")});
          }), $typeKindName$$[$exports$$].args.forEach(function($require$$) {
            $findArgChanges$$[$exports$$].args.find(function($exports$$) {
              return $exports$$.name === $require$$.name;
            }) || ((0, $_definition$$.isNonNullType)($require$$.type) ? $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.push({type:$BreakingChangeType$$.NON_NULL_ARG_ADDED, description:"A non-null arg " + $require$$.name + " on " + ($findRemovedTypes$$.name + "." + $exports$$ + " was added")}) : $findFieldsThatChangedTypeOnInputObjectTypes$$.push({type:$DangerousChangeType$$.NULLABLE_ARG_ADDED, description:"A nullable arg " + $require$$.name + " on " + ($findRemovedTypes$$.name + "." + $exports$$ + 
            " was added")}));
          }));
        });
      }
    });
    return {breakingChanges:$findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$, dangerousChanges:$findFieldsThatChangedTypeOnInputObjectTypes$$};
  }
  function $typeKindName$$($exports$$) {
    if ((0, $_definition$$.isScalarType)($exports$$)) {
      return "a Scalar type";
    }
    if ((0, $_definition$$.isObjectType)($exports$$)) {
      return "an Object type";
    }
    if ((0, $_definition$$.isInterfaceType)($exports$$)) {
      return "an Interface type";
    }
    if ((0, $_definition$$.isUnionType)($exports$$)) {
      return "a Union type";
    }
    if ((0, $_definition$$.isEnumType)($exports$$)) {
      return "an Enum type";
    }
    if ((0, $_definition$$.isInputObjectType)($exports$$)) {
      return "an Input type";
    }
    throw new TypeError("Unknown type " + $exports$$.constructor.name);
  }
  function $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = $exports$$.getTypeMap(), $isChangeSafeForInputObjectFieldOrFieldArg$$ = $require$$.getTypeMap(), $_keyMap$jscomp$7_global$$ = [];
    Object.keys($findTypesThatChangedKind$$).forEach(function($exports$$) {
      var $require$$ = $findTypesThatChangedKind$$[$exports$$], $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$ = $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$];
      if (((0, $_definition$$.isObjectType)($require$$) || (0, $_definition$$.isInterfaceType)($require$$)) && ((0, $_definition$$.isObjectType)($findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$) || (0, $_definition$$.isInterfaceType)($findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$)) && $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.constructor === $require$$.constructor) {
        var $findFieldsThatChangedTypeOnInputObjectTypes$$ = $require$$.getFields(), $findRemovedTypes$$ = $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.getFields();
        Object.keys($findFieldsThatChangedTypeOnInputObjectTypes$$).forEach(function($require$$) {
          if ($require$$ in $findRemovedTypes$$) {
            var $findTypesThatChangedKind$$ = $findFieldsThatChangedTypeOnInputObjectTypes$$[$require$$].type, $isChangeSafeForInputObjectFieldOrFieldArg$$ = $findRemovedTypes$$[$require$$].type;
            $isChangeSafeForObjectOrInterfaceField$$($findTypesThatChangedKind$$, $isChangeSafeForInputObjectFieldOrFieldArg$$) || ($findTypesThatChangedKind$$ = (0, $_definition$$.isNamedType)($findTypesThatChangedKind$$) ? $findTypesThatChangedKind$$.name : $findTypesThatChangedKind$$.toString(), $isChangeSafeForInputObjectFieldOrFieldArg$$ = (0, $_definition$$.isNamedType)($isChangeSafeForInputObjectFieldOrFieldArg$$) ? $isChangeSafeForInputObjectFieldOrFieldArg$$.name : $isChangeSafeForInputObjectFieldOrFieldArg$$.toString(), 
            $_keyMap$jscomp$7_global$$.push({type:$BreakingChangeType$$.FIELD_CHANGED_KIND, description:$exports$$ + "." + $require$$ + " changed type from " + ($findTypesThatChangedKind$$ + " to " + $isChangeSafeForInputObjectFieldOrFieldArg$$ + ".")}));
          } else {
            $_keyMap$jscomp$7_global$$.push({type:$BreakingChangeType$$.FIELD_REMOVED, description:$exports$$ + "." + $require$$ + " was removed."});
          }
        });
      }
    });
    return $_keyMap$jscomp$7_global$$;
  }
  function $findFieldsThatChangedTypeOnInputObjectTypes$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = $exports$$.getTypeMap(), $_keyMap$jscomp$7_global$$ = $require$$.getTypeMap(), $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$ = [], $findFieldsThatChangedTypeOnInputObjectTypes$$ = [];
    Object.keys($findTypesThatChangedKind$$).forEach(function($exports$$) {
      var $require$$ = $findTypesThatChangedKind$$[$exports$$], $findRemovedTypes$$ = $_keyMap$jscomp$7_global$$[$exports$$];
      if ((0, $_definition$$.isInputObjectType)($require$$) && (0, $_definition$$.isInputObjectType)($findRemovedTypes$$)) {
        var $findArgChanges$$ = $require$$.getFields(), $typeKindName$$ = $findRemovedTypes$$.getFields();
        Object.keys($findArgChanges$$).forEach(function($require$$) {
          if ($require$$ in $typeKindName$$) {
            var $findTypesThatChangedKind$$ = $findArgChanges$$[$require$$].type, $_keyMap$jscomp$7_global$$ = $typeKindName$$[$require$$].type;
            $isChangeSafeForInputObjectFieldOrFieldArg$$($findTypesThatChangedKind$$, $_keyMap$jscomp$7_global$$) || ($findTypesThatChangedKind$$ = (0, $_definition$$.isNamedType)($findTypesThatChangedKind$$) ? $findTypesThatChangedKind$$.name : $findTypesThatChangedKind$$.toString(), $_keyMap$jscomp$7_global$$ = (0, $_definition$$.isNamedType)($_keyMap$jscomp$7_global$$) ? $_keyMap$jscomp$7_global$$.name : $_keyMap$jscomp$7_global$$.toString(), $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.push({type:$BreakingChangeType$$.FIELD_CHANGED_KIND, 
            description:$exports$$ + "." + $require$$ + " changed type from " + ($findTypesThatChangedKind$$ + " to " + $_keyMap$jscomp$7_global$$ + ".")}));
          } else {
            $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.push({type:$BreakingChangeType$$.FIELD_REMOVED, description:$exports$$ + "." + $require$$ + " was removed."});
          }
        });
        Object.keys($typeKindName$$).forEach(function($exports$$) {
          $exports$$ in $findArgChanges$$ || ((0, $_definition$$.isNonNullType)($typeKindName$$[$exports$$].type) ? $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.push({type:$BreakingChangeType$$.NON_NULL_INPUT_FIELD_ADDED, description:"A non-null field " + $exports$$ + " on " + ("input type " + $findRemovedTypes$$.name + " was added.")}) : $findFieldsThatChangedTypeOnInputObjectTypes$$.push({type:$DangerousChangeType$$.NULLABLE_INPUT_FIELD_ADDED, description:"A nullable field " + $exports$$ + 
          " on " + ("input type " + $findRemovedTypes$$.name + " was added.")}));
        });
      }
    });
    return {breakingChanges:$findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$, dangerousChanges:$findFieldsThatChangedTypeOnInputObjectTypes$$};
  }
  function $isChangeSafeForObjectOrInterfaceField$$($exports$$, $require$$) {
    return (0, $_definition$$.isNamedType)($exports$$) ? (0, $_definition$$.isNamedType)($require$$) && $exports$$.name === $require$$.name || (0, $_definition$$.isNonNullType)($require$$) && $isChangeSafeForObjectOrInterfaceField$$($exports$$, $require$$.ofType) : (0, $_definition$$.isListType)($exports$$) ? (0, $_definition$$.isListType)($require$$) && $isChangeSafeForObjectOrInterfaceField$$($exports$$.ofType, $require$$.ofType) || (0, $_definition$$.isNonNullType)($require$$) && $isChangeSafeForObjectOrInterfaceField$$($exports$$, 
    $require$$.ofType) : (0, $_definition$$.isNonNullType)($exports$$) ? (0, $_definition$$.isNonNullType)($require$$) && $isChangeSafeForObjectOrInterfaceField$$($exports$$.ofType, $require$$.ofType) : !1;
  }
  function $isChangeSafeForInputObjectFieldOrFieldArg$$($exports$$, $require$$) {
    return (0, $_definition$$.isNamedType)($exports$$) ? (0, $_definition$$.isNamedType)($require$$) && $exports$$.name === $require$$.name : (0, $_definition$$.isListType)($exports$$) ? (0, $_definition$$.isListType)($require$$) && $isChangeSafeForInputObjectFieldOrFieldArg$$($exports$$.ofType, $require$$.ofType) : (0, $_definition$$.isNonNullType)($exports$$) ? (0, $_definition$$.isNonNullType)($require$$) && $isChangeSafeForInputObjectFieldOrFieldArg$$($exports$$.ofType, $require$$.ofType) || 
    !(0, $_definition$$.isNonNullType)($require$$) && $isChangeSafeForInputObjectFieldOrFieldArg$$($exports$$.ofType, $require$$) : !1;
  }
  function $findTypesRemovedFromUnions$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = $exports$$.getTypeMap(), $isChangeSafeForInputObjectFieldOrFieldArg$$ = $require$$.getTypeMap(), $_keyMap$jscomp$7_global$$ = [];
    Object.keys($findTypesThatChangedKind$$).forEach(function($exports$$) {
      var $require$$ = $findTypesThatChangedKind$$[$exports$$], $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$ = $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$];
      if ((0, $_definition$$.isUnionType)($require$$) && (0, $_definition$$.isUnionType)($findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$)) {
        var $findRemovedTypes$$ = Object.create(null);
        $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.getTypes().forEach(function($exports$$) {
          $findRemovedTypes$$[$exports$$.name] = !0;
        });
        $require$$.getTypes().forEach(function($require$$) {
          $findRemovedTypes$$[$require$$.name] || $_keyMap$jscomp$7_global$$.push({type:$BreakingChangeType$$.TYPE_REMOVED_FROM_UNION, description:$require$$.name + " was removed from union type " + $exports$$ + "."});
        });
      }
    });
    return $_keyMap$jscomp$7_global$$;
  }
  function $findTypesAddedToUnions$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = $exports$$.getTypeMap(), $isChangeSafeForInputObjectFieldOrFieldArg$$ = $require$$.getTypeMap(), $_keyMap$jscomp$7_global$$ = [];
    Object.keys($isChangeSafeForInputObjectFieldOrFieldArg$$).forEach(function($exports$$) {
      var $require$$ = $findTypesThatChangedKind$$[$exports$$], $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$ = $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$];
      if ((0, $_definition$$.isUnionType)($require$$) && (0, $_definition$$.isUnionType)($findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$)) {
        var $findRemovedTypes$$ = Object.create(null);
        $require$$.getTypes().forEach(function($exports$$) {
          $findRemovedTypes$$[$exports$$.name] = !0;
        });
        $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.getTypes().forEach(function($require$$) {
          $findRemovedTypes$$[$require$$.name] || $_keyMap$jscomp$7_global$$.push({type:$DangerousChangeType$$.TYPE_ADDED_TO_UNION, description:$require$$.name + " was added to union type " + $exports$$ + "."});
        });
      }
    });
    return $_keyMap$jscomp$7_global$$;
  }
  function $findValuesRemovedFromEnums$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = $exports$$.getTypeMap(), $isChangeSafeForInputObjectFieldOrFieldArg$$ = $require$$.getTypeMap(), $_keyMap$jscomp$7_global$$ = [];
    Object.keys($findTypesThatChangedKind$$).forEach(function($exports$$) {
      var $require$$ = $findTypesThatChangedKind$$[$exports$$], $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$ = $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$];
      if ((0, $_definition$$.isEnumType)($require$$) && (0, $_definition$$.isEnumType)($findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$)) {
        var $findRemovedTypes$$ = Object.create(null);
        $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.getValues().forEach(function($exports$$) {
          $findRemovedTypes$$[$exports$$.name] = !0;
        });
        $require$$.getValues().forEach(function($require$$) {
          $findRemovedTypes$$[$require$$.name] || $_keyMap$jscomp$7_global$$.push({type:$BreakingChangeType$$.VALUE_REMOVED_FROM_ENUM, description:$require$$.name + " was removed from enum type " + $exports$$ + "."});
        });
      }
    });
    return $_keyMap$jscomp$7_global$$;
  }
  function $findValuesAddedToEnums$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = $exports$$.getTypeMap(), $isChangeSafeForInputObjectFieldOrFieldArg$$ = $require$$.getTypeMap(), $_keyMap$jscomp$7_global$$ = [];
    Object.keys($findTypesThatChangedKind$$).forEach(function($exports$$) {
      var $require$$ = $findTypesThatChangedKind$$[$exports$$], $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$ = $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$];
      if ((0, $_definition$$.isEnumType)($require$$) && (0, $_definition$$.isEnumType)($findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$)) {
        var $findRemovedTypes$$ = Object.create(null);
        $require$$.getValues().forEach(function($exports$$) {
          $findRemovedTypes$$[$exports$$.name] = !0;
        });
        $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.getValues().forEach(function($require$$) {
          $findRemovedTypes$$[$require$$.name] || $_keyMap$jscomp$7_global$$.push({type:$DangerousChangeType$$.VALUE_ADDED_TO_ENUM, description:$require$$.name + " was added to enum type " + $exports$$ + "."});
        });
      }
    });
    return $_keyMap$jscomp$7_global$$;
  }
  function $findInterfacesRemovedFromObjectTypes$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = $exports$$.getTypeMap(), $isChangeSafeForInputObjectFieldOrFieldArg$$ = $require$$.getTypeMap(), $_keyMap$jscomp$7_global$$ = [];
    Object.keys($findTypesThatChangedKind$$).forEach(function($exports$$) {
      var $require$$ = $findTypesThatChangedKind$$[$exports$$], $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$ = $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$];
      if ((0, $_definition$$.isObjectType)($require$$) && (0, $_definition$$.isObjectType)($findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$)) {
        $require$$ = $require$$.getInterfaces();
        var $findRemovedTypes$$ = $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.getInterfaces();
        $require$$.forEach(function($require$$) {
          $findRemovedTypes$$.some(function($exports$$) {
            return $exports$$.name === $require$$.name;
          }) || $_keyMap$jscomp$7_global$$.push({type:$BreakingChangeType$$.INTERFACE_REMOVED_FROM_OBJECT, description:$exports$$ + " no longer implements interface " + ($require$$.name + ".")});
        });
      }
    });
    return $_keyMap$jscomp$7_global$$;
  }
  function $findInterfacesAddedToObjectTypes$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = $exports$$.getTypeMap(), $isChangeSafeForInputObjectFieldOrFieldArg$$ = $require$$.getTypeMap(), $_keyMap$jscomp$7_global$$ = [];
    Object.keys($isChangeSafeForInputObjectFieldOrFieldArg$$).forEach(function($exports$$) {
      var $require$$ = $findTypesThatChangedKind$$[$exports$$], $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$ = $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$];
      if ((0, $_definition$$.isObjectType)($require$$) && (0, $_definition$$.isObjectType)($findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$)) {
        var $findRemovedTypes$$ = $require$$.getInterfaces();
        $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$.getInterfaces().forEach(function($require$$) {
          $findRemovedTypes$$.some(function($exports$$) {
            return $exports$$.name === $require$$.name;
          }) || $_keyMap$jscomp$7_global$$.push({type:$DangerousChangeType$$.INTERFACE_ADDED_TO_OBJECT, description:$require$$.name + " added to interfaces implemented " + ("by " + $exports$$ + ".")});
        });
      }
    });
    return $_keyMap$jscomp$7_global$$;
  }
  function $findRemovedDirectives$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = [], $isChangeSafeForInputObjectFieldOrFieldArg$$ = $getDirectiveMapForSchema$$($require$$);
    $exports$$.getDirectives().forEach(function($exports$$) {
      $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$.name] || $findTypesThatChangedKind$$.push({type:$BreakingChangeType$$.DIRECTIVE_REMOVED, description:$exports$$.name + " was removed"});
    });
    return $findTypesThatChangedKind$$;
  }
  function $findRemovedArgsForDirective$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = [], $isChangeSafeForInputObjectFieldOrFieldArg$$ = $getArgumentMapForDirective$$($require$$);
    $exports$$.args.forEach(function($exports$$) {
      $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$.name] || $findTypesThatChangedKind$$.push($exports$$);
    });
    return $findTypesThatChangedKind$$;
  }
  function $findRemovedDirectiveArgs$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = [], $isChangeSafeForInputObjectFieldOrFieldArg$$ = $getDirectiveMapForSchema$$($exports$$);
    $require$$.getDirectives().forEach(function($exports$$) {
      var $require$$ = $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$.name];
      $require$$ && $findRemovedArgsForDirective$$($require$$, $exports$$).forEach(function($require$$) {
        $findTypesThatChangedKind$$.push({type:$BreakingChangeType$$.DIRECTIVE_ARG_REMOVED, description:$require$$.name + " was removed from " + $exports$$.name});
      });
    });
    return $findTypesThatChangedKind$$;
  }
  function $findAddedArgsForDirective$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = [], $isChangeSafeForInputObjectFieldOrFieldArg$$ = $getArgumentMapForDirective$$($exports$$);
    $require$$.args.forEach(function($exports$$) {
      $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$.name] || $findTypesThatChangedKind$$.push($exports$$);
    });
    return $findTypesThatChangedKind$$;
  }
  function $findAddedNonNullDirectiveArgs$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = [], $isChangeSafeForInputObjectFieldOrFieldArg$$ = $getDirectiveMapForSchema$$($exports$$);
    $require$$.getDirectives().forEach(function($exports$$) {
      var $require$$ = $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$.name];
      $require$$ && $findAddedArgsForDirective$$($require$$, $exports$$).forEach(function($require$$) {
        (0, $_definition$$.isNonNullType)($require$$.type) && $findTypesThatChangedKind$$.push({type:$BreakingChangeType$$.NON_NULL_DIRECTIVE_ARG_ADDED, description:"A non-null arg " + $require$$.name + " on directive " + ($exports$$.name + " was added")});
      });
    });
    return $findTypesThatChangedKind$$;
  }
  function $findRemovedLocationsForDirective$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = [], $isChangeSafeForInputObjectFieldOrFieldArg$$ = new Set($require$$.locations);
    $exports$$.locations.forEach(function($exports$$) {
      $isChangeSafeForInputObjectFieldOrFieldArg$$.has($exports$$) || $findTypesThatChangedKind$$.push($exports$$);
    });
    return $findTypesThatChangedKind$$;
  }
  function $findRemovedDirectiveLocations$$($exports$$, $require$$) {
    var $findTypesThatChangedKind$$ = [], $isChangeSafeForInputObjectFieldOrFieldArg$$ = $getDirectiveMapForSchema$$($exports$$);
    $require$$.getDirectives().forEach(function($exports$$) {
      var $require$$ = $isChangeSafeForInputObjectFieldOrFieldArg$$[$exports$$.name];
      $require$$ && $findRemovedLocationsForDirective$$($require$$, $exports$$).forEach(function($require$$) {
        $findTypesThatChangedKind$$.push({type:$BreakingChangeType$$.DIRECTIVE_LOCATION_REMOVED, description:$require$$ + " was removed from " + $exports$$.name});
      });
    });
    return $findTypesThatChangedKind$$;
  }
  function $getDirectiveMapForSchema$$($exports$$) {
    return (0, $_keyMap2$$.default)($exports$$.getDirectives(), function($exports$$) {
      return $exports$$.name;
    });
  }
  function $getArgumentMapForDirective$$($exports$$) {
    return (0, $_keyMap2$$.default)($exports$$.args, function($exports$$) {
      return $exports$$.name;
    });
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.DangerousChangeType = $exports$$.BreakingChangeType = void 0;
  $exports$$.findBreakingChanges = function($exports$$, $require$$) {
    return [].concat($findRemovedTypes$$($exports$$, $require$$), $findTypesThatChangedKind$$($exports$$, $require$$), $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$($exports$$, $require$$), $findFieldsThatChangedTypeOnInputObjectTypes$$($exports$$, $require$$).breakingChanges, $findTypesRemovedFromUnions$$($exports$$, $require$$), $findValuesRemovedFromEnums$$($exports$$, $require$$), $findArgChanges$$($exports$$, $require$$).breakingChanges, $findInterfacesRemovedFromObjectTypes$$($exports$$, 
    $require$$), $findRemovedDirectives$$($exports$$, $require$$), $findRemovedDirectiveArgs$$($exports$$, $require$$), $findAddedNonNullDirectiveArgs$$($exports$$, $require$$), $findRemovedDirectiveLocations$$($exports$$, $require$$));
  };
  $exports$$.findDangerousChanges = function($exports$$, $require$$) {
    return [].concat($findArgChanges$$($exports$$, $require$$).dangerousChanges, $findValuesAddedToEnums$$($exports$$, $require$$), $findInterfacesAddedToObjectTypes$$($exports$$, $require$$), $findTypesAddedToUnions$$($exports$$, $require$$), $findFieldsThatChangedTypeOnInputObjectTypes$$($exports$$, $require$$).dangerousChanges);
  };
  $exports$$.findRemovedTypes = $findRemovedTypes$$;
  $exports$$.findTypesThatChangedKind = $findTypesThatChangedKind$$;
  $exports$$.findArgChanges = $findArgChanges$$;
  $exports$$.findFieldsThatChangedTypeOnObjectOrInterfaceTypes = $findFieldsThatChangedTypeOnObjectOrInterfaceTypes$$;
  $exports$$.findFieldsThatChangedTypeOnInputObjectTypes = $findFieldsThatChangedTypeOnInputObjectTypes$$;
  $exports$$.findTypesRemovedFromUnions = $findTypesRemovedFromUnions$$;
  $exports$$.findTypesAddedToUnions = $findTypesAddedToUnions$$;
  $exports$$.findValuesRemovedFromEnums = $findValuesRemovedFromEnums$$;
  $exports$$.findValuesAddedToEnums = $findValuesAddedToEnums$$;
  $exports$$.findInterfacesRemovedFromObjectTypes = $findInterfacesRemovedFromObjectTypes$$;
  $exports$$.findInterfacesAddedToObjectTypes = $findInterfacesAddedToObjectTypes$$;
  $exports$$.findRemovedDirectives = $findRemovedDirectives$$;
  $exports$$.findRemovedDirectiveArgs = $findRemovedDirectiveArgs$$;
  $exports$$.findAddedNonNullDirectiveArgs = $findAddedNonNullDirectiveArgs$$;
  $exports$$.findRemovedLocationsForDirective = $findRemovedLocationsForDirective$$;
  $exports$$.findRemovedDirectiveLocations = $findRemovedDirectiveLocations$$;
  var $_definition$$ = $require$$("module$node_modules$graphql$type$definition");
  $require$$("module$node_modules$graphql$type$directives");
  $require$$("module$node_modules$graphql$type$schema");
  var $_keyMap2$$ = ($_keyMap$jscomp$7_global$$ = $require$$("module$node_modules$graphql$jsutils$keyMap")) && $_keyMap$jscomp$7_global$$.__esModule ? $_keyMap$jscomp$7_global$$ : {default:$_keyMap$jscomp$7_global$$}, $BreakingChangeType$$ = $exports$$.BreakingChangeType = {FIELD_CHANGED_KIND:"FIELD_CHANGED_KIND", FIELD_REMOVED:"FIELD_REMOVED", TYPE_CHANGED_KIND:"TYPE_CHANGED_KIND", TYPE_REMOVED:"TYPE_REMOVED", TYPE_REMOVED_FROM_UNION:"TYPE_REMOVED_FROM_UNION", VALUE_REMOVED_FROM_ENUM:"VALUE_REMOVED_FROM_ENUM", 
  ARG_REMOVED:"ARG_REMOVED", ARG_CHANGED_KIND:"ARG_CHANGED_KIND", NON_NULL_ARG_ADDED:"NON_NULL_ARG_ADDED", NON_NULL_INPUT_FIELD_ADDED:"NON_NULL_INPUT_FIELD_ADDED", INTERFACE_REMOVED_FROM_OBJECT:"INTERFACE_REMOVED_FROM_OBJECT", DIRECTIVE_REMOVED:"DIRECTIVE_REMOVED", DIRECTIVE_ARG_REMOVED:"DIRECTIVE_ARG_REMOVED", DIRECTIVE_LOCATION_REMOVED:"DIRECTIVE_LOCATION_REMOVED", NON_NULL_DIRECTIVE_ARG_ADDED:"NON_NULL_DIRECTIVE_ARG_ADDED"}, $DangerousChangeType$$ = $exports$$.DangerousChangeType = {ARG_DEFAULT_VALUE_CHANGE:"ARG_DEFAULT_VALUE_CHANGE", 
  VALUE_ADDED_TO_ENUM:"VALUE_ADDED_TO_ENUM", INTERFACE_ADDED_TO_OBJECT:"INTERFACE_ADDED_TO_OBJECT", TYPE_ADDED_TO_UNION:"TYPE_ADDED_TO_UNION", NULLABLE_INPUT_FIELD_ADDED:"NULLABLE_INPUT_FIELD_ADDED", NULLABLE_ARG_ADDED:"NULLABLE_ARG_ADDED"};
};
