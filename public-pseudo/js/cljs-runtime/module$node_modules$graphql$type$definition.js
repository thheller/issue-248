shadow$provide.module$node_modules$graphql$type$definition = function($_instanceOf__invariant__isInvalid$jscomp$1_global$$, $process$$, $listProto_nonNullProto_require$$, $module$$, $exports$$) {
  function $_interopRequireDefault$$($exports$$) {
    return $exports$$ && $exports$$.__esModule ? $exports$$ : {default:$exports$$};
  }
  function $_classCallCheck$$($exports$$, $isUnionType$$) {
    if (!($exports$$ instanceof $isUnionType$$)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function $isType$$($exports$$) {
    return $isScalarType$$($exports$$) || $isObjectType$$($exports$$) || $isInterfaceType$$($exports$$) || $isUnionType$$($exports$$) || $isEnumType$$($exports$$) || $isInputObjectType$$($exports$$) || $isListType$$($exports$$) || $isNonNullType$$($exports$$);
  }
  function $assertType$$($exports$$) {
    $isType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL type.");
    return $exports$$;
  }
  function $isScalarType$$($exports$$) {
    return (0, $_instanceOf2$$.default)($exports$$, $GraphQLScalarType$$);
  }
  function $isObjectType$$($exports$$) {
    return (0, $_instanceOf2$$.default)($exports$$, $GraphQLObjectType$$);
  }
  function $isInterfaceType$$($exports$$) {
    return (0, $_instanceOf2$$.default)($exports$$, $GraphQLInterfaceType$$);
  }
  function $isUnionType$$($exports$$) {
    return (0, $_instanceOf2$$.default)($exports$$, $GraphQLUnionType$$);
  }
  function $isEnumType$$($exports$$) {
    return (0, $_instanceOf2$$.default)($exports$$, $GraphQLEnumType$$);
  }
  function $isInputObjectType$$($exports$$) {
    return (0, $_instanceOf2$$.default)($exports$$, $GraphQLInputObjectType$$);
  }
  function $isListType$$($exports$$) {
    return (0, $_instanceOf2$$.default)($exports$$, $GraphQLList$$);
  }
  function $isNonNullType$$($exports$$) {
    return (0, $_instanceOf2$$.default)($exports$$, $GraphQLNonNull$$);
  }
  function $isInputType$$($exports$$) {
    return $isScalarType$$($exports$$) || $isEnumType$$($exports$$) || $isInputObjectType$$($exports$$) || $isWrappingType$$($exports$$) && $isInputType$$($exports$$.ofType);
  }
  function $isOutputType$$($exports$$) {
    return $isScalarType$$($exports$$) || $isObjectType$$($exports$$) || $isInterfaceType$$($exports$$) || $isUnionType$$($exports$$) || $isEnumType$$($exports$$) || $isWrappingType$$($exports$$) && $isOutputType$$($exports$$.ofType);
  }
  function $isLeafType$$($exports$$) {
    return $isScalarType$$($exports$$) || $isEnumType$$($exports$$);
  }
  function $isCompositeType$$($exports$$) {
    return $isObjectType$$($exports$$) || $isInterfaceType$$($exports$$) || $isUnionType$$($exports$$);
  }
  function $isAbstractType$$($exports$$) {
    return $isInterfaceType$$($exports$$) || $isUnionType$$($exports$$);
  }
  function $GraphQLList$$($exports$$) {
    if (this instanceof $GraphQLList$$) {
      this.ofType = $assertType$$($exports$$);
    } else {
      return new $GraphQLList$$($exports$$);
    }
  }
  function $GraphQLNonNull$$($exports$$) {
    if (this instanceof $GraphQLNonNull$$) {
      this.ofType = $assertNullableType$$($exports$$);
    } else {
      return new $GraphQLNonNull$$($exports$$);
    }
  }
  function $isWrappingType$$($exports$$) {
    return $isListType$$($exports$$) || $isNonNullType$$($exports$$);
  }
  function $isNullableType$$($exports$$) {
    return $isType$$($exports$$) && !$isNonNullType$$($exports$$);
  }
  function $assertNullableType$$($exports$$) {
    $isNullableType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL nullable type.");
    return $exports$$;
  }
  function $isNamedType$$($exports$$) {
    return $isScalarType$$($exports$$) || $isObjectType$$($exports$$) || $isInterfaceType$$($exports$$) || $isUnionType$$($exports$$) || $isEnumType$$($exports$$) || $isInputObjectType$$($exports$$);
  }
  function $resolveThunk$$($exports$$) {
    return "function" === typeof $exports$$ ? $exports$$() : $exports$$;
  }
  function $defineFieldMap$$($exports$$, $isUnionType$$) {
    var $listProto_nonNullProto_require$$ = $resolveThunk$$($isUnionType$$) || {};
    $isPlainObj$$($listProto_nonNullProto_require$$) ? void 0 : (0, $_invariant2$$.default)(0, $exports$$.name + " fields must be an object with field names as keys or a function which returns such an object.");
    var $isScalarType$$ = Object.create(null);
    Object.keys($listProto_nonNullProto_require$$).forEach(function($isUnionType$$) {
      var $_classCallCheck$$ = $listProto_nonNullProto_require$$[$isUnionType$$];
      $isPlainObj$$($_classCallCheck$$) ? void 0 : (0, $_invariant2$$.default)(0, $exports$$.name + "." + $isUnionType$$ + " field config must be an object");
      $_classCallCheck$$.hasOwnProperty("isDeprecated") ? (0, $_invariant2$$.default)(0, $exports$$.name + "." + $isUnionType$$ + ' should provide "deprecationReason" instead of "isDeprecated".') : void 0;
      var $isObjectType$$ = $_extends$$({}, $_classCallCheck$$, {isDeprecated:!!$_classCallCheck$$.deprecationReason, name:$isUnionType$$});
      $isValidResolver$$($isObjectType$$.resolve) ? void 0 : (0, $_invariant2$$.default)(0, $exports$$.name + "." + $isUnionType$$ + " field resolver must be a function if " + ("provided, but got: " + String($isObjectType$$.resolve) + "."));
      var $isEnumType$$ = $_classCallCheck$$.args;
      $isEnumType$$ ? ($isPlainObj$$($isEnumType$$) ? void 0 : (0, $_invariant2$$.default)(0, $exports$$.name + "." + $isUnionType$$ + " args must be an object with argument names as keys."), $isObjectType$$.args = Object.keys($isEnumType$$).map(function($exports$$) {
        var $isUnionType$$ = $isEnumType$$[$exports$$];
        return {name:$exports$$, description:void 0 === $isUnionType$$.description ? null : $isUnionType$$.description, type:$isUnionType$$.type, defaultValue:$isUnionType$$.defaultValue, astNode:$isUnionType$$.astNode};
      })) : $isObjectType$$.args = [];
      $isScalarType$$[$isUnionType$$] = $isObjectType$$;
    });
    return $isScalarType$$;
  }
  function $isPlainObj$$($exports$$) {
    return $exports$$ && "object" === ("undefined" === typeof $exports$$ ? "undefined" : $_typeof$$($exports$$)) && !Array.isArray($exports$$);
  }
  function $isValidResolver$$($exports$$) {
    return null == $exports$$ || "function" === typeof $exports$$;
  }
  function $defineEnumValues$$($exports$$, $isUnionType$$) {
    $isPlainObj$$($isUnionType$$) ? void 0 : (0, $_invariant2$$.default)(0, $exports$$.name + " values must be an object with value names as keys.");
    return Object.keys($isUnionType$$).map(function($listProto_nonNullProto_require$$) {
      var $isScalarType$$ = $isUnionType$$[$listProto_nonNullProto_require$$];
      $isPlainObj$$($isScalarType$$) ? void 0 : (0, $_invariant2$$.default)(0, $exports$$.name + "." + $listProto_nonNullProto_require$$ + ' must refer to an object with a "value" key ' + ("representing an internal value but got: " + String($isScalarType$$) + "."));
      $isScalarType$$.hasOwnProperty("isDeprecated") ? (0, $_invariant2$$.default)(0, $exports$$.name + "." + $listProto_nonNullProto_require$$ + ' should provide "deprecationReason" instead of "isDeprecated".') : void 0;
      return {name:$listProto_nonNullProto_require$$, description:$isScalarType$$.description, isDeprecated:!!$isScalarType$$.deprecationReason, deprecationReason:$isScalarType$$.deprecationReason, astNode:$isScalarType$$.astNode, value:$isScalarType$$.hasOwnProperty("value") ? $isScalarType$$.value : $listProto_nonNullProto_require$$};
    });
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.GraphQLInputObjectType = $exports$$.GraphQLEnumType = $exports$$.GraphQLUnionType = $exports$$.GraphQLInterfaceType = $exports$$.GraphQLObjectType = $exports$$.GraphQLScalarType = void 0;
  var $_typeof$$ = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function($exports$$) {
    return typeof $exports$$;
  } : function($exports$$) {
    return $exports$$ && "function" === typeof Symbol && $exports$$.constructor === Symbol && $exports$$ !== Symbol.prototype ? "symbol" : typeof $exports$$;
  }, $_extends$$ = Object.assign || function($exports$$) {
    for (var $isUnionType$$ = 1; $isUnionType$$ < arguments.length; $isUnionType$$++) {
      var $listProto_nonNullProto_require$$ = arguments[$isUnionType$$], $isScalarType$$;
      for ($isScalarType$$ in $listProto_nonNullProto_require$$) {
        Object.prototype.hasOwnProperty.call($listProto_nonNullProto_require$$, $isScalarType$$) && ($exports$$[$isScalarType$$] = $listProto_nonNullProto_require$$[$isScalarType$$]);
      }
    }
    return $exports$$;
  };
  $exports$$.isType = $isType$$;
  $exports$$.assertType = $assertType$$;
  $exports$$.isScalarType = $isScalarType$$;
  $exports$$.assertScalarType = function($exports$$) {
    $isScalarType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL Scalar type.");
    return $exports$$;
  };
  $exports$$.isObjectType = $isObjectType$$;
  $exports$$.assertObjectType = function($exports$$) {
    $isObjectType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL Object type.");
    return $exports$$;
  };
  $exports$$.isInterfaceType = $isInterfaceType$$;
  $exports$$.assertInterfaceType = function($exports$$) {
    $isInterfaceType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL Interface type.");
    return $exports$$;
  };
  $exports$$.isUnionType = $isUnionType$$;
  $exports$$.assertUnionType = function($exports$$) {
    $isUnionType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL Union type.");
    return $exports$$;
  };
  $exports$$.isEnumType = $isEnumType$$;
  $exports$$.assertEnumType = function($exports$$) {
    $isEnumType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL Enum type.");
    return $exports$$;
  };
  $exports$$.isInputObjectType = $isInputObjectType$$;
  $exports$$.assertInputObjectType = function($exports$$) {
    $isInputObjectType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL Input Object type.");
    return $exports$$;
  };
  $exports$$.isListType = $isListType$$;
  $exports$$.assertListType = function($exports$$) {
    $isListType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL List type.");
    return $exports$$;
  };
  $exports$$.isNonNullType = $isNonNullType$$;
  $exports$$.assertNonNullType = function($exports$$) {
    $isNonNullType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL Non-Null type.");
    return $exports$$;
  };
  $exports$$.isInputType = $isInputType$$;
  $exports$$.assertInputType = function($exports$$) {
    $isInputType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL input type.");
    return $exports$$;
  };
  $exports$$.isOutputType = $isOutputType$$;
  $exports$$.assertOutputType = function($exports$$) {
    $isOutputType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL output type.");
    return $exports$$;
  };
  $exports$$.isLeafType = $isLeafType$$;
  $exports$$.assertLeafType = function($exports$$) {
    $isLeafType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL leaf type.");
    return $exports$$;
  };
  $exports$$.isCompositeType = $isCompositeType$$;
  $exports$$.assertCompositeType = function($exports$$) {
    $isCompositeType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL composite type.");
    return $exports$$;
  };
  $exports$$.isAbstractType = $isAbstractType$$;
  $exports$$.assertAbstractType = function($exports$$) {
    $isAbstractType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL abstract type.");
    return $exports$$;
  };
  $exports$$.GraphQLList = $GraphQLList$$;
  $exports$$.GraphQLNonNull = $GraphQLNonNull$$;
  $exports$$.isWrappingType = $isWrappingType$$;
  $exports$$.assertWrappingType = function($exports$$) {
    $isWrappingType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL wrapping type.");
    return $exports$$;
  };
  $exports$$.isNullableType = $isNullableType$$;
  $exports$$.assertNullableType = $assertNullableType$$;
  $exports$$.getNullableType = function($exports$$) {
    if ($exports$$) {
      return $isNonNullType$$($exports$$) ? $exports$$.ofType : $exports$$;
    }
  };
  $exports$$.isNamedType = $isNamedType$$;
  $exports$$.assertNamedType = function($exports$$) {
    $isNamedType$$($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected " + String($exports$$) + " to be a GraphQL named type.");
    return $exports$$;
  };
  $exports$$.getNamedType = function($exports$$) {
    if ($exports$$) {
      for (; $isWrappingType$$($exports$$);) {
        $exports$$ = $exports$$.ofType;
      }
      return $exports$$;
    }
  };
  $_instanceOf__invariant__isInvalid$jscomp$1_global$$ = $listProto_nonNullProto_require$$("module$node_modules$graphql$jsutils$instanceOf");
  var $_instanceOf2$$ = $_interopRequireDefault$$($_instanceOf__invariant__isInvalid$jscomp$1_global$$);
  $_instanceOf__invariant__isInvalid$jscomp$1_global$$ = $listProto_nonNullProto_require$$("module$node_modules$graphql$jsutils$invariant");
  var $_invariant2$$ = $_interopRequireDefault$$($_instanceOf__invariant__isInvalid$jscomp$1_global$$);
  $_instanceOf__invariant__isInvalid$jscomp$1_global$$ = $listProto_nonNullProto_require$$("module$node_modules$graphql$jsutils$isInvalid");
  var $_isInvalid2$$ = $_interopRequireDefault$$($_instanceOf__invariant__isInvalid$jscomp$1_global$$), $_kinds$$ = $listProto_nonNullProto_require$$("module$node_modules$graphql$language$kinds"), $_valueFromASTUntyped$$ = $listProto_nonNullProto_require$$("module$node_modules$graphql$utilities$valueFromASTUntyped");
  $listProto_nonNullProto_require$$ = $GraphQLList$$.prototype;
  $listProto_nonNullProto_require$$.toString = $listProto_nonNullProto_require$$.toJSON = $listProto_nonNullProto_require$$.inspect = function() {
    return "[" + String(this.ofType) + "]";
  };
  $listProto_nonNullProto_require$$ = $GraphQLNonNull$$.prototype;
  $listProto_nonNullProto_require$$.toString = $listProto_nonNullProto_require$$.toJSON = $listProto_nonNullProto_require$$.inspect = function() {
    return String(this.ofType) + "!";
  };
  var $GraphQLScalarType$$ = $exports$$.GraphQLScalarType = function() {
    function $exports$$($isUnionType$$) {
      $_classCallCheck$$(this, $exports$$);
      this.name = $isUnionType$$.name;
      this.description = $isUnionType$$.description;
      this.astNode = $isUnionType$$.astNode;
      this._scalarConfig = $isUnionType$$;
      "string" !== typeof $isUnionType$$.name ? (0, $_invariant2$$.default)(0, "Must provide name.") : void 0;
      "function" !== typeof $isUnionType$$.serialize ? (0, $_invariant2$$.default)(0, this.name + ' must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.') : void 0;
      if ($isUnionType$$.parseValue || $isUnionType$$.parseLiteral) {
        "function" !== typeof $isUnionType$$.parseValue || "function" !== typeof $isUnionType$$.parseLiteral ? (0, $_invariant2$$.default)(0, this.name + ' must provide both "parseValue" and "parseLiteral" functions.') : void 0;
      }
    }
    $exports$$.prototype.serialize = function($exports$$) {
      var $isUnionType$$ = this._scalarConfig.serialize;
      return $isUnionType$$($exports$$);
    };
    $exports$$.prototype.parseValue = function($exports$$) {
      var $isUnionType$$ = this._scalarConfig.parseValue;
      if (!(0, $_isInvalid2$$.default)($exports$$)) {
        return $isUnionType$$ ? $isUnionType$$($exports$$) : $exports$$;
      }
    };
    $exports$$.prototype.parseLiteral = function($exports$$, $isUnionType$$) {
      var $listProto_nonNullProto_require$$ = this._scalarConfig.parseLiteral;
      return $listProto_nonNullProto_require$$ ? $listProto_nonNullProto_require$$($exports$$, $isUnionType$$) : (0, $_valueFromASTUntyped$$.valueFromASTUntyped)($exports$$, $isUnionType$$);
    };
    $exports$$.prototype.toString = function() {
      return this.name;
    };
    return $exports$$;
  }();
  $GraphQLScalarType$$.prototype.toJSON = $GraphQLScalarType$$.prototype.inspect = $GraphQLScalarType$$.prototype.toString;
  var $GraphQLObjectType$$ = $exports$$.GraphQLObjectType = function() {
    function $exports$$($isUnionType$$) {
      $_classCallCheck$$(this, $exports$$);
      this.name = $isUnionType$$.name;
      this.description = $isUnionType$$.description;
      this.astNode = $isUnionType$$.astNode;
      this.extensionASTNodes = $isUnionType$$.extensionASTNodes;
      this.isTypeOf = $isUnionType$$.isTypeOf;
      this._typeConfig = $isUnionType$$;
      "string" !== typeof $isUnionType$$.name ? (0, $_invariant2$$.default)(0, "Must provide name.") : void 0;
      $isUnionType$$.isTypeOf && ("function" !== typeof $isUnionType$$.isTypeOf ? (0, $_invariant2$$.default)(0, this.name + ' must provide "isTypeOf" as a function.') : void 0);
    }
    $exports$$.prototype.getFields = function() {
      return this._fields || (this._fields = $defineFieldMap$$(this, this._typeConfig.fields));
    };
    $exports$$.prototype.getInterfaces = function() {
      var $exports$$;
      ($exports$$ = this._interfaces) || ($exports$$ = $resolveThunk$$(this._typeConfig.interfaces) || [], Array.isArray($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, this.name + " interfaces must be an Array or a function which returns an Array."), $exports$$ = this._interfaces = $exports$$);
      return $exports$$;
    };
    $exports$$.prototype.toString = function() {
      return this.name;
    };
    return $exports$$;
  }();
  $GraphQLObjectType$$.prototype.toJSON = $GraphQLObjectType$$.prototype.inspect = $GraphQLObjectType$$.prototype.toString;
  var $GraphQLInterfaceType$$ = $exports$$.GraphQLInterfaceType = function() {
    function $exports$$($isUnionType$$) {
      $_classCallCheck$$(this, $exports$$);
      this.name = $isUnionType$$.name;
      this.description = $isUnionType$$.description;
      this.astNode = $isUnionType$$.astNode;
      this.extensionASTNodes = $isUnionType$$.extensionASTNodes;
      this.resolveType = $isUnionType$$.resolveType;
      this._typeConfig = $isUnionType$$;
      "string" !== typeof $isUnionType$$.name ? (0, $_invariant2$$.default)(0, "Must provide name.") : void 0;
      $isUnionType$$.resolveType && ("function" !== typeof $isUnionType$$.resolveType ? (0, $_invariant2$$.default)(0, this.name + ' must provide "resolveType" as a function.') : void 0);
    }
    $exports$$.prototype.getFields = function() {
      return this._fields || (this._fields = $defineFieldMap$$(this, this._typeConfig.fields));
    };
    $exports$$.prototype.toString = function() {
      return this.name;
    };
    return $exports$$;
  }();
  $GraphQLInterfaceType$$.prototype.toJSON = $GraphQLInterfaceType$$.prototype.inspect = $GraphQLInterfaceType$$.prototype.toString;
  var $GraphQLUnionType$$ = $exports$$.GraphQLUnionType = function() {
    function $exports$$($isUnionType$$) {
      $_classCallCheck$$(this, $exports$$);
      this.name = $isUnionType$$.name;
      this.description = $isUnionType$$.description;
      this.astNode = $isUnionType$$.astNode;
      this.resolveType = $isUnionType$$.resolveType;
      this._typeConfig = $isUnionType$$;
      "string" !== typeof $isUnionType$$.name ? (0, $_invariant2$$.default)(0, "Must provide name.") : void 0;
      $isUnionType$$.resolveType && ("function" !== typeof $isUnionType$$.resolveType ? (0, $_invariant2$$.default)(0, this.name + ' must provide "resolveType" as a function.') : void 0);
    }
    $exports$$.prototype.getTypes = function() {
      var $exports$$;
      ($exports$$ = this._types) || ($exports$$ = $resolveThunk$$(this._typeConfig.types) || [], Array.isArray($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Must provide Array of types or a function which returns " + ("such an array for Union " + this.name + ".")), $exports$$ = this._types = $exports$$);
      return $exports$$;
    };
    $exports$$.prototype.toString = function() {
      return this.name;
    };
    return $exports$$;
  }();
  $GraphQLUnionType$$.prototype.toJSON = $GraphQLUnionType$$.prototype.inspect = $GraphQLUnionType$$.prototype.toString;
  var $GraphQLEnumType$$ = $exports$$.GraphQLEnumType = function() {
    function $exports$$($isUnionType$$) {
      $_classCallCheck$$(this, $exports$$);
      this.name = $isUnionType$$.name;
      this.description = $isUnionType$$.description;
      this.astNode = $isUnionType$$.astNode;
      this._enumConfig = $isUnionType$$;
      "string" !== typeof $isUnionType$$.name ? (0, $_invariant2$$.default)(0, "Must provide name.") : void 0;
    }
    $exports$$.prototype.getValues = function() {
      return this._values || (this._values = $defineEnumValues$$(this, this._enumConfig.values));
    };
    $exports$$.prototype.getValue = function($exports$$) {
      return this._getNameLookup()[$exports$$];
    };
    $exports$$.prototype.serialize = function($exports$$) {
      if ($exports$$ = this._getValueLookup().get($exports$$)) {
        return $exports$$.name;
      }
    };
    $exports$$.prototype.parseValue = function($exports$$) {
      if ("string" === typeof $exports$$ && ($exports$$ = this._getNameLookup()[$exports$$])) {
        return $exports$$.value;
      }
    };
    $exports$$.prototype.parseLiteral = function($exports$$, $isUnionType$$) {
      if ($exports$$.kind === $_kinds$$.Kind.ENUM && ($exports$$ = this._getNameLookup()[$exports$$.value])) {
        return $exports$$.value;
      }
    };
    $exports$$.prototype._getValueLookup = function() {
      if (!this._valueLookup) {
        var $exports$$ = new Map;
        this.getValues().forEach(function($isUnionType$$) {
          $exports$$.set($isUnionType$$.value, $isUnionType$$);
        });
        this._valueLookup = $exports$$;
      }
      return this._valueLookup;
    };
    $exports$$.prototype._getNameLookup = function() {
      if (!this._nameLookup) {
        var $exports$$ = Object.create(null);
        this.getValues().forEach(function($isUnionType$$) {
          $exports$$[$isUnionType$$.name] = $isUnionType$$;
        });
        this._nameLookup = $exports$$;
      }
      return this._nameLookup;
    };
    $exports$$.prototype.toString = function() {
      return this.name;
    };
    return $exports$$;
  }();
  $GraphQLEnumType$$.prototype.toJSON = $GraphQLEnumType$$.prototype.inspect = $GraphQLEnumType$$.prototype.toString;
  var $GraphQLInputObjectType$$ = $exports$$.GraphQLInputObjectType = function() {
    function $exports$$($isUnionType$$) {
      $_classCallCheck$$(this, $exports$$);
      this.name = $isUnionType$$.name;
      this.description = $isUnionType$$.description;
      this.astNode = $isUnionType$$.astNode;
      this._typeConfig = $isUnionType$$;
      "string" !== typeof $isUnionType$$.name ? (0, $_invariant2$$.default)(0, "Must provide name.") : void 0;
    }
    $exports$$.prototype.getFields = function() {
      return this._fields || (this._fields = this._defineFieldMap());
    };
    $exports$$.prototype._defineFieldMap = function() {
      var $exports$$ = this, $isUnionType$$ = $resolveThunk$$(this._typeConfig.fields) || {};
      $isPlainObj$$($isUnionType$$) ? void 0 : (0, $_invariant2$$.default)(0, this.name + " fields must be an object with field names as keys or a function which returns such an object.");
      var $listProto_nonNullProto_require$$ = Object.create(null);
      Object.keys($isUnionType$$).forEach(function($isScalarType$$) {
        var $_classCallCheck$$ = $_extends$$({}, $isUnionType$$[$isScalarType$$], {name:$isScalarType$$});
        $_classCallCheck$$.hasOwnProperty("resolve") ? (0, $_invariant2$$.default)(0, $exports$$.name + "." + $isScalarType$$ + " field type has a resolve property, but Input Types cannot define resolvers.") : void 0;
        $listProto_nonNullProto_require$$[$isScalarType$$] = $_classCallCheck$$;
      });
      return $listProto_nonNullProto_require$$;
    };
    $exports$$.prototype.toString = function() {
      return this.name;
    };
    return $exports$$;
  }();
  $GraphQLInputObjectType$$.prototype.toJSON = $GraphQLInputObjectType$$.prototype.toString;
  $GraphQLInputObjectType$$.prototype.inspect = $GraphQLInputObjectType$$.prototype.toString;
};
