shadow$provide.module$node_modules$graphql$utilities$extendSchema = function($_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $_interopRequireDefault$$($exports$$) {
    return $exports$$ && $exports$$.__esModule ? $exports$$ : {default:$exports$$};
  }
  function $checkExtensionNode$$($exports$$, $require$$) {
    switch($require$$.kind) {
      case $_kinds$$.Kind.OBJECT_TYPE_EXTENSION:
        if (!(0, $_definition$$.isObjectType)($exports$$)) {
          throw new $_GraphQLError$$.GraphQLError('Cannot extend non-object type "' + $exports$$.name + '".', [$require$$]);
        }
        break;
      case $_kinds$$.Kind.INTERFACE_TYPE_EXTENSION:
        if (!(0, $_definition$$.isInterfaceType)($exports$$)) {
          throw new $_GraphQLError$$.GraphQLError('Cannot extend non-interface type "' + $exports$$.name + '".', [$require$$]);
        }
    }
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.extendSchema = function($exports$$, $require$$, $_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$) {
    function $_interopRequireDefault$$($exports$$) {
      if (!$extendTypeCache$$[$exports$$.name]) {
        var $require$$ = $extendTypeCache$$, $checkExtensionNode$$ = $exports$$.name;
        var $_schema$$ = (0, $_introspection$$.isIntrospectionType)($exports$$) ? $exports$$ : (0, $_definition$$.isObjectType)($exports$$) ? $documentAST$jscomp$2_existingQueryType_queryType$$($exports$$) : (0, $_definition$$.isInterfaceType)($exports$$) ? $allowedLegacyNames_extendAllowedLegacyNames_options$$($exports$$) : (0, $_definition$$.isUnionType)($exports$$) ? new $_definition$$.GraphQLUnionType({name:$exports$$.name, description:$exports$$.description, types:$exports$$.getTypes().map($_interopRequireDefault$$), 
        astNode:$exports$$.astNode, resolveType:$exports$$.resolveType}) : $exports$$;
        $require$$[$checkExtensionNode$$] = $_schema$$;
      }
      return $extendTypeCache$$[$exports$$.name];
    }
    function $documentAST$jscomp$2_existingQueryType_queryType$$($exports$$) {
      var $require$$ = $exports$$.name, $checkExtensionNode$$ = $typeExtensionsMap$$[$require$$] ? $exports$$.extensionASTNodes ? $exports$$.extensionASTNodes.concat($typeExtensionsMap$$[$require$$]) : $typeExtensionsMap$$[$require$$] : $exports$$.extensionASTNodes;
      return new $_definition$$.GraphQLObjectType({name:$require$$, description:$exports$$.description, interfaces:function() {
        return $schema$$($exports$$);
      }, fields:function() {
        return $module$$($exports$$);
      }, astNode:$exports$$.astNode, extensionASTNodes:$checkExtensionNode$$, isTypeOf:$exports$$.isTypeOf});
    }
    function $allowedLegacyNames_extendAllowedLegacyNames_options$$($exports$$) {
      var $require$$ = $exports$$.name;
      $require$$ = $typeExtensionsMap$$[$require$$] ? $exports$$.extensionASTNodes ? $exports$$.extensionASTNodes.concat($typeExtensionsMap$$[$require$$]) : $typeExtensionsMap$$[$require$$] : $exports$$.extensionASTNodes;
      return new $_definition$$.GraphQLInterfaceType({name:$exports$$.name, description:$exports$$.description, fields:function() {
        return $module$$($exports$$);
      }, astNode:$exports$$.astNode, extensionASTNodes:$require$$, resolveType:$exports$$.resolveType});
    }
    function $schema$$($exports$$) {
      var $require$$ = $exports$$.getInterfaces().map($_interopRequireDefault$$);
      ($exports$$ = $typeExtensionsMap$$[$exports$$.name]) && $exports$$.forEach(function($exports$$) {
        $exports$$.interfaces.forEach(function($exports$$) {
          $require$$.push($astBuilder$$.buildType($exports$$));
        });
      });
      return $require$$;
    }
    function $module$$($exports$$) {
      var $require$$ = Object.create(null), $checkExtensionNode$$ = $exports$$.getFields();
      Object.keys($checkExtensionNode$$).forEach(function($exports$$) {
        var $_schema$$ = $checkExtensionNode$$[$exports$$];
        $require$$[$exports$$] = {description:$_schema$$.description, deprecationReason:$_schema$$.deprecationReason, type:$process$$($_schema$$.type), args:(0, $_keyMap2$$.default)($_schema$$.args, function($exports$$) {
          return $exports$$.name;
        }), astNode:$_schema$$.astNode, resolve:$_schema$$.resolve};
      });
      var $_schema$$ = $typeExtensionsMap$$[$exports$$.name];
      $_schema$$ && $_schema$$.forEach(function($_schema$$) {
        $_schema$$.fields.forEach(function($_schema$$) {
          var $_objectValues2$$ = $_schema$$.name.value;
          if ($checkExtensionNode$$[$_objectValues2$$]) {
            throw new $_GraphQLError$$.GraphQLError('Field "' + $exports$$.name + "." + $_objectValues2$$ + '" already exists in the schema. It cannot also be defined in this type extension.', [$_schema$$]);
          }
          $require$$[$_objectValues2$$] = $astBuilder$$.buildField($_schema$$);
        });
      });
      return $require$$;
    }
    function $process$$($exports$$) {
      return (0, $_definition$$.isListType)($exports$$) ? (0, $_definition$$.GraphQLList)($process$$($exports$$.ofType)) : (0, $_definition$$.isNonNullType)($exports$$) ? (0, $_definition$$.GraphQLNonNull)($process$$($exports$$.ofType)) : $_interopRequireDefault$$($exports$$);
    }
    (0, $_schema$$.isSchema)($exports$$) ? void 0 : (0, $_invariant2$$.default)(0, "Must provide valid GraphQLSchema");
    $require$$ && $require$$.kind === $_kinds$$.Kind.DOCUMENT ? void 0 : (0, $_invariant2$$.default)(0, "Must provide valid Document AST");
    for (var $typeDefinitionMap_types$$ = Object.create(null), $typeExtensionsMap$$ = Object.create(null), $directiveDefinitions$$ = [], $existingMutationType_i$jscomp$37_mutationType$$ = 0; $existingMutationType_i$jscomp$37_mutationType$$ < $require$$.definitions.length; $existingMutationType_i$jscomp$37_mutationType$$++) {
      var $def$jscomp$12_existingSubscriptionType_subscriptionType$$ = $require$$.definitions[$existingMutationType_i$jscomp$37_mutationType$$];
      switch($def$jscomp$12_existingSubscriptionType_subscriptionType$$.kind) {
        case $_kinds$$.Kind.OBJECT_TYPE_DEFINITION:
        case $_kinds$$.Kind.INTERFACE_TYPE_DEFINITION:
        case $_kinds$$.Kind.ENUM_TYPE_DEFINITION:
        case $_kinds$$.Kind.UNION_TYPE_DEFINITION:
        case $_kinds$$.Kind.SCALAR_TYPE_DEFINITION:
        case $_kinds$$.Kind.INPUT_OBJECT_TYPE_DEFINITION:
          var $directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$ = $def$jscomp$12_existingSubscriptionType_subscriptionType$$.name.value;
          if ($exports$$.getType($directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$)) {
            throw new $_GraphQLError$$.GraphQLError('Type "' + $directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$ + '" already exists in the schema. It cannot also be defined in this type definition.', [$def$jscomp$12_existingSubscriptionType_subscriptionType$$]);
          }
          $typeDefinitionMap_types$$[$directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$] = $def$jscomp$12_existingSubscriptionType_subscriptionType$$;
          break;
        case $_kinds$$.Kind.OBJECT_TYPE_EXTENSION:
        case $_kinds$$.Kind.INTERFACE_TYPE_EXTENSION:
          $directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$ = $def$jscomp$12_existingSubscriptionType_subscriptionType$$.name.value;
          var $existingType_existingTypeExtensions$$ = $exports$$.getType($directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$);
          if (!$existingType_existingTypeExtensions$$) {
            throw new $_GraphQLError$$.GraphQLError('Cannot extend type "' + $directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$ + '" because it does not exist in the existing schema.', [$def$jscomp$12_existingSubscriptionType_subscriptionType$$]);
          }
          $checkExtensionNode$$($existingType_existingTypeExtensions$$, $def$jscomp$12_existingSubscriptionType_subscriptionType$$);
          $existingType_existingTypeExtensions$$ = $typeExtensionsMap$$[$directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$];
          $typeExtensionsMap$$[$directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$] = $existingType_existingTypeExtensions$$ ? $existingType_existingTypeExtensions$$.concat([$def$jscomp$12_existingSubscriptionType_subscriptionType$$]) : [$def$jscomp$12_existingSubscriptionType_subscriptionType$$];
          break;
        case $_kinds$$.Kind.DIRECTIVE_DEFINITION:
          $directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$ = $def$jscomp$12_existingSubscriptionType_subscriptionType$$.name.value;
          if ($exports$$.getDirective($directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$)) {
            throw new $_GraphQLError$$.GraphQLError('Directive "' + $directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$ + '" already exists in the schema. It cannot be redefined.', [$def$jscomp$12_existingSubscriptionType_subscriptionType$$]);
          }
          $directiveDefinitions$$.push($def$jscomp$12_existingSubscriptionType_subscriptionType$$);
          break;
        case $_kinds$$.Kind.SCALAR_TYPE_EXTENSION:
        case $_kinds$$.Kind.UNION_TYPE_EXTENSION:
        case $_kinds$$.Kind.ENUM_TYPE_EXTENSION:
        case $_kinds$$.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          throw Error("The " + $def$jscomp$12_existingSubscriptionType_subscriptionType$$.kind + " kind is not yet supported by extendSchema().");
      }
    }
    if (0 === Object.keys($typeExtensionsMap$$).length && 0 === Object.keys($typeDefinitionMap_types$$).length && 0 === $directiveDefinitions$$.length) {
      return $exports$$;
    }
    var $astBuilder$$ = new $_buildASTSchema$$.ASTDefinitionBuilder($typeDefinitionMap_types$$, $_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$, function($require$$) {
      var $checkExtensionNode$$ = $require$$.name.value, $_schema$$ = $exports$$.getType($checkExtensionNode$$);
      if ($_schema$$) {
        return $_interopRequireDefault$$($_schema$$);
      }
      throw new $_GraphQLError$$.GraphQLError('Unknown type: "' + $checkExtensionNode$$ + '". Ensure that this type exists either in the original schema, or is added in a type definition.', [$require$$]);
    }), $extendTypeCache$$ = Object.create(null);
    $require$$ = ($require$$ = $exports$$.getQueryType()) ? $_interopRequireDefault$$($require$$) : null;
    $existingMutationType_i$jscomp$37_mutationType$$ = ($existingMutationType_i$jscomp$37_mutationType$$ = $exports$$.getMutationType()) ? $_interopRequireDefault$$($existingMutationType_i$jscomp$37_mutationType$$) : null;
    $def$jscomp$12_existingSubscriptionType_subscriptionType$$ = ($def$jscomp$12_existingSubscriptionType_subscriptionType$$ = $exports$$.getSubscriptionType()) ? $_interopRequireDefault$$($def$jscomp$12_existingSubscriptionType_subscriptionType$$) : null;
    $typeDefinitionMap_types$$ = [].concat((0, $_objectValues2$$.default)($exports$$.getTypeMap()).map(function($exports$$) {
      return $_interopRequireDefault$$($exports$$);
    }), $astBuilder$$.buildTypes((0, $_objectValues2$$.default)($typeDefinitionMap_types$$)));
    $directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$ = $exports$$.__allowedLegacyNames;
    $_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$ = $_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$ && $_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$.allowedLegacyNames;
    $_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$ = $directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$ && $_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$ ? $directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$.concat($_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$) : $directiveName$jscomp$6_extendedTypeName_schemaAllowedLegacyNames_typeName$$ || $_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$;
    return new $_schema$$.GraphQLSchema({query:$require$$, mutation:$existingMutationType_i$jscomp$37_mutationType$$, subscription:$def$jscomp$12_existingSubscriptionType_subscriptionType$$, types:$typeDefinitionMap_types$$, directives:function() {
      var $require$$ = $exports$$.getDirectives();
      $require$$ ? void 0 : (0, $_invariant2$$.default)(0, "schema must have default directives");
      return $require$$.concat($directiveDefinitions$$.map(function($exports$$) {
        return $astBuilder$$.buildDirective($exports$$);
      }));
    }(), astNode:$exports$$.astNode, allowedLegacyNames:$_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$});
  };
  $_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$ = $require$$("module$node_modules$graphql$jsutils$invariant");
  var $_invariant2$$ = $_interopRequireDefault$$($_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$);
  $_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$ = $require$$("module$node_modules$graphql$jsutils$keyMap");
  var $_keyMap2$$ = $_interopRequireDefault$$($_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$);
  $_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$ = $require$$("module$node_modules$graphql$jsutils$objectValues");
  var $_objectValues2$$ = $_interopRequireDefault$$($_invariant$jscomp$11__keyMap$jscomp$6__objectValues$jscomp$5_global$$), $_buildASTSchema$$ = $require$$("module$node_modules$graphql$utilities$buildASTSchema"), $_GraphQLError$$ = $require$$("module$node_modules$graphql$error$GraphQLError"), $_schema$$ = $require$$("module$node_modules$graphql$type$schema"), $_introspection$$ = $require$$("module$node_modules$graphql$type$introspection"), $_definition$$ = $require$$("module$node_modules$graphql$type$definition");
  $require$$("module$node_modules$graphql$type$directives");
  var $_kinds$$ = $require$$("module$node_modules$graphql$language$kinds");
};
