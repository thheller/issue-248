shadow$provide.module$node_modules$graphql$type$scalars = function($global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $coerceInt$$($exports$$) {
    if ("" === $exports$$) {
      throw new TypeError("Int cannot represent non 32-bit signed integer value: (empty string)");
    }
    var $GraphQLString$$ = Number($exports$$);
    if ($GraphQLString$$ !== $GraphQLString$$ || 2147483647 < $GraphQLString$$ || -2147483648 > $GraphQLString$$) {
      throw new TypeError("Int cannot represent non 32-bit signed integer value: " + String($exports$$));
    }
    var $require$$ = Math.floor($GraphQLString$$);
    if ($require$$ !== $GraphQLString$$) {
      throw new TypeError("Int cannot represent non-integer value: " + String($exports$$));
    }
    return $require$$;
  }
  function $coerceFloat$$($exports$$) {
    if ("" === $exports$$) {
      throw new TypeError("Float cannot represent non numeric value: (empty string)");
    }
    var $GraphQLString$$ = Number($exports$$);
    if ($GraphQLString$$ === $GraphQLString$$) {
      return $GraphQLString$$;
    }
    throw new TypeError("Float cannot represent non numeric value: " + String($exports$$));
  }
  function $coerceString$$($exports$$) {
    if (Array.isArray($exports$$)) {
      throw new TypeError("String cannot represent an array value: [" + String($exports$$) + "]");
    }
    return String($exports$$);
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.specifiedScalarTypes = $exports$$.GraphQLID = $exports$$.GraphQLBoolean = $exports$$.GraphQLString = $exports$$.GraphQLFloat = $exports$$.GraphQLInt = void 0;
  $exports$$.isSpecifiedScalarType = function($exports$$) {
    return (0, $_definition$$.isNamedType)($exports$$) && ($exports$$.name === $GraphQLString$$.name || $exports$$.name === $GraphQLInt$$.name || $exports$$.name === $GraphQLFloat$$.name || $exports$$.name === $GraphQLBoolean$$.name || $exports$$.name === $GraphQLID$$.name);
  };
  var $_definition$$ = $require$$("module$node_modules$graphql$type$definition"), $_kinds$$ = $require$$("module$node_modules$graphql$language$kinds"), $GraphQLInt$$ = $exports$$.GraphQLInt = new $_definition$$.GraphQLScalarType({name:"Int", description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. ", serialize:$coerceInt$$, parseValue:$coerceInt$$, parseLiteral:function($exports$$) {
    if ($exports$$.kind === $_kinds$$.Kind.INT && ($exports$$ = parseInt($exports$$.value, 10), 2147483647 >= $exports$$ && -2147483648 <= $exports$$)) {
      return $exports$$;
    }
  }}), $GraphQLFloat$$ = $exports$$.GraphQLFloat = new $_definition$$.GraphQLScalarType({name:"Float", description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ", serialize:$coerceFloat$$, parseValue:$coerceFloat$$, parseLiteral:function($exports$$) {
    return $exports$$.kind === $_kinds$$.Kind.FLOAT || $exports$$.kind === $_kinds$$.Kind.INT ? parseFloat($exports$$.value) : void 0;
  }}), $GraphQLString$$ = $exports$$.GraphQLString = new $_definition$$.GraphQLScalarType({name:"String", description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.", serialize:$coerceString$$, parseValue:$coerceString$$, parseLiteral:function($exports$$) {
    return $exports$$.kind === $_kinds$$.Kind.STRING ? $exports$$.value : void 0;
  }}), $GraphQLBoolean$$ = $exports$$.GraphQLBoolean = new $_definition$$.GraphQLScalarType({name:"Boolean", description:"The `Boolean` scalar type represents `true` or `false`.", serialize:Boolean, parseValue:Boolean, parseLiteral:function($exports$$) {
    return $exports$$.kind === $_kinds$$.Kind.BOOLEAN ? $exports$$.value : void 0;
  }}), $GraphQLID$$ = $exports$$.GraphQLID = new $_definition$$.GraphQLScalarType({name:"ID", description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.', serialize:String, parseValue:String, parseLiteral:function($exports$$) {
    return $exports$$.kind === $_kinds$$.Kind.STRING || $exports$$.kind === $_kinds$$.Kind.INT ? $exports$$.value : void 0;
  }});
  $exports$$.specifiedScalarTypes = [$GraphQLString$$, $GraphQLInt$$, $GraphQLFloat$$, $GraphQLBoolean$$, $GraphQLID$$];
};
