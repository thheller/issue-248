shadow$provide.module$node_modules$graphql$language$visitor = function($global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $isNode$$($exports$$) {
    return !(!$exports$$ || "string" !== typeof $exports$$.kind);
  }
  function $getVisitFn$$($exports$$, $require$$, $getVisitFn$$) {
    var $kindVisitor$$ = $exports$$[$require$$];
    if ($kindVisitor$$) {
      if (!$getVisitFn$$ && "function" === typeof $kindVisitor$$) {
        return $kindVisitor$$;
      }
      $require$$ = $getVisitFn$$ ? $kindVisitor$$.leave : $kindVisitor$$.enter;
      if ("function" === typeof $require$$) {
        return $require$$;
      }
    } else {
      if ($exports$$ = $getVisitFn$$ ? $exports$$.leave : $exports$$.enter) {
        if ("function" === typeof $exports$$) {
          return $exports$$;
        }
        $require$$ = $exports$$[$require$$];
        if ("function" === typeof $require$$) {
          return $require$$;
        }
      }
    }
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.visit = function($exports$$, $require$$) {
    var $root$$ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : $QueryDocumentKeys$$, $stack$$ = void 0, $visitor$$ = Array.isArray($exports$$), $global$$ = [$exports$$], $ii_index$$ = -1, $edits$$ = [], $parent$$ = void 0, $path$$ = [], $ancestors$$ = [], $newRoot$$ = $exports$$;
    do {
      $ii_index$$++;
      var $isLeaving$$ = $ii_index$$ === $global$$.length, $isEdited$$ = $isLeaving$$ && 0 !== $edits$$.length;
      if ($isLeaving$$) {
        var $key$$ = 0 === $ancestors$$.length ? void 0 : $path$$[$path$$.length - 1];
        var $node$$ = $parent$$;
        $parent$$ = $ancestors$$.pop();
        if ($isEdited$$) {
          if ($visitor$$) {
            $node$$ = $node$$.slice();
          } else {
            $global$$ = {};
            for (var $k$$ in $node$$) {
              $node$$.hasOwnProperty($k$$) && ($global$$[$k$$] = $node$$[$k$$]);
            }
            $node$$ = $global$$;
          }
          for ($ii_index$$ = $global$$ = 0; $ii_index$$ < $edits$$.length; $ii_index$$++) {
            var $editKey_result$$ = $edits$$[$ii_index$$][0], $editValue_visitFn$$ = $edits$$[$ii_index$$][1];
            $visitor$$ && ($editKey_result$$ -= $global$$);
            $visitor$$ && null === $editValue_visitFn$$ ? ($node$$.splice($editKey_result$$, 1), $global$$++) : $node$$[$editKey_result$$] = $editValue_visitFn$$;
          }
        }
        $ii_index$$ = $stack$$.index;
        $global$$ = $stack$$.keys;
        $edits$$ = $stack$$.edits;
        $visitor$$ = $stack$$.inArray;
        $stack$$ = $stack$$.prev;
      } else {
        $key$$ = $parent$$ ? $visitor$$ ? $ii_index$$ : $global$$[$ii_index$$] : void 0;
        $node$$ = $parent$$ ? $parent$$[$key$$] : $newRoot$$;
        if (null === $node$$ || void 0 === $node$$) {
          continue;
        }
        $parent$$ && $path$$.push($key$$);
      }
      $editKey_result$$ = void 0;
      if (!Array.isArray($node$$)) {
        if (!$isNode$$($node$$)) {
          throw Error("Invalid AST Node: " + JSON.stringify($node$$));
        }
        if ($editValue_visitFn$$ = $getVisitFn$$($require$$, $node$$.kind, $isLeaving$$)) {
          $editKey_result$$ = $editValue_visitFn$$.call($require$$, $node$$, $key$$, $parent$$, $path$$, $ancestors$$);
          if ($editKey_result$$ === $BREAK$$) {
            break;
          }
          if (!1 === $editKey_result$$) {
            if (!$isLeaving$$) {
              $path$$.pop();
              continue;
            }
          } else {
            if (void 0 !== $editKey_result$$ && ($edits$$.push([$key$$, $editKey_result$$]), !$isLeaving$$)) {
              if ($isNode$$($editKey_result$$)) {
                $node$$ = $editKey_result$$;
              } else {
                $path$$.pop();
                continue;
              }
            }
          }
        }
      }
      void 0 === $editKey_result$$ && $isEdited$$ && $edits$$.push([$key$$, $node$$]);
      $isLeaving$$ ? $path$$.pop() : ($stack$$ = {inArray:$visitor$$, index:$ii_index$$, keys:$global$$, edits:$edits$$, prev:$stack$$}, $global$$ = ($visitor$$ = Array.isArray($node$$)) ? $node$$ : $root$$[$node$$.kind] || [], $ii_index$$ = -1, $edits$$ = [], $parent$$ && $ancestors$$.push($parent$$), $parent$$ = $node$$);
    } while (void 0 !== $stack$$);
    0 !== $edits$$.length && ($newRoot$$ = $edits$$[$edits$$.length - 1][1]);
    return $newRoot$$;
  };
  $exports$$.visitInParallel = function($exports$$) {
    var $require$$ = Array($exports$$.length);
    return {enter:function($visitors$$) {
      for (var $i$$ = 0; $i$$ < $exports$$.length; $i$$++) {
        if (!$require$$[$i$$]) {
          var $skipping$$ = $getVisitFn$$($exports$$[$i$$], $visitors$$.kind, !1);
          if ($skipping$$) {
            if ($skipping$$ = $skipping$$.apply($exports$$[$i$$], arguments), !1 === $skipping$$) {
              $require$$[$i$$] = $visitors$$;
            } else {
              if ($skipping$$ === $BREAK$$) {
                $require$$[$i$$] = $BREAK$$;
              } else {
                if (void 0 !== $skipping$$) {
                  return $skipping$$;
                }
              }
            }
          }
        }
      }
    }, leave:function($visitors$$) {
      for (var $i$$ = 0; $i$$ < $exports$$.length; $i$$++) {
        if ($require$$[$i$$]) {
          $require$$[$i$$] === $visitors$$ && ($require$$[$i$$] = null);
        } else {
          var $skipping$$ = $getVisitFn$$($exports$$[$i$$], $visitors$$.kind, !0);
          if ($skipping$$) {
            if ($skipping$$ = $skipping$$.apply($exports$$[$i$$], arguments), $skipping$$ === $BREAK$$) {
              $require$$[$i$$] = $BREAK$$;
            } else {
              if (void 0 !== $skipping$$ && !1 !== $skipping$$) {
                return $skipping$$;
              }
            }
          }
        }
      }
    }};
  };
  $exports$$.visitWithTypeInfo = function($exports$$, $require$$) {
    return {enter:function($typeInfo$$) {
      $exports$$.enter($typeInfo$$);
      var $fn$jscomp$2_result$$ = $getVisitFn$$($require$$, $typeInfo$$.kind, !1);
      if ($fn$jscomp$2_result$$) {
        return $fn$jscomp$2_result$$ = $fn$jscomp$2_result$$.apply($require$$, arguments), void 0 !== $fn$jscomp$2_result$$ && ($exports$$.leave($typeInfo$$), $isNode$$($fn$jscomp$2_result$$) && $exports$$.enter($fn$jscomp$2_result$$)), $fn$jscomp$2_result$$;
      }
    }, leave:function($typeInfo$$) {
      var $fn$$ = $getVisitFn$$($require$$, $typeInfo$$.kind, !0), $visitor$$ = void 0;
      $fn$$ && ($visitor$$ = $fn$$.apply($require$$, arguments));
      $exports$$.leave($typeInfo$$);
      return $visitor$$;
    }};
  };
  $exports$$.getVisitFn = $getVisitFn$$;
  var $QueryDocumentKeys$$ = $exports$$.QueryDocumentKeys = {Name:[], Document:["definitions"], OperationDefinition:["name", "variableDefinitions", "directives", "selectionSet"], VariableDefinition:["variable", "type", "defaultValue"], Variable:["name"], SelectionSet:["selections"], Field:["alias", "name", "arguments", "directives", "selectionSet"], Argument:["name", "value"], FragmentSpread:["name", "directives"], InlineFragment:["typeCondition", "directives", "selectionSet"], FragmentDefinition:["name", 
  "variableDefinitions", "typeCondition", "directives", "selectionSet"], IntValue:[], FloatValue:[], StringValue:[], BooleanValue:[], NullValue:[], EnumValue:[], ListValue:["values"], ObjectValue:["fields"], ObjectField:["name", "value"], Directive:["name", "arguments"], NamedType:["name"], ListType:["type"], NonNullType:["type"], SchemaDefinition:["directives", "operationTypes"], OperationTypeDefinition:["type"], ScalarTypeDefinition:["description", "name", "directives"], ObjectTypeDefinition:["description", 
  "name", "interfaces", "directives", "fields"], FieldDefinition:["description", "name", "arguments", "type", "directives"], InputValueDefinition:["description", "name", "type", "defaultValue", "directives"], InterfaceTypeDefinition:["description", "name", "directives", "fields"], UnionTypeDefinition:["description", "name", "directives", "types"], EnumTypeDefinition:["description", "name", "directives", "values"], EnumValueDefinition:["description", "name", "directives"], InputObjectTypeDefinition:["description", 
  "name", "directives", "fields"], ScalarTypeExtension:["name", "directives"], ObjectTypeExtension:["name", "interfaces", "directives", "fields"], InterfaceTypeExtension:["name", "directives", "fields"], UnionTypeExtension:["name", "directives", "types"], EnumTypeExtension:["name", "directives", "values"], InputObjectTypeExtension:["name", "directives", "fields"], DirectiveDefinition:["description", "name", "arguments", "locations"]}, $BREAK$$ = $exports$$.BREAK = {};
};
