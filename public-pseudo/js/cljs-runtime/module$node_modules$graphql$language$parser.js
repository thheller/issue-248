shadow$provide.module$node_modules$graphql$language$parser = function($global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $parseName$$($exports$$) {
    var $require$$ = $expect$$($exports$$, $_lexer$$.TokenKind.NAME);
    return {kind:$_kinds$$.Kind.NAME, value:$require$$.value, loc:$loc$$($exports$$, $require$$)};
  }
  function $parseDefinition$$($exports$$) {
    if ($peek$$($exports$$, $_lexer$$.TokenKind.NAME)) {
      switch($exports$$.token.value) {
        case "query":
        case "mutation":
        case "subscription":
        case "fragment":
          return $parseExecutableDefinition$$($exports$$);
        case "schema":
        case "scalar":
        case "type":
        case "interface":
        case "union":
        case "enum":
        case "input":
        case "extend":
        case "directive":
          return $parseTypeSystemDefinition$$($exports$$);
      }
    } else {
      if ($peek$$($exports$$, $_lexer$$.TokenKind.BRACE_L)) {
        return $parseExecutableDefinition$$($exports$$);
      }
      if ($peekDescription$$($exports$$)) {
        return $parseTypeSystemDefinition$$($exports$$);
      }
    }
    throw $unexpected$$($exports$$);
  }
  function $parseExecutableDefinition$$($exports$$) {
    if ($peek$$($exports$$, $_lexer$$.TokenKind.NAME)) {
      switch($exports$$.token.value) {
        case "query":
        case "mutation":
        case "subscription":
          return $parseOperationDefinition$$($exports$$);
        case "fragment":
          var $require$$ = $exports$$.token;
          $expectKeyword$$($exports$$, "fragment");
          $exports$$ = $exports$$.options.experimentalFragmentVariables ? {kind:$_kinds$$.Kind.FRAGMENT_DEFINITION, name:$parseFragmentName$$($exports$$), variableDefinitions:$parseVariableDefinitions$$($exports$$), typeCondition:($expectKeyword$$($exports$$, "on"), $parseNamedType$$($exports$$)), directives:$parseDirectives$$($exports$$, !1), selectionSet:$parseSelectionSet$$($exports$$), loc:$loc$$($exports$$, $require$$)} : {kind:$_kinds$$.Kind.FRAGMENT_DEFINITION, name:$parseFragmentName$$($exports$$), 
          typeCondition:($expectKeyword$$($exports$$, "on"), $parseNamedType$$($exports$$)), directives:$parseDirectives$$($exports$$, !1), selectionSet:$parseSelectionSet$$($exports$$), loc:$loc$$($exports$$, $require$$)};
          return $exports$$;
      }
    } else {
      if ($peek$$($exports$$, $_lexer$$.TokenKind.BRACE_L)) {
        return $parseOperationDefinition$$($exports$$);
      }
    }
    throw $unexpected$$($exports$$);
  }
  function $parseOperationDefinition$$($exports$$) {
    var $require$$ = $exports$$.token;
    if ($peek$$($exports$$, $_lexer$$.TokenKind.BRACE_L)) {
      return {kind:$_kinds$$.Kind.OPERATION_DEFINITION, operation:"query", name:void 0, variableDefinitions:[], directives:[], selectionSet:$parseSelectionSet$$($exports$$), loc:$loc$$($exports$$, $require$$)};
    }
    var $parseVariable$$ = $parseOperationType$$($exports$$), $parseDefinition$$ = void 0;
    $peek$$($exports$$, $_lexer$$.TokenKind.NAME) && ($parseDefinition$$ = $parseName$$($exports$$));
    return {kind:$_kinds$$.Kind.OPERATION_DEFINITION, operation:$parseVariable$$, name:$parseDefinition$$, variableDefinitions:$parseVariableDefinitions$$($exports$$), directives:$parseDirectives$$($exports$$, !1), selectionSet:$parseSelectionSet$$($exports$$), loc:$loc$$($exports$$, $require$$)};
  }
  function $parseOperationType$$($exports$$) {
    var $require$$ = $expect$$($exports$$, $_lexer$$.TokenKind.NAME);
    switch($require$$.value) {
      case "query":
        return "query";
      case "mutation":
        return "mutation";
      case "subscription":
        return "subscription";
    }
    throw $unexpected$$($exports$$, $require$$);
  }
  function $parseVariableDefinitions$$($exports$$) {
    return $peek$$($exports$$, $_lexer$$.TokenKind.PAREN_L) ? $many$$($exports$$, $_lexer$$.TokenKind.PAREN_L, $parseVariableDefinition$$, $_lexer$$.TokenKind.PAREN_R) : [];
  }
  function $parseVariableDefinition$$($exports$$) {
    var $require$$ = $exports$$.token;
    return {kind:$_kinds$$.Kind.VARIABLE_DEFINITION, variable:$parseVariable$$($exports$$), type:($expect$$($exports$$, $_lexer$$.TokenKind.COLON), $parseTypeReference$$($exports$$)), defaultValue:$skip$$($exports$$, $_lexer$$.TokenKind.EQUALS) ? $parseValueLiteral$$($exports$$, !0) : void 0, loc:$loc$$($exports$$, $require$$)};
  }
  function $parseVariable$$($exports$$) {
    var $require$$ = $exports$$.token;
    $expect$$($exports$$, $_lexer$$.TokenKind.DOLLAR);
    return {kind:$_kinds$$.Kind.VARIABLE, name:$parseName$$($exports$$), loc:$loc$$($exports$$, $require$$)};
  }
  function $parseSelectionSet$$($exports$$) {
    var $require$$ = $exports$$.token;
    return {kind:$_kinds$$.Kind.SELECTION_SET, selections:$many$$($exports$$, $_lexer$$.TokenKind.BRACE_L, $parseSelection$$, $_lexer$$.TokenKind.BRACE_R), loc:$loc$$($exports$$, $require$$)};
  }
  function $parseSelection$$($exports$$) {
    if ($peek$$($exports$$, $_lexer$$.TokenKind.SPREAD)) {
      var $require$$ = $exports$$.token;
      $expect$$($exports$$, $_lexer$$.TokenKind.SPREAD);
      if ($peek$$($exports$$, $_lexer$$.TokenKind.NAME) && "on" !== $exports$$.token.value) {
        $exports$$ = {kind:$_kinds$$.Kind.FRAGMENT_SPREAD, name:$parseFragmentName$$($exports$$), directives:$parseDirectives$$($exports$$, !1), loc:$loc$$($exports$$, $require$$)};
      } else {
        var $parseVariable$$ = void 0;
        "on" === $exports$$.token.value && ($exports$$.advance(), $parseVariable$$ = $parseNamedType$$($exports$$));
        $exports$$ = {kind:$_kinds$$.Kind.INLINE_FRAGMENT, typeCondition:$parseVariable$$, directives:$parseDirectives$$($exports$$, !1), selectionSet:$parseSelectionSet$$($exports$$), loc:$loc$$($exports$$, $require$$)};
      }
    } else {
      $require$$ = $exports$$.token;
      var $parseDefinition$$ = $parseName$$($exports$$);
      $parseVariable$$ = void 0;
      $skip$$($exports$$, $_lexer$$.TokenKind.COLON) && ($parseVariable$$ = $parseDefinition$$, $parseDefinition$$ = $parseName$$($exports$$));
      $exports$$ = {kind:$_kinds$$.Kind.FIELD, alias:$parseVariable$$, name:$parseDefinition$$, arguments:$parseArguments$$($exports$$, !1), directives:$parseDirectives$$($exports$$, !1), selectionSet:$peek$$($exports$$, $_lexer$$.TokenKind.BRACE_L) ? $parseSelectionSet$$($exports$$) : void 0, loc:$loc$$($exports$$, $require$$)};
    }
    return $exports$$;
  }
  function $parseArguments$$($exports$$, $require$$) {
    $require$$ = $require$$ ? $parseConstArgument$$ : $parseArgument$$;
    return $peek$$($exports$$, $_lexer$$.TokenKind.PAREN_L) ? $many$$($exports$$, $_lexer$$.TokenKind.PAREN_L, $require$$, $_lexer$$.TokenKind.PAREN_R) : [];
  }
  function $parseArgument$$($exports$$) {
    var $require$$ = $exports$$.token;
    return {kind:$_kinds$$.Kind.ARGUMENT, name:$parseName$$($exports$$), value:($expect$$($exports$$, $_lexer$$.TokenKind.COLON), $parseValueLiteral$$($exports$$, !1)), loc:$loc$$($exports$$, $require$$)};
  }
  function $parseConstArgument$$($exports$$) {
    var $require$$ = $exports$$.token;
    return {kind:$_kinds$$.Kind.ARGUMENT, name:$parseName$$($exports$$), value:($expect$$($exports$$, $_lexer$$.TokenKind.COLON), $parseConstValue$$($exports$$)), loc:$loc$$($exports$$, $require$$)};
  }
  function $parseFragmentName$$($exports$$) {
    if ("on" === $exports$$.token.value) {
      throw $unexpected$$($exports$$);
    }
    return $parseName$$($exports$$);
  }
  function $parseValueLiteral$$($exports$$, $require$$) {
    var $parseDefinition$$ = $exports$$.token;
    switch($parseDefinition$$.kind) {
      case $_lexer$$.TokenKind.BRACKET_L:
        $parseDefinition$$ = $exports$$.token;
        var $parseOperationType$$ = $_kinds$$.Kind.LIST;
        $require$$ = $require$$ ? $parseConstValue$$ : $parseValueValue$$;
        var $parseVariableDefinitions$$ = $_lexer$$.TokenKind.BRACKET_R;
        $expect$$($exports$$, $_lexer$$.TokenKind.BRACKET_L);
        for (var $global$$ = []; !$skip$$($exports$$, $parseVariableDefinitions$$);) {
          $global$$.push($require$$($exports$$));
        }
        return {kind:$parseOperationType$$, values:$global$$, loc:$loc$$($exports$$, $parseDefinition$$)};
      case $_lexer$$.TokenKind.BRACE_L:
        $parseDefinition$$ = $exports$$.token;
        $expect$$($exports$$, $_lexer$$.TokenKind.BRACE_L);
        for ($parseOperationType$$ = []; !$skip$$($exports$$, $_lexer$$.TokenKind.BRACE_R);) {
          $parseOperationType$$.push($parseObjectField$$($exports$$, $require$$));
        }
        return {kind:$_kinds$$.Kind.OBJECT, fields:$parseOperationType$$, loc:$loc$$($exports$$, $parseDefinition$$)};
      case $_lexer$$.TokenKind.INT:
        return $exports$$.advance(), {kind:$_kinds$$.Kind.INT, value:$parseDefinition$$.value, loc:$loc$$($exports$$, $parseDefinition$$)};
      case $_lexer$$.TokenKind.FLOAT:
        return $exports$$.advance(), {kind:$_kinds$$.Kind.FLOAT, value:$parseDefinition$$.value, loc:$loc$$($exports$$, $parseDefinition$$)};
      case $_lexer$$.TokenKind.STRING:
      case $_lexer$$.TokenKind.BLOCK_STRING:
        return $parseStringLiteral$$($exports$$);
      case $_lexer$$.TokenKind.NAME:
        if ("true" === $parseDefinition$$.value || "false" === $parseDefinition$$.value) {
          return $exports$$.advance(), {kind:$_kinds$$.Kind.BOOLEAN, value:"true" === $parseDefinition$$.value, loc:$loc$$($exports$$, $parseDefinition$$)};
        }
        if ("null" === $parseDefinition$$.value) {
          return $exports$$.advance(), {kind:$_kinds$$.Kind.NULL, loc:$loc$$($exports$$, $parseDefinition$$)};
        }
        $exports$$.advance();
        return {kind:$_kinds$$.Kind.ENUM, value:$parseDefinition$$.value, loc:$loc$$($exports$$, $parseDefinition$$)};
      case $_lexer$$.TokenKind.DOLLAR:
        if (!$require$$) {
          return $parseVariable$$($exports$$);
        }
    }
    throw $unexpected$$($exports$$);
  }
  function $parseStringLiteral$$($exports$$) {
    var $require$$ = $exports$$.token;
    $exports$$.advance();
    return {kind:$_kinds$$.Kind.STRING, value:$require$$.value, block:$require$$.kind === $_lexer$$.TokenKind.BLOCK_STRING, loc:$loc$$($exports$$, $require$$)};
  }
  function $parseConstValue$$($exports$$) {
    return $parseValueLiteral$$($exports$$, !0);
  }
  function $parseValueValue$$($exports$$) {
    return $parseValueLiteral$$($exports$$, !1);
  }
  function $parseObjectField$$($exports$$, $require$$) {
    var $parseVariable$$ = $exports$$.token;
    return {kind:$_kinds$$.Kind.OBJECT_FIELD, name:$parseName$$($exports$$), value:($expect$$($exports$$, $_lexer$$.TokenKind.COLON), $parseValueLiteral$$($exports$$, $require$$)), loc:$loc$$($exports$$, $parseVariable$$)};
  }
  function $parseDirectives$$($exports$$, $require$$) {
    for (var $parseVariable$$ = []; $peek$$($exports$$, $_lexer$$.TokenKind.AT);) {
      $parseVariable$$.push($parseDirective$$($exports$$, $require$$));
    }
    return $parseVariable$$;
  }
  function $parseDirective$$($exports$$, $require$$) {
    var $parseVariable$$ = $exports$$.token;
    $expect$$($exports$$, $_lexer$$.TokenKind.AT);
    return {kind:$_kinds$$.Kind.DIRECTIVE, name:$parseName$$($exports$$), arguments:$parseArguments$$($exports$$, $require$$), loc:$loc$$($exports$$, $parseVariable$$)};
  }
  function $parseTypeReference$$($exports$$) {
    var $require$$ = $exports$$.token;
    if ($skip$$($exports$$, $_lexer$$.TokenKind.BRACKET_L)) {
      var $parseVariable$$ = $parseTypeReference$$($exports$$);
      $expect$$($exports$$, $_lexer$$.TokenKind.BRACKET_R);
      $parseVariable$$ = {kind:$_kinds$$.Kind.LIST_TYPE, type:$parseVariable$$, loc:$loc$$($exports$$, $require$$)};
    } else {
      $parseVariable$$ = $parseNamedType$$($exports$$);
    }
    return $skip$$($exports$$, $_lexer$$.TokenKind.BANG) ? {kind:$_kinds$$.Kind.NON_NULL_TYPE, type:$parseVariable$$, loc:$loc$$($exports$$, $require$$)} : $parseVariable$$;
  }
  function $parseNamedType$$($exports$$) {
    var $require$$ = $exports$$.token;
    return {kind:$_kinds$$.Kind.NAMED_TYPE, name:$parseName$$($exports$$), loc:$loc$$($exports$$, $require$$)};
  }
  function $parseTypeSystemDefinition$$($exports$$) {
    var $require$$ = $peekDescription$$($exports$$) ? $exports$$.lookahead() : $exports$$.token;
    if ($require$$.kind === $_lexer$$.TokenKind.NAME) {
      switch($require$$.value) {
        case "schema":
          $require$$ = $exports$$.token;
          $expectKeyword$$($exports$$, "schema");
          var $parseVariable$$ = $parseDirectives$$($exports$$, !0), $parseDefinition$$ = $many$$($exports$$, $_lexer$$.TokenKind.BRACE_L, $parseOperationTypeDefinition$$, $_lexer$$.TokenKind.BRACE_R);
          return {kind:$_kinds$$.Kind.SCHEMA_DEFINITION, directives:$parseVariable$$, operationTypes:$parseDefinition$$, loc:$loc$$($exports$$, $require$$)};
        case "scalar":
          $require$$ = $exports$$.token;
          $parseVariable$$ = $parseDescription$$($exports$$);
          $expectKeyword$$($exports$$, "scalar");
          $parseDefinition$$ = $parseName$$($exports$$);
          var $parseOperationType$$ = $parseDirectives$$($exports$$, !0);
          return {kind:$_kinds$$.Kind.SCALAR_TYPE_DEFINITION, description:$parseVariable$$, name:$parseDefinition$$, directives:$parseOperationType$$, loc:$loc$$($exports$$, $require$$)};
        case "type":
          $require$$ = $exports$$.token;
          $parseVariable$$ = $parseDescription$$($exports$$);
          $expectKeyword$$($exports$$, "type");
          $parseDefinition$$ = $parseName$$($exports$$);
          $parseOperationType$$ = $parseImplementsInterfaces$$($exports$$);
          var $parseVariableDefinitions$$ = $parseDirectives$$($exports$$, !0), $global$$ = $parseFieldsDefinition$$($exports$$);
          return {kind:$_kinds$$.Kind.OBJECT_TYPE_DEFINITION, description:$parseVariable$$, name:$parseDefinition$$, interfaces:$parseOperationType$$, directives:$parseVariableDefinitions$$, fields:$global$$, loc:$loc$$($exports$$, $require$$)};
        case "interface":
          return $require$$ = $exports$$.token, $parseVariable$$ = $parseDescription$$($exports$$), $expectKeyword$$($exports$$, "interface"), $parseDefinition$$ = $parseName$$($exports$$), $parseOperationType$$ = $parseDirectives$$($exports$$, !0), $parseVariableDefinitions$$ = $parseFieldsDefinition$$($exports$$), {kind:$_kinds$$.Kind.INTERFACE_TYPE_DEFINITION, description:$parseVariable$$, name:$parseDefinition$$, directives:$parseOperationType$$, fields:$parseVariableDefinitions$$, loc:$loc$$($exports$$, 
          $require$$)};
        case "union":
          return $require$$ = $exports$$.token, $parseVariable$$ = $parseDescription$$($exports$$), $expectKeyword$$($exports$$, "union"), $parseDefinition$$ = $parseName$$($exports$$), $parseOperationType$$ = $parseDirectives$$($exports$$, !0), $parseVariableDefinitions$$ = $parseUnionMemberTypes$$($exports$$), {kind:$_kinds$$.Kind.UNION_TYPE_DEFINITION, description:$parseVariable$$, name:$parseDefinition$$, directives:$parseOperationType$$, types:$parseVariableDefinitions$$, loc:$loc$$($exports$$, 
          $require$$)};
        case "enum":
          return $require$$ = $exports$$.token, $parseVariable$$ = $parseDescription$$($exports$$), $expectKeyword$$($exports$$, "enum"), $parseDefinition$$ = $parseName$$($exports$$), $parseOperationType$$ = $parseDirectives$$($exports$$, !0), $parseVariableDefinitions$$ = $parseEnumValuesDefinition$$($exports$$), {kind:$_kinds$$.Kind.ENUM_TYPE_DEFINITION, description:$parseVariable$$, name:$parseDefinition$$, directives:$parseOperationType$$, values:$parseVariableDefinitions$$, loc:$loc$$($exports$$, 
          $require$$)};
        case "input":
          return $require$$ = $exports$$.token, $parseVariable$$ = $parseDescription$$($exports$$), $expectKeyword$$($exports$$, "input"), $parseDefinition$$ = $parseName$$($exports$$), $parseOperationType$$ = $parseDirectives$$($exports$$, !0), $parseVariableDefinitions$$ = $parseInputFieldsDefinition$$($exports$$), {kind:$_kinds$$.Kind.INPUT_OBJECT_TYPE_DEFINITION, description:$parseVariable$$, name:$parseDefinition$$, directives:$parseOperationType$$, fields:$parseVariableDefinitions$$, loc:$loc$$($exports$$, 
          $require$$)};
        case "extend":
          return $parseTypeExtension$$($exports$$);
        case "directive":
          $require$$ = $exports$$.token;
          $parseVariable$$ = $parseDescription$$($exports$$);
          $expectKeyword$$($exports$$, "directive");
          $expect$$($exports$$, $_lexer$$.TokenKind.AT);
          $parseDefinition$$ = $parseName$$($exports$$);
          $parseOperationType$$ = $parseArgumentDefs$$($exports$$);
          $expectKeyword$$($exports$$, "on");
          $skip$$($exports$$, $_lexer$$.TokenKind.PIPE);
          $parseVariableDefinitions$$ = [];
          do {
            $parseVariableDefinitions$$.push($parseDirectiveLocation$$($exports$$));
          } while ($skip$$($exports$$, $_lexer$$.TokenKind.PIPE));
          return {kind:$_kinds$$.Kind.DIRECTIVE_DEFINITION, description:$parseVariable$$, name:$parseDefinition$$, arguments:$parseOperationType$$, locations:$parseVariableDefinitions$$, loc:$loc$$($exports$$, $require$$)};
      }
    }
    throw $unexpected$$($exports$$, $require$$);
  }
  function $peekDescription$$($exports$$) {
    return $peek$$($exports$$, $_lexer$$.TokenKind.STRING) || $peek$$($exports$$, $_lexer$$.TokenKind.BLOCK_STRING);
  }
  function $parseDescription$$($exports$$) {
    if ($peekDescription$$($exports$$)) {
      return $parseStringLiteral$$($exports$$);
    }
  }
  function $parseOperationTypeDefinition$$($exports$$) {
    var $require$$ = $exports$$.token, $parseVariable$$ = $parseOperationType$$($exports$$);
    $expect$$($exports$$, $_lexer$$.TokenKind.COLON);
    var $parseDefinition$$ = $parseNamedType$$($exports$$);
    return {kind:$_kinds$$.Kind.OPERATION_TYPE_DEFINITION, operation:$parseVariable$$, type:$parseDefinition$$, loc:$loc$$($exports$$, $require$$)};
  }
  function $parseImplementsInterfaces$$($exports$$) {
    var $require$$ = [];
    if ("implements" === $exports$$.token.value) {
      $exports$$.advance();
      $skip$$($exports$$, $_lexer$$.TokenKind.AMP);
      do {
        $require$$.push($parseNamedType$$($exports$$));
      } while ($skip$$($exports$$, $_lexer$$.TokenKind.AMP) || $exports$$.options.allowLegacySDLImplementsInterfaces && $peek$$($exports$$, $_lexer$$.TokenKind.NAME));
    }
    return $require$$;
  }
  function $parseFieldsDefinition$$($exports$$) {
    return $exports$$.options.allowLegacySDLEmptyFields && $peek$$($exports$$, $_lexer$$.TokenKind.BRACE_L) && $exports$$.lookahead().kind === $_lexer$$.TokenKind.BRACE_R ? ($exports$$.advance(), $exports$$.advance(), []) : $peek$$($exports$$, $_lexer$$.TokenKind.BRACE_L) ? $many$$($exports$$, $_lexer$$.TokenKind.BRACE_L, $parseFieldDefinition$$, $_lexer$$.TokenKind.BRACE_R) : [];
  }
  function $parseFieldDefinition$$($exports$$) {
    var $require$$ = $exports$$.token, $parseVariable$$ = $parseDescription$$($exports$$), $parseDefinition$$ = $parseName$$($exports$$), $parseOperationType$$ = $parseArgumentDefs$$($exports$$);
    $expect$$($exports$$, $_lexer$$.TokenKind.COLON);
    var $parseVariableDefinitions$$ = $parseTypeReference$$($exports$$), $global$$ = $parseDirectives$$($exports$$, !0);
    return {kind:$_kinds$$.Kind.FIELD_DEFINITION, description:$parseVariable$$, name:$parseDefinition$$, arguments:$parseOperationType$$, type:$parseVariableDefinitions$$, directives:$global$$, loc:$loc$$($exports$$, $require$$)};
  }
  function $parseArgumentDefs$$($exports$$) {
    return $peek$$($exports$$, $_lexer$$.TokenKind.PAREN_L) ? $many$$($exports$$, $_lexer$$.TokenKind.PAREN_L, $parseInputValueDef$$, $_lexer$$.TokenKind.PAREN_R) : [];
  }
  function $parseInputValueDef$$($exports$$) {
    var $require$$ = $exports$$.token, $parseVariable$$ = $parseDescription$$($exports$$), $parseDefinition$$ = $parseName$$($exports$$);
    $expect$$($exports$$, $_lexer$$.TokenKind.COLON);
    var $parseOperationType$$ = $parseTypeReference$$($exports$$), $parseVariableDefinitions$$ = void 0;
    $skip$$($exports$$, $_lexer$$.TokenKind.EQUALS) && ($parseVariableDefinitions$$ = $parseConstValue$$($exports$$));
    var $global$$ = $parseDirectives$$($exports$$, !0);
    return {kind:$_kinds$$.Kind.INPUT_VALUE_DEFINITION, description:$parseVariable$$, name:$parseDefinition$$, type:$parseOperationType$$, defaultValue:$parseVariableDefinitions$$, directives:$global$$, loc:$loc$$($exports$$, $require$$)};
  }
  function $parseUnionMemberTypes$$($exports$$) {
    var $require$$ = [];
    if ($skip$$($exports$$, $_lexer$$.TokenKind.EQUALS)) {
      $skip$$($exports$$, $_lexer$$.TokenKind.PIPE);
      do {
        $require$$.push($parseNamedType$$($exports$$));
      } while ($skip$$($exports$$, $_lexer$$.TokenKind.PIPE));
    }
    return $require$$;
  }
  function $parseEnumValuesDefinition$$($exports$$) {
    return $peek$$($exports$$, $_lexer$$.TokenKind.BRACE_L) ? $many$$($exports$$, $_lexer$$.TokenKind.BRACE_L, $parseEnumValueDefinition$$, $_lexer$$.TokenKind.BRACE_R) : [];
  }
  function $parseEnumValueDefinition$$($exports$$) {
    var $require$$ = $exports$$.token, $parseVariable$$ = $parseDescription$$($exports$$), $parseDefinition$$ = $parseName$$($exports$$), $parseOperationType$$ = $parseDirectives$$($exports$$, !0);
    return {kind:$_kinds$$.Kind.ENUM_VALUE_DEFINITION, description:$parseVariable$$, name:$parseDefinition$$, directives:$parseOperationType$$, loc:$loc$$($exports$$, $require$$)};
  }
  function $parseInputFieldsDefinition$$($exports$$) {
    return $peek$$($exports$$, $_lexer$$.TokenKind.BRACE_L) ? $many$$($exports$$, $_lexer$$.TokenKind.BRACE_L, $parseInputValueDef$$, $_lexer$$.TokenKind.BRACE_R) : [];
  }
  function $parseTypeExtension$$($exports$$) {
    var $require$$ = $exports$$.lookahead();
    if ($require$$.kind === $_lexer$$.TokenKind.NAME) {
      switch($require$$.value) {
        case "scalar":
          $require$$ = $exports$$.token;
          $expectKeyword$$($exports$$, "extend");
          $expectKeyword$$($exports$$, "scalar");
          var $parseVariable$$ = $parseName$$($exports$$), $parseDefinition$$ = $parseDirectives$$($exports$$, !0);
          if (0 === $parseDefinition$$.length) {
            throw $unexpected$$($exports$$);
          }
          return {kind:$_kinds$$.Kind.SCALAR_TYPE_EXTENSION, name:$parseVariable$$, directives:$parseDefinition$$, loc:$loc$$($exports$$, $require$$)};
        case "type":
          $require$$ = $exports$$.token;
          $expectKeyword$$($exports$$, "extend");
          $expectKeyword$$($exports$$, "type");
          $parseVariable$$ = $parseName$$($exports$$);
          $parseDefinition$$ = $parseImplementsInterfaces$$($exports$$);
          var $parseOperationType$$ = $parseDirectives$$($exports$$, !0), $parseVariableDefinitions$$ = $parseFieldsDefinition$$($exports$$);
          if (0 === $parseDefinition$$.length && 0 === $parseOperationType$$.length && 0 === $parseVariableDefinitions$$.length) {
            throw $unexpected$$($exports$$);
          }
          return {kind:$_kinds$$.Kind.OBJECT_TYPE_EXTENSION, name:$parseVariable$$, interfaces:$parseDefinition$$, directives:$parseOperationType$$, fields:$parseVariableDefinitions$$, loc:$loc$$($exports$$, $require$$)};
        case "interface":
          $require$$ = $exports$$.token;
          $expectKeyword$$($exports$$, "extend");
          $expectKeyword$$($exports$$, "interface");
          $parseVariable$$ = $parseName$$($exports$$);
          $parseDefinition$$ = $parseDirectives$$($exports$$, !0);
          $parseOperationType$$ = $parseFieldsDefinition$$($exports$$);
          if (0 === $parseDefinition$$.length && 0 === $parseOperationType$$.length) {
            throw $unexpected$$($exports$$);
          }
          return {kind:$_kinds$$.Kind.INTERFACE_TYPE_EXTENSION, name:$parseVariable$$, directives:$parseDefinition$$, fields:$parseOperationType$$, loc:$loc$$($exports$$, $require$$)};
        case "union":
          $require$$ = $exports$$.token;
          $expectKeyword$$($exports$$, "extend");
          $expectKeyword$$($exports$$, "union");
          $parseVariable$$ = $parseName$$($exports$$);
          $parseDefinition$$ = $parseDirectives$$($exports$$, !0);
          $parseOperationType$$ = $parseUnionMemberTypes$$($exports$$);
          if (0 === $parseDefinition$$.length && 0 === $parseOperationType$$.length) {
            throw $unexpected$$($exports$$);
          }
          return {kind:$_kinds$$.Kind.UNION_TYPE_EXTENSION, name:$parseVariable$$, directives:$parseDefinition$$, types:$parseOperationType$$, loc:$loc$$($exports$$, $require$$)};
        case "enum":
          $require$$ = $exports$$.token;
          $expectKeyword$$($exports$$, "extend");
          $expectKeyword$$($exports$$, "enum");
          $parseVariable$$ = $parseName$$($exports$$);
          $parseDefinition$$ = $parseDirectives$$($exports$$, !0);
          $parseOperationType$$ = $parseEnumValuesDefinition$$($exports$$);
          if (0 === $parseDefinition$$.length && 0 === $parseOperationType$$.length) {
            throw $unexpected$$($exports$$);
          }
          return {kind:$_kinds$$.Kind.ENUM_TYPE_EXTENSION, name:$parseVariable$$, directives:$parseDefinition$$, values:$parseOperationType$$, loc:$loc$$($exports$$, $require$$)};
        case "input":
          $require$$ = $exports$$.token;
          $expectKeyword$$($exports$$, "extend");
          $expectKeyword$$($exports$$, "input");
          $parseVariable$$ = $parseName$$($exports$$);
          $parseDefinition$$ = $parseDirectives$$($exports$$, !0);
          $parseOperationType$$ = $parseInputFieldsDefinition$$($exports$$);
          if (0 === $parseDefinition$$.length && 0 === $parseOperationType$$.length) {
            throw $unexpected$$($exports$$);
          }
          return {kind:$_kinds$$.Kind.INPUT_OBJECT_TYPE_EXTENSION, name:$parseVariable$$, directives:$parseDefinition$$, fields:$parseOperationType$$, loc:$loc$$($exports$$, $require$$)};
      }
    }
    throw $unexpected$$($exports$$, $require$$);
  }
  function $parseDirectiveLocation$$($exports$$) {
    var $require$$ = $exports$$.token, $parseVariable$$ = $parseName$$($exports$$);
    if ($_directiveLocation$$.DirectiveLocation.hasOwnProperty($parseVariable$$.value)) {
      return $parseVariable$$;
    }
    throw $unexpected$$($exports$$, $require$$);
  }
  function $loc$$($exports$$, $require$$) {
    if (!$exports$$.options.noLocation) {
      return new $Loc$$($require$$, $exports$$.lastToken, $exports$$.source);
    }
  }
  function $Loc$$($exports$$, $require$$, $parseVariable$$) {
    this.start = $exports$$.start;
    this.end = $require$$.end;
    this.startToken = $exports$$;
    this.endToken = $require$$;
    this.source = $parseVariable$$;
  }
  function $peek$$($exports$$, $require$$) {
    return $exports$$.token.kind === $require$$;
  }
  function $skip$$($exports$$, $require$$) {
    ($require$$ = $exports$$.token.kind === $require$$) && $exports$$.advance();
    return $require$$;
  }
  function $expect$$($exports$$, $require$$) {
    var $parseVariable$$ = $exports$$.token;
    if ($parseVariable$$.kind === $require$$) {
      return $exports$$.advance(), $parseVariable$$;
    }
    throw (0, $_error$$.syntaxError)($exports$$.source, $parseVariable$$.start, "Expected " + $require$$ + ", found " + (0, $_lexer$$.getTokenDesc)($parseVariable$$));
  }
  function $expectKeyword$$($exports$$, $require$$) {
    var $parseVariable$$ = $exports$$.token;
    if ($parseVariable$$.kind === $_lexer$$.TokenKind.NAME && $parseVariable$$.value === $require$$) {
      return $exports$$.advance(), $parseVariable$$;
    }
    throw (0, $_error$$.syntaxError)($exports$$.source, $parseVariable$$.start, 'Expected "' + $require$$ + '", found ' + (0, $_lexer$$.getTokenDesc)($parseVariable$$));
  }
  function $unexpected$$($exports$$, $require$$) {
    $require$$ = $require$$ || $exports$$.token;
    return (0, $_error$$.syntaxError)($exports$$.source, $require$$.start, "Unexpected " + (0, $_lexer$$.getTokenDesc)($require$$));
  }
  function $many$$($exports$$, $require$$, $parseVariable$$, $parseDefinition$$) {
    $expect$$($exports$$, $require$$);
    for ($require$$ = [$parseVariable$$($exports$$)]; !$skip$$($exports$$, $parseDefinition$$);) {
      $require$$.push($parseVariable$$($exports$$));
    }
    return $require$$;
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.parse = function($exports$$, $require$$) {
    $exports$$ = "string" === typeof $exports$$ ? new $_source$$.Source($exports$$) : $exports$$;
    if (!($exports$$ instanceof $_source$$.Source)) {
      throw new TypeError("Must provide Source. Received: " + String($exports$$));
    }
    $require$$ = (0, $_lexer$$.createLexer)($exports$$, $require$$ || {});
    $exports$$ = $require$$.token;
    $expect$$($require$$, $_lexer$$.TokenKind.SOF);
    var $parseVariable$$ = [];
    do {
      $parseVariable$$.push($parseDefinition$$($require$$));
    } while (!$skip$$($require$$, $_lexer$$.TokenKind.EOF));
    return {kind:$_kinds$$.Kind.DOCUMENT, definitions:$parseVariable$$, loc:$loc$$($require$$, $exports$$)};
  };
  $exports$$.parseValue = function($exports$$, $require$$) {
    $exports$$ = "string" === typeof $exports$$ ? new $_source$$.Source($exports$$) : $exports$$;
    $require$$ = (0, $_lexer$$.createLexer)($exports$$, $require$$ || {});
    $expect$$($require$$, $_lexer$$.TokenKind.SOF);
    $exports$$ = $parseValueLiteral$$($require$$, !1);
    $expect$$($require$$, $_lexer$$.TokenKind.EOF);
    return $exports$$;
  };
  $exports$$.parseType = function($exports$$, $require$$) {
    $exports$$ = "string" === typeof $exports$$ ? new $_source$$.Source($exports$$) : $exports$$;
    $require$$ = (0, $_lexer$$.createLexer)($exports$$, $require$$ || {});
    $expect$$($require$$, $_lexer$$.TokenKind.SOF);
    $exports$$ = $parseTypeReference$$($require$$);
    $expect$$($require$$, $_lexer$$.TokenKind.EOF);
    return $exports$$;
  };
  $exports$$.parseConstValue = $parseConstValue$$;
  $exports$$.parseTypeReference = $parseTypeReference$$;
  $exports$$.parseNamedType = $parseNamedType$$;
  var $_source$$ = $require$$("module$node_modules$graphql$language$source"), $_error$$ = $require$$("module$node_modules$graphql$error$index"), $_lexer$$ = $require$$("module$node_modules$graphql$language$lexer"), $_kinds$$ = $require$$("module$node_modules$graphql$language$kinds"), $_directiveLocation$$ = $require$$("module$node_modules$graphql$language$directiveLocation");
  $Loc$$.prototype.toJSON = $Loc$$.prototype.inspect = function() {
    return {start:this.start, end:this.end};
  };
};
