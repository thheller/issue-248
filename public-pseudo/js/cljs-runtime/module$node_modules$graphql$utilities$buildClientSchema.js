shadow$provide.module$node_modules$graphql$utilities$buildClientSchema = function($_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $_interopRequireDefault$$($exports$$) {
    return $exports$$ && $exports$$.__esModule ? $exports$$ : {default:$exports$$};
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.buildClientSchema = function($exports$$, $require$$) {
    function $_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$($exports$$) {
      if ($exports$$.kind === $_introspection$$.TypeKind.LIST) {
        $exports$$ = $exports$$.ofType;
        if (!$exports$$) {
          throw Error("Decorated type deeper than introspection query.");
        }
        return (0, $_definition$$.GraphQLList)($_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$($exports$$));
      }
      if ($exports$$.kind === $_introspection$$.TypeKind.NON_NULL) {
        $exports$$ = $exports$$.ofType;
        if (!$exports$$) {
          throw Error("Decorated type deeper than introspection query.");
        }
        $exports$$ = $_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$($exports$$);
        return (0, $_definition$$.GraphQLNonNull)((0, $_definition$$.assertNullableType)($exports$$));
      }
      if (!$exports$$.name) {
        throw Error("Unknown type reference: " + JSON.stringify($exports$$));
      }
      return $_interopRequireDefault$$($exports$$.name);
    }
    function $_interopRequireDefault$$($exports$$) {
      if ($typeDefCache$$[$exports$$]) {
        return $typeDefCache$$[$exports$$];
      }
      var $require$$ = $typeIntrospectionMap$$[$exports$$];
      if (!$require$$) {
        throw Error("Invalid or incomplete schema, unknown type: " + $exports$$ + ". Ensure that a full introspection query is used in order to build a client schema.");
      }
      $require$$ = $module$$($require$$);
      return $typeDefCache$$[$exports$$] = $require$$;
    }
    function $introspection_types$$($exports$$) {
      $exports$$ = $_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$($exports$$);
      return (0, $_definition$$.assertObjectType)($exports$$);
    }
    function $options$$($exports$$) {
      $exports$$ = $_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$($exports$$);
      return (0, $_definition$$.assertInterfaceType)($exports$$);
    }
    function $module$$($exports$$) {
      if ($exports$$ && $exports$$.name && $exports$$.kind) {
        switch($exports$$.kind) {
          case $_introspection$$.TypeKind.SCALAR:
            return $process$$($exports$$);
          case $_introspection$$.TypeKind.OBJECT:
            return $buildObjectDef$$($exports$$);
          case $_introspection$$.TypeKind.INTERFACE:
            return $buildInterfaceDef$$($exports$$);
          case $_introspection$$.TypeKind.UNION:
            if (!$exports$$.possibleTypes) {
              throw Error("Introspection result missing possibleTypes: " + JSON.stringify($exports$$));
            }
            return new $_definition$$.GraphQLUnionType({name:$exports$$.name, description:$exports$$.description, types:$exports$$.possibleTypes.map($introspection_types$$)});
          case $_introspection$$.TypeKind.ENUM:
            return $buildEnumDef$$($exports$$);
          case $_introspection$$.TypeKind.INPUT_OBJECT:
            return $buildInputObjectDef$$($exports$$);
        }
      }
      throw Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema:" + JSON.stringify($exports$$));
    }
    function $process$$($exports$$) {
      return new $_definition$$.GraphQLScalarType({name:$exports$$.name, description:$exports$$.description, serialize:function($exports$$) {
        return $exports$$;
      }});
    }
    function $buildObjectDef$$($exports$$) {
      if (!$exports$$.interfaces) {
        throw Error("Introspection result missing interfaces: " + JSON.stringify($exports$$));
      }
      return new $_definition$$.GraphQLObjectType({name:$exports$$.name, description:$exports$$.description, interfaces:$exports$$.interfaces.map($options$$), fields:function() {
        return $buildFieldDefMap$$($exports$$);
      }});
    }
    function $buildInterfaceDef$$($exports$$) {
      return new $_definition$$.GraphQLInterfaceType({name:$exports$$.name, description:$exports$$.description, fields:function() {
        return $buildFieldDefMap$$($exports$$);
      }});
    }
    function $buildEnumDef$$($exports$$) {
      if (!$exports$$.enumValues) {
        throw Error("Introspection result missing enumValues: " + JSON.stringify($exports$$));
      }
      return new $_definition$$.GraphQLEnumType({name:$exports$$.name, description:$exports$$.description, values:(0, $_keyValMap2$$.default)($exports$$.enumValues, function($exports$$) {
        return $exports$$.name;
      }, function($exports$$) {
        return {description:$exports$$.description, deprecationReason:$exports$$.deprecationReason};
      })});
    }
    function $buildInputObjectDef$$($exports$$) {
      if (!$exports$$.inputFields) {
        throw Error("Introspection result missing inputFields: " + JSON.stringify($exports$$));
      }
      return new $_definition$$.GraphQLInputObjectType({name:$exports$$.name, description:$exports$$.description, fields:function() {
        return $buildInputValueDefMap$$($exports$$.inputFields);
      }});
    }
    function $buildFieldDefMap$$($exports$$) {
      if (!$exports$$.fields) {
        throw Error("Introspection result missing fields: " + JSON.stringify($exports$$));
      }
      return (0, $_keyValMap2$$.default)($exports$$.fields, function($exports$$) {
        return $exports$$.name;
      }, function($exports$$) {
        if (!$exports$$.args) {
          throw Error("Introspection result missing field args: " + JSON.stringify($exports$$));
        }
        var $require$$ = $exports$$.description, $_directiveLocation$$ = $exports$$.deprecationReason, $_valueFromAST$$ = $_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$($exports$$.type);
        (0, $_definition$$.isOutputType)($_valueFromAST$$) ? void 0 : (0, $_invariant2$$.default)(0, "Introspection must provide output type for fields.");
        return {description:$require$$, deprecationReason:$_directiveLocation$$, type:$_valueFromAST$$, args:$buildInputValueDefMap$$($exports$$.args)};
      });
    }
    function $buildInputValueDefMap$$($exports$$) {
      return (0, $_keyValMap2$$.default)($exports$$, function($exports$$) {
        return $exports$$.name;
      }, $buildInputValue$$);
    }
    function $buildInputValue$$($exports$$) {
      var $require$$ = $_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$($exports$$.type);
      (0, $_definition$$.isInputType)($require$$) ? void 0 : (0, $_invariant2$$.default)(0, "Introspection must provide input type for arguments.");
      var $_directiveLocation$$ = $exports$$.defaultValue ? (0, $_valueFromAST$$.valueFromAST)((0, $_parser$$.parseValue)($exports$$.defaultValue), $require$$) : void 0;
      return {name:$exports$$.name, description:$exports$$.description, type:$require$$, defaultValue:$_directiveLocation$$};
    }
    function $buildDirective$$($exports$$) {
      var $require$$ = $exports$$.locations ? $exports$$.locations.slice() : [].concat($exports$$.onField ? [$_directiveLocation$$.DirectiveLocation.FIELD] : [], $exports$$.onOperation ? [$_directiveLocation$$.DirectiveLocation.QUERY, $_directiveLocation$$.DirectiveLocation.MUTATION, $_directiveLocation$$.DirectiveLocation.SUBSCRIPTION] : [], $exports$$.onFragment ? [$_directiveLocation$$.DirectiveLocation.FRAGMENT_DEFINITION, $_directiveLocation$$.DirectiveLocation.FRAGMENT_SPREAD, $_directiveLocation$$.DirectiveLocation.INLINE_FRAGMENT] : 
      []);
      if (!$exports$$.args) {
        throw Error("Introspection result missing directive args: " + JSON.stringify($exports$$));
      }
      return new $_directives$$.GraphQLDirective({name:$exports$$.name, description:$exports$$.description, locations:$require$$, args:$buildInputValueDefMap$$($exports$$.args)});
    }
    var $directives$$ = $exports$$.__schema, $typeIntrospectionMap$$ = (0, $_keyMap2$$.default)($directives$$.types, function($exports$$) {
      return $exports$$.name;
    }), $typeDefCache$$ = (0, $_keyMap2$$.default)($_scalars$$.specifiedScalarTypes.concat($_introspection$$.introspectionTypes), function($exports$$) {
      return $exports$$.name;
    });
    $exports$$ = $directives$$.types.map(function($exports$$) {
      return $_interopRequireDefault$$($exports$$.name);
    });
    var $queryType$$ = $directives$$.queryType ? $introspection_types$$($directives$$.queryType) : null, $mutationType$$ = $directives$$.mutationType ? $introspection_types$$($directives$$.mutationType) : null, $subscriptionType$$ = $directives$$.subscriptionType ? $introspection_types$$($directives$$.subscriptionType) : null;
    $directives$$ = $directives$$.directives ? $directives$$.directives.map($buildDirective$$) : [];
    return new $_schema$$.GraphQLSchema({query:$queryType$$, mutation:$mutationType$$, subscription:$subscriptionType$$, types:$exports$$, directives:$directives$$, assumeValid:$require$$ && $require$$.assumeValid, allowedLegacyNames:$require$$ && $require$$.allowedLegacyNames});
  };
  $_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$ = $require$$("module$node_modules$graphql$jsutils$invariant");
  var $_invariant2$$ = $_interopRequireDefault$$($_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$);
  $_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$ = $require$$("module$node_modules$graphql$jsutils$keyMap");
  var $_keyMap2$$ = $_interopRequireDefault$$($_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$);
  $_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$ = $require$$("module$node_modules$graphql$jsutils$keyValMap");
  var $_keyValMap2$$ = $_interopRequireDefault$$($_invariant$jscomp$10__keyMap$jscomp$4__keyValMap$jscomp$1_global$$), $_valueFromAST$$ = $require$$("module$node_modules$graphql$utilities$valueFromAST"), $_parser$$ = $require$$("module$node_modules$graphql$language$parser"), $_schema$$ = $require$$("module$node_modules$graphql$type$schema"), $_directiveLocation$$ = $require$$("module$node_modules$graphql$language$directiveLocation"), $_definition$$ = $require$$("module$node_modules$graphql$type$definition"), 
  $_directives$$ = $require$$("module$node_modules$graphql$type$directives"), $_introspection$$ = $require$$("module$node_modules$graphql$type$introspection"), $_scalars$$ = $require$$("module$node_modules$graphql$type$scalars");
};
