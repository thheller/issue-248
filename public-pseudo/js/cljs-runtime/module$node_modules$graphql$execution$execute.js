shadow$provide.module$node_modules$graphql$execution$execute = function($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $_promiseForObject__promiseReduce_process$$, $require$$, $module$$, $exports$$) {
  function $_interopRequireDefault$$($exports$$) {
    return $exports$$ && $exports$$.__esModule ? $exports$$ : {default:$exports$$};
  }
  function $executeImpl$$($exports$$, $require$$, $executeImpl$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $_interopRequireDefault$$, $responsePathAsArray$$) {
    $assertValidExecutionArguments$$($exports$$, $require$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
    $exports$$ = $buildExecutionContext$$($exports$$, $require$$, $executeImpl$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $_interopRequireDefault$$, $responsePathAsArray$$);
    if (Array.isArray($exports$$)) {
      return {errors:$exports$$};
    }
    $executeImpl$$ = $executeOperation$$($exports$$, $exports$$.operation, $executeImpl$$);
    return $buildResponse$$($exports$$, $executeImpl$$);
  }
  function $buildResponse$$($exports$$, $require$$) {
    return (0, $_isPromise2$$.default)($require$$) ? $require$$.then(function($require$$) {
      return $buildResponse$$($exports$$, $require$$);
    }) : 0 === $exports$$.errors.length ? {data:$require$$} : {errors:$exports$$.errors, data:$require$$};
  }
  function $responsePathAsArray$$($exports$$) {
    for (var $require$$ = []; $exports$$;) {
      $require$$.push($exports$$.key), $exports$$ = $exports$$.prev;
    }
    return $require$$.reverse();
  }
  function $addPath$$($exports$$, $require$$) {
    return {prev:$exports$$, key:$require$$};
  }
  function $assertValidExecutionArguments$$($exports$$, $require$$, $executeImpl$$) {
    $require$$ ? void 0 : (0, $_invariant2$$.default)(0, "Must provide document");
    (0, $_validate$$.assertValidSchema)($exports$$);
    $executeImpl$$ && "object" !== ("undefined" === typeof $executeImpl$$ ? "undefined" : $_typeof$$($executeImpl$$)) ? (0, $_invariant2$$.default)(0, "Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.") : void 0;
  }
  function $buildExecutionContext$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $_interopRequireDefault$$) {
    for (var $assertValidExecutionArguments$$ = [], $buildResponse$$ = void 0, $responsePathAsArray$$ = !1, $completeListValue$$ = Object.create(null), $completeValue$$ = 0; $completeValue$$ < $require$$.definitions.length; $completeValue$$++) {
      var $schema$$ = $require$$.definitions[$completeValue$$];
      switch($schema$$.kind) {
        case $_kinds$$.Kind.OPERATION_DEFINITION:
          if (!$_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ && $buildResponse$$) {
            $responsePathAsArray$$ = !0;
          } else {
            if (!$_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ || $schema$$.name && $schema$$.name.value === $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
              $buildResponse$$ = $schema$$;
            }
          }
          break;
        case $_kinds$$.Kind.FRAGMENT_DEFINITION:
          $completeListValue$$[$schema$$.name.value] = $schema$$;
      }
    }
    $buildResponse$$ ? $responsePathAsArray$$ && $assertValidExecutionArguments$$.push(new $_error$$.GraphQLError("Must provide operation name if query contains multiple operations.")) : $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ ? $assertValidExecutionArguments$$.push(new $_error$$.GraphQLError('Unknown operation named "' + $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ + 
    '".')) : $assertValidExecutionArguments$$.push(new $_error$$.GraphQLError("Must provide an operation."));
    $require$$ = void 0;
    $buildResponse$$ && ($addPath$$ = (0, $_values$$.getVariableValues)($exports$$, $buildResponse$$.variableDefinitions || [], $addPath$$ || {}), $addPath$$.errors ? $assertValidExecutionArguments$$.push.apply($assertValidExecutionArguments$$, $addPath$$.errors) : $require$$ = $addPath$$.coerced);
    if (0 !== $assertValidExecutionArguments$$.length) {
      return $assertValidExecutionArguments$$;
    }
    $buildResponse$$ ? void 0 : (0, $_invariant2$$.default)(0, "Has operation if no errors.");
    $require$$ ? void 0 : (0, $_invariant2$$.default)(0, "Has variables if no errors.");
    return {schema:$exports$$, fragments:$completeListValue$$, rootValue:$executeImpl$$, contextValue:$executeOperation$$, operation:$buildResponse$$, variableValues:$require$$, fieldResolver:$_interopRequireDefault$$ || $defaultFieldResolver$$, errors:$assertValidExecutionArguments$$};
  }
  function $executeOperation$$($exports$$, $require$$, $executeImpl$$) {
    var $executeOperation$$ = $getOperationRootType$$($exports$$.schema, $require$$), $addPath$$ = $collectFields$$($exports$$, $executeOperation$$, $require$$.selectionSet, Object.create(null), Object.create(null));
    try {
      var $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = "mutation" === $require$$.operation ? $executeFieldsSerially$$($exports$$, $executeOperation$$, $executeImpl$$, void 0, $addPath$$) : $executeFields$$($exports$$, $executeOperation$$, $executeImpl$$, void 0, $addPath$$);
      return (0, $_isPromise2$$.default)($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) ? $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$.then(void 0, function($require$$) {
        $exports$$.errors.push($require$$);
        return Promise.resolve(null);
      }) : $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$;
    } catch ($error$$) {
      return $exports$$.errors.push($error$$), null;
    }
  }
  function $getOperationRootType$$($exports$$, $require$$) {
    switch($require$$.operation) {
      case "query":
        $exports$$ = $exports$$.getQueryType();
        if (!$exports$$) {
          throw new $_error$$.GraphQLError("Schema does not define the required query root type.", [$require$$]);
        }
        return $exports$$;
      case "mutation":
        $exports$$ = $exports$$.getMutationType();
        if (!$exports$$) {
          throw new $_error$$.GraphQLError("Schema is not configured for mutations.", [$require$$]);
        }
        return $exports$$;
      case "subscription":
        $exports$$ = $exports$$.getSubscriptionType();
        if (!$exports$$) {
          throw new $_error$$.GraphQLError("Schema is not configured for subscriptions.", [$require$$]);
        }
        return $exports$$;
      default:
        throw new $_error$$.GraphQLError("Can only execute queries, mutations and subscriptions.", [$require$$]);
    }
  }
  function $executeFieldsSerially$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
    return (0, $_promiseReduce2$$.default)(Object.keys($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$), function($assertValidExecutionArguments$$, $_interopRequireDefault$$) {
      var $buildResponse$$ = $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$[$_interopRequireDefault$$], $responsePathAsArray$$ = $addPath$$($executeOperation$$, $_interopRequireDefault$$);
      $buildResponse$$ = $resolveField$$($exports$$, $require$$, $executeImpl$$, $buildResponse$$, $responsePathAsArray$$);
      if (void 0 === $buildResponse$$) {
        return $assertValidExecutionArguments$$;
      }
      if ((0, $_isPromise2$$.default)($buildResponse$$)) {
        return $buildResponse$$.then(function($exports$$) {
          $assertValidExecutionArguments$$[$_interopRequireDefault$$] = $exports$$;
          return $assertValidExecutionArguments$$;
        });
      }
      $assertValidExecutionArguments$$[$_interopRequireDefault$$] = $buildResponse$$;
      return $assertValidExecutionArguments$$;
    }, Object.create(null));
  }
  function $executeFields$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
    var $assertValidExecutionArguments$$ = !1, $_interopRequireDefault$$ = Object.keys($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$).reduce(function($_interopRequireDefault$$, $buildResponse$$) {
      var $responsePathAsArray$$ = $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$[$buildResponse$$], $completeListValue$$ = $addPath$$($executeOperation$$, $buildResponse$$);
      $responsePathAsArray$$ = $resolveField$$($exports$$, $require$$, $executeImpl$$, $responsePathAsArray$$, $completeListValue$$);
      if (void 0 === $responsePathAsArray$$) {
        return $_interopRequireDefault$$;
      }
      $_interopRequireDefault$$[$buildResponse$$] = $responsePathAsArray$$;
      !$assertValidExecutionArguments$$ && (0, $_isPromise2$$.default)($responsePathAsArray$$) && ($assertValidExecutionArguments$$ = !0);
      return $_interopRequireDefault$$;
    }, Object.create(null));
    return $assertValidExecutionArguments$$ ? (0, $_promiseForObject2$$.default)($_interopRequireDefault$$) : $_interopRequireDefault$$;
  }
  function $collectFields$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$) {
    for (var $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = 0; $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ < $executeImpl$$.selections.length; $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$++) {
      var $assertValidExecutionArguments$$ = $executeImpl$$.selections[$_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$];
      switch($assertValidExecutionArguments$$.kind) {
        case $_kinds$$.Kind.FIELD:
          if (!$shouldIncludeNode$$($exports$$, $assertValidExecutionArguments$$)) {
            continue;
          }
          var $_interopRequireDefault$$ = $assertValidExecutionArguments$$.alias ? $assertValidExecutionArguments$$.alias.value : $assertValidExecutionArguments$$.name.value;
          $executeOperation$$[$_interopRequireDefault$$] || ($executeOperation$$[$_interopRequireDefault$$] = []);
          $executeOperation$$[$_interopRequireDefault$$].push($assertValidExecutionArguments$$);
          break;
        case $_kinds$$.Kind.INLINE_FRAGMENT:
          if (!$shouldIncludeNode$$($exports$$, $assertValidExecutionArguments$$) || !$doesFragmentConditionMatch$$($exports$$, $assertValidExecutionArguments$$, $require$$)) {
            continue;
          }
          $collectFields$$($exports$$, $require$$, $assertValidExecutionArguments$$.selectionSet, $executeOperation$$, $addPath$$);
          break;
        case $_kinds$$.Kind.FRAGMENT_SPREAD:
          $_interopRequireDefault$$ = $assertValidExecutionArguments$$.name.value, !$addPath$$[$_interopRequireDefault$$] && $shouldIncludeNode$$($exports$$, $assertValidExecutionArguments$$) && ($addPath$$[$_interopRequireDefault$$] = !0, ($assertValidExecutionArguments$$ = $exports$$.fragments[$_interopRequireDefault$$]) && $doesFragmentConditionMatch$$($exports$$, $assertValidExecutionArguments$$, $require$$) && $collectFields$$($exports$$, $require$$, $assertValidExecutionArguments$$.selectionSet, 
          $executeOperation$$, $addPath$$));
      }
    }
    return $executeOperation$$;
  }
  function $shouldIncludeNode$$($exports$$, $require$$) {
    var $executeImpl$$ = (0, $_values$$.getDirectiveValues)($_directives$$.GraphQLSkipDirective, $require$$, $exports$$.variableValues);
    return $executeImpl$$ && !0 === $executeImpl$$.if ? !1 : ($exports$$ = (0, $_values$$.getDirectiveValues)($_directives$$.GraphQLIncludeDirective, $require$$, $exports$$.variableValues)) && !1 === $exports$$.if ? !1 : !0;
  }
  function $doesFragmentConditionMatch$$($exports$$, $require$$, $executeImpl$$) {
    $require$$ = $require$$.typeCondition;
    if (!$require$$) {
      return !0;
    }
    $require$$ = (0, $_typeFromAST$$.typeFromAST)($exports$$.schema, $require$$);
    return $require$$ === $executeImpl$$ ? !0 : (0, $_definition$$.isAbstractType)($require$$) ? $exports$$.schema.isPossibleType($require$$, $executeImpl$$) : !1;
  }
  function $resolveField$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$) {
    var $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = $getFieldDef$$($exports$$.schema, $require$$, $executeOperation$$[0].name.value);
    if ($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
      var $assertValidExecutionArguments$$ = $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$.resolve || $exports$$.fieldResolver;
      $require$$ = $buildResolveInfo$$($exports$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $executeOperation$$, $require$$, $addPath$$);
      $executeImpl$$ = $resolveFieldValueOrError$$($exports$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $executeOperation$$, $assertValidExecutionArguments$$, $executeImpl$$, $require$$);
      return $completeValueCatchingError$$($exports$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$.type, $executeOperation$$, $require$$, $addPath$$, $executeImpl$$);
    }
  }
  function $buildResolveInfo$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$) {
    return {fieldName:$executeImpl$$[0].name.value, fieldNodes:$executeImpl$$, returnType:$require$$.type, parentType:$executeOperation$$, path:$addPath$$, schema:$exports$$.schema, fragments:$exports$$.fragments, rootValue:$exports$$.rootValue, operation:$exports$$.operation, variableValues:$exports$$.variableValues};
  }
  function $resolveFieldValueOrError$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
    try {
      var $assertValidExecutionArguments$$ = (0, $_values$$.getArgumentValues)($require$$, $executeImpl$$[0], $exports$$.variableValues), $_interopRequireDefault$$ = $executeOperation$$($addPath$$, $assertValidExecutionArguments$$, $exports$$.contextValue, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
      return (0, $_isPromise2$$.default)($_interopRequireDefault$$) ? $_interopRequireDefault$$.then(void 0, $asErrorInstance$$) : $_interopRequireDefault$$;
    } catch ($error$$) {
      return $asErrorInstance$$($error$$);
    }
  }
  function $asErrorInstance$$($exports$$) {
    return $exports$$ instanceof Error ? $exports$$ : Error($exports$$ || void 0);
  }
  function $completeValueCatchingError$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
    if ((0, $_definition$$.isNonNullType)($require$$)) {
      return $completeValueWithLocatedError$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
    }
    try {
      var $assertValidExecutionArguments$$ = $completeValueWithLocatedError$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
      return (0, $_isPromise2$$.default)($assertValidExecutionArguments$$) ? $assertValidExecutionArguments$$.then(void 0, function($require$$) {
        $exports$$.errors.push($require$$);
        return Promise.resolve(null);
      }) : $assertValidExecutionArguments$$;
    } catch ($error$$) {
      return $exports$$.errors.push($error$$), null;
    }
  }
  function $completeValueWithLocatedError$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
    try {
      var $assertValidExecutionArguments$$ = $completeValue$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
      return (0, $_isPromise2$$.default)($assertValidExecutionArguments$$) ? $assertValidExecutionArguments$$.then(void 0, function($exports$$) {
        return Promise.reject((0, $_error$$.locatedError)($asErrorInstance$$($exports$$), $executeImpl$$, $responsePathAsArray$$($addPath$$)));
      }) : $assertValidExecutionArguments$$;
    } catch ($error$$) {
      throw (0, $_error$$.locatedError)($asErrorInstance$$($error$$), $executeImpl$$, $responsePathAsArray$$($addPath$$));
    }
  }
  function $completeValue$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
    if ((0, $_isPromise2$$.default)($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$)) {
      return $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$.then(function($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
        return $completeValue$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
      });
    }
    if ($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ instanceof Error) {
      throw $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$;
    }
    if ((0, $_definition$$.isNonNullType)($require$$)) {
      $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = $completeValue$$($exports$$, $require$$.ofType, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
      if (null === $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
        throw Error("Cannot return null for non-nullable field " + $executeOperation$$.parentType.name + "." + $executeOperation$$.fieldName + ".");
      }
      return $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$;
    }
    if ((0, $_isNullish2$$.default)($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$)) {
      return null;
    }
    if ((0, $_definition$$.isListType)($require$$)) {
      return $completeListValue$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
    }
    if ((0, $_definition$$.isLeafType)($require$$)) {
      return $completeLeafValue$$($require$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
    }
    if ((0, $_definition$$.isAbstractType)($require$$)) {
      return $completeAbstractValue$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
    }
    if ((0, $_definition$$.isObjectType)($require$$)) {
      return $completeObjectValue$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
    }
    throw Error('Cannot complete value of unexpected type "' + String($require$$) + '".');
  }
  function $completeListValue$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $assertValidExecutionArguments$$) {
    (0, $_iterall$$.isCollection)($assertValidExecutionArguments$$) ? void 0 : (0, $_invariant2$$.default)(0, "Expected Iterable, but did not find one for field " + $executeOperation$$.parentType.name + "." + $executeOperation$$.fieldName + ".");
    var $_interopRequireDefault$$ = $require$$.ofType, $buildResponse$$ = !1, $responsePathAsArray$$ = [];
    (0, $_iterall$$.forEach)($assertValidExecutionArguments$$, function($require$$, $assertValidExecutionArguments$$) {
      $assertValidExecutionArguments$$ = $addPath$$($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $assertValidExecutionArguments$$);
      $require$$ = $completeValueCatchingError$$($exports$$, $_interopRequireDefault$$, $executeImpl$$, $executeOperation$$, $assertValidExecutionArguments$$, $require$$);
      !$buildResponse$$ && (0, $_isPromise2$$.default)($require$$) && ($buildResponse$$ = !0);
      $responsePathAsArray$$.push($require$$);
    });
    return $buildResponse$$ ? Promise.all($responsePathAsArray$$) : $responsePathAsArray$$;
  }
  function $completeLeafValue$$($exports$$, $require$$) {
    $exports$$.serialize ? void 0 : (0, $_invariant2$$.default)(0, "Missing serialize method on type");
    var $executeImpl$$ = $exports$$.serialize($require$$);
    if ((0, $_isInvalid2$$.default)($executeImpl$$)) {
      throw Error('Expected a value of type "' + String($exports$$) + '" but ' + ("received: " + String($require$$)));
    }
    return $executeImpl$$;
  }
  function $completeAbstractValue$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
    var $assertValidExecutionArguments$$ = $require$$.resolveType ? $require$$.resolveType($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $exports$$.contextValue, $executeOperation$$) : $defaultResolveTypeFn$$($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $exports$$.contextValue, $executeOperation$$, $require$$);
    return (0, $_isPromise2$$.default)($assertValidExecutionArguments$$) ? $assertValidExecutionArguments$$.then(function($assertValidExecutionArguments$$) {
      return $completeObjectValue$$($exports$$, $ensureValidRuntimeType$$($assertValidExecutionArguments$$, $exports$$, $require$$, $executeImpl$$, $executeOperation$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$), $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
    }) : $completeObjectValue$$($exports$$, $ensureValidRuntimeType$$($assertValidExecutionArguments$$, $exports$$, $require$$, $executeImpl$$, $executeOperation$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$), $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
  }
  function $ensureValidRuntimeType$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
    $exports$$ = "string" === typeof $exports$$ ? $require$$.schema.getType($exports$$) : $exports$$;
    if (!(0, $_definition$$.isObjectType)($exports$$)) {
      throw new $_error$$.GraphQLError("Abstract type " + $executeImpl$$.name + " must resolve to an Object type at " + ("runtime for field " + $addPath$$.parentType.name + "." + $addPath$$.fieldName + " with ") + ('value "' + String($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) + '", received "' + String($exports$$) + '". ') + ("Either the " + $executeImpl$$.name + ' type should provide a "resolveType" ') + 'function or each possible types should provide an "isTypeOf" function.', 
      $executeOperation$$);
    }
    if (!$require$$.schema.isPossibleType($executeImpl$$, $exports$$)) {
      throw new $_error$$.GraphQLError('Runtime Object type "' + $exports$$.name + '" is not a possible type ' + ('for "' + $executeImpl$$.name + '".'), $executeOperation$$);
    }
    return $exports$$;
  }
  function $completeObjectValue$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
    if ($require$$.isTypeOf) {
      var $assertValidExecutionArguments$$ = $require$$.isTypeOf($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $exports$$.contextValue, $executeOperation$$);
      if ((0, $_isPromise2$$.default)($assertValidExecutionArguments$$)) {
        return $assertValidExecutionArguments$$.then(function($assertValidExecutionArguments$$) {
          if (!$assertValidExecutionArguments$$) {
            throw $invalidReturnTypeError$$($require$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $executeImpl$$);
          }
          return $collectAndExecuteSubfields$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
        });
      }
      if (!$assertValidExecutionArguments$$) {
        throw $invalidReturnTypeError$$($require$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $executeImpl$$);
      }
    }
    return $collectAndExecuteSubfields$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
  }
  function $invalidReturnTypeError$$($exports$$, $require$$, $executeImpl$$) {
    return new $_error$$.GraphQLError('Expected value of type "' + $exports$$.name + '" but got: ' + String($require$$) + ".", $executeImpl$$);
  }
  function $collectAndExecuteSubfields$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$) {
    $executeImpl$$ = $collectSubfields$$($exports$$, $require$$, $executeImpl$$);
    return $executeFields$$($exports$$, $require$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $addPath$$, $executeImpl$$);
  }
  function $defaultResolveTypeFn$$($exports$$, $require$$, $executeImpl$$, $executeOperation$$) {
    if (null !== $exports$$ && "object" === ("undefined" === typeof $exports$$ ? "undefined" : $_typeof$$($exports$$)) && "string" === typeof $exports$$.__typename) {
      return $exports$$.__typename;
    }
    var $addPath$$ = $executeImpl$$.schema.getPossibleTypes($executeOperation$$);
    $executeOperation$$ = [];
    for (var $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = 0; $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ < $addPath$$.length; $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$++) {
      var $assertValidExecutionArguments$$ = $addPath$$[$_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$];
      if ($assertValidExecutionArguments$$.isTypeOf) {
        var $_interopRequireDefault$$ = $assertValidExecutionArguments$$.isTypeOf($exports$$, $require$$, $executeImpl$$);
        if ((0, $_isPromise2$$.default)($_interopRequireDefault$$)) {
          $executeOperation$$[$_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$] = $_interopRequireDefault$$;
        } else {
          if ($_interopRequireDefault$$) {
            return $assertValidExecutionArguments$$;
          }
        }
      }
    }
    if ($executeOperation$$.length) {
      return Promise.all($executeOperation$$).then(function($exports$$) {
        for (var $require$$ = 0; $require$$ < $exports$$.length; $require$$++) {
          if ($exports$$[$require$$]) {
            return $addPath$$[$require$$];
          }
        }
      });
    }
  }
  function $getFieldDef$$($exports$$, $require$$, $executeImpl$$) {
    return $executeImpl$$ === $_introspection$$.SchemaMetaFieldDef.name && $exports$$.getQueryType() === $require$$ ? $_introspection$$.SchemaMetaFieldDef : $executeImpl$$ === $_introspection$$.TypeMetaFieldDef.name && $exports$$.getQueryType() === $require$$ ? $_introspection$$.TypeMetaFieldDef : $executeImpl$$ === $_introspection$$.TypeNameMetaFieldDef.name ? $_introspection$$.TypeNameMetaFieldDef : $require$$.getFields()[$executeImpl$$];
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.defaultFieldResolver = void 0;
  var $_typeof$$ = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function($exports$$) {
    return typeof $exports$$;
  } : function($exports$$) {
    return $exports$$ && "function" === typeof Symbol && $exports$$.constructor === Symbol && $exports$$ !== Symbol.prototype ? "symbol" : typeof $exports$$;
  };
  $exports$$.execute = function($exports$$, $require$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $assertValidExecutionArguments$$, $_interopRequireDefault$$) {
    return 1 === arguments.length ? $executeImpl$$($exports$$.schema, $exports$$.document, $exports$$.rootValue, $exports$$.contextValue, $exports$$.variableValues, $exports$$.operationName, $exports$$.fieldResolver) : $executeImpl$$($exports$$, $require$$, $executeOperation$$, $addPath$$, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$, $assertValidExecutionArguments$$, $_interopRequireDefault$$);
  };
  $exports$$.responsePathAsArray = $responsePathAsArray$$;
  $exports$$.addPath = $addPath$$;
  $exports$$.assertValidExecutionArguments = $assertValidExecutionArguments$$;
  $exports$$.buildExecutionContext = $buildExecutionContext$$;
  $exports$$.getOperationRootType = $getOperationRootType$$;
  $exports$$.collectFields = $collectFields$$;
  $exports$$.buildResolveInfo = $buildResolveInfo$$;
  $exports$$.resolveFieldValueOrError = $resolveFieldValueOrError$$;
  $exports$$.getFieldDef = $getFieldDef$$;
  var $_iterall$$ = $require$$("module$node_modules$iterall$index"), $_error$$ = $require$$("module$node_modules$graphql$error$index");
  $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = $require$$("module$node_modules$graphql$jsutils$invariant");
  var $_invariant2$$ = $_interopRequireDefault$$($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
  $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = $require$$("module$node_modules$graphql$jsutils$isInvalid");
  var $_isInvalid2$$ = $_interopRequireDefault$$($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
  $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = $require$$("module$node_modules$graphql$jsutils$isNullish");
  var $_isNullish2$$ = $_interopRequireDefault$$($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
  $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = $require$$("module$node_modules$graphql$jsutils$isPromise");
  var $_isPromise2$$ = $_interopRequireDefault$$($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
  $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = $require$$("module$node_modules$graphql$jsutils$memoize3");
  $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = $_interopRequireDefault$$($_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$);
  $_promiseForObject__promiseReduce_process$$ = $require$$("module$node_modules$graphql$jsutils$promiseForObject");
  var $_promiseForObject2$$ = $_interopRequireDefault$$($_promiseForObject__promiseReduce_process$$);
  $_promiseForObject__promiseReduce_process$$ = $require$$("module$node_modules$graphql$jsutils$promiseReduce");
  var $_promiseReduce2$$ = $_interopRequireDefault$$($_promiseForObject__promiseReduce_process$$), $_typeFromAST$$ = $require$$("module$node_modules$graphql$utilities$typeFromAST"), $_kinds$$ = $require$$("module$node_modules$graphql$language$kinds"), $_values$$ = $require$$("module$node_modules$graphql$execution$values"), $_definition$$ = $require$$("module$node_modules$graphql$type$definition");
  $require$$("module$node_modules$graphql$type$schema");
  var $_introspection$$ = $require$$("module$node_modules$graphql$type$introspection"), $_directives$$ = $require$$("module$node_modules$graphql$type$directives"), $_validate$$ = $require$$("module$node_modules$graphql$type$validate"), $collectSubfields$$ = (0, $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$.default)(function($exports$$, $require$$, $executeImpl$$) {
    for (var $executeOperation$$ = Object.create(null), $addPath$$ = Object.create(null), $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ = 0; $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$ < $executeImpl$$.length; $_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$++) {
      var $assertValidExecutionArguments$$ = $executeImpl$$[$_invariant$jscomp$8__isInvalid$jscomp$8__isNullish$jscomp$2__isPromise$jscomp$1__memoize__memoize2_global$$].selectionSet;
      $assertValidExecutionArguments$$ && ($executeOperation$$ = $collectFields$$($exports$$, $require$$, $assertValidExecutionArguments$$, $executeOperation$$, $addPath$$));
    }
    return $executeOperation$$;
  }), $defaultFieldResolver$$ = $exports$$.defaultFieldResolver = function($exports$$, $require$$, $executeImpl$$, $executeOperation$$) {
    if ("object" === ("undefined" === typeof $exports$$ ? "undefined" : $_typeof$$($exports$$)) || "function" === typeof $exports$$) {
      var $addPath$$ = $exports$$[$executeOperation$$.fieldName];
      return "function" === typeof $addPath$$ ? $exports$$[$executeOperation$$.fieldName]($require$$, $executeImpl$$, $executeOperation$$) : $addPath$$;
    }
  };
};
