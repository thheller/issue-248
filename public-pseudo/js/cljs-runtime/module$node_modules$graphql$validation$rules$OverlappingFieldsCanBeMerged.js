shadow$provide.module$node_modules$graphql$validation$rules$OverlappingFieldsCanBeMerged = function($_find$jscomp$4_global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $fieldsConflictMessage$$($exports$$, $require$$) {
    return 'Fields "' + $exports$$ + '" conflict because ' + $reasonMessage$$($require$$) + ". Use different aliases on the fields to fetch both if this was intentional.";
  }
  function $reasonMessage$$($exports$$) {
    return Array.isArray($exports$$) ? $exports$$.map(function($exports$$) {
      return 'subfields "' + $exports$$[0] + '" conflict because ' + $reasonMessage$$($exports$$[1]);
    }).join(" and ") : $exports$$;
  }
  function $findConflictsWithinSelectionSet$$($exports$$, $require$$, $reasonMessage$$, $findConflict$$, $_find$jscomp$4_global$$) {
    var $fieldsConflictMessage$$ = [];
    $_find$jscomp$4_global$$ = $getFieldsAndFragmentNames$$($exports$$, $require$$, $findConflict$$, $_find$jscomp$4_global$$);
    $findConflict$$ = $_find$jscomp$4_global$$[0];
    $_find$jscomp$4_global$$ = $_find$jscomp$4_global$$[1];
    $collectConflictsWithin$$($exports$$, $fieldsConflictMessage$$, $require$$, $reasonMessage$$, $findConflict$$);
    if (0 !== $_find$jscomp$4_global$$.length) {
      for (var $findConflictsWithinSelectionSet$$ = Object.create(null), $cachedFieldsAndFragmentNames$$ = 0; $cachedFieldsAndFragmentNames$$ < $_find$jscomp$4_global$$.length; $cachedFieldsAndFragmentNames$$++) {
        $collectConflictsBetweenFieldsAndFragment$$($exports$$, $fieldsConflictMessage$$, $require$$, $findConflictsWithinSelectionSet$$, $reasonMessage$$, !1, $findConflict$$, $_find$jscomp$4_global$$[$cachedFieldsAndFragmentNames$$]);
        for (var $collectConflictsBetween$$ = $cachedFieldsAndFragmentNames$$ + 1; $collectConflictsBetween$$ < $_find$jscomp$4_global$$.length; $collectConflictsBetween$$++) {
          $collectConflictsBetweenFragments$$($exports$$, $fieldsConflictMessage$$, $require$$, $reasonMessage$$, !1, $_find$jscomp$4_global$$[$cachedFieldsAndFragmentNames$$], $_find$jscomp$4_global$$[$collectConflictsBetween$$]);
        }
      }
    }
    return $fieldsConflictMessage$$;
  }
  function $collectConflictsBetweenFieldsAndFragment$$($exports$$, $require$$, $reasonMessage$$, $findConflict$$, $collectConflictsBetweenFragments$$, $_find$jscomp$4_global$$, $collectConflictsWithin$$, $fieldsConflictMessage$$) {
    if (!$findConflict$$[$fieldsConflictMessage$$] && ($findConflict$$[$fieldsConflictMessage$$] = !0, $fieldsConflictMessage$$ = $exports$$.getFragment($fieldsConflictMessage$$))) {
      var $findConflictsWithinSelectionSet$$ = $getReferencedFieldsAndFragmentNames$$($exports$$, $reasonMessage$$, $fieldsConflictMessage$$);
      $fieldsConflictMessage$$ = $findConflictsWithinSelectionSet$$[0];
      $findConflictsWithinSelectionSet$$ = $findConflictsWithinSelectionSet$$[1];
      if ($collectConflictsWithin$$ !== $fieldsConflictMessage$$) {
        for ($collectConflictsBetween$$($exports$$, $require$$, $reasonMessage$$, $collectConflictsBetweenFragments$$, $_find$jscomp$4_global$$, $collectConflictsWithin$$, $fieldsConflictMessage$$), $fieldsConflictMessage$$ = 0; $fieldsConflictMessage$$ < $findConflictsWithinSelectionSet$$.length; $fieldsConflictMessage$$++) {
          $collectConflictsBetweenFieldsAndFragment$$($exports$$, $require$$, $reasonMessage$$, $findConflict$$, $collectConflictsBetweenFragments$$, $_find$jscomp$4_global$$, $collectConflictsWithin$$, $findConflictsWithinSelectionSet$$[$fieldsConflictMessage$$]);
        }
      }
    }
  }
  function $collectConflictsBetweenFragments$$($exports$$, $require$$, $reasonMessage$$, $findConflict$$, $_find$jscomp$4_global$$, $collectConflictsWithin$$, $fieldsConflictMessage$$) {
    if ($collectConflictsWithin$$ !== $fieldsConflictMessage$$ && !$findConflict$$.has($collectConflictsWithin$$, $fieldsConflictMessage$$, $_find$jscomp$4_global$$)) {
      $findConflict$$.add($collectConflictsWithin$$, $fieldsConflictMessage$$, $_find$jscomp$4_global$$);
      var $findConflictsWithinSelectionSet$$ = $exports$$.getFragment($collectConflictsWithin$$), $collectConflictsBetweenFieldsAndFragment$$ = $exports$$.getFragment($fieldsConflictMessage$$);
      if ($findConflictsWithinSelectionSet$$ && $collectConflictsBetweenFieldsAndFragment$$) {
        $findConflictsWithinSelectionSet$$ = $getReferencedFieldsAndFragmentNames$$($exports$$, $reasonMessage$$, $findConflictsWithinSelectionSet$$);
        var $conflicts$$ = $findConflictsWithinSelectionSet$$[0];
        $findConflictsWithinSelectionSet$$ = $findConflictsWithinSelectionSet$$[1];
        var $PairSet$$ = $getReferencedFieldsAndFragmentNames$$($exports$$, $reasonMessage$$, $collectConflictsBetweenFieldsAndFragment$$);
        $collectConflictsBetweenFieldsAndFragment$$ = $PairSet$$[1];
        $collectConflictsBetween$$($exports$$, $require$$, $reasonMessage$$, $findConflict$$, $_find$jscomp$4_global$$, $conflicts$$, $PairSet$$[0]);
        for ($conflicts$$ = 0; $conflicts$$ < $collectConflictsBetweenFieldsAndFragment$$.length; $conflicts$$++) {
          $collectConflictsBetweenFragments$$($exports$$, $require$$, $reasonMessage$$, $findConflict$$, $_find$jscomp$4_global$$, $collectConflictsWithin$$, $collectConflictsBetweenFieldsAndFragment$$[$conflicts$$]);
        }
        for ($collectConflictsWithin$$ = 0; $collectConflictsWithin$$ < $findConflictsWithinSelectionSet$$.length; $collectConflictsWithin$$++) {
          $collectConflictsBetweenFragments$$($exports$$, $require$$, $reasonMessage$$, $findConflict$$, $_find$jscomp$4_global$$, $findConflictsWithinSelectionSet$$[$collectConflictsWithin$$], $fieldsConflictMessage$$);
        }
      }
    }
  }
  function $collectConflictsWithin$$($exports$$, $require$$, $reasonMessage$$, $collectConflictsBetweenFragments$$, $_find$jscomp$4_global$$) {
    Object.keys($_find$jscomp$4_global$$).forEach(function($collectConflictsWithin$$) {
      var $fieldsConflictMessage$$ = $_find$jscomp$4_global$$[$collectConflictsWithin$$];
      if (1 < $fieldsConflictMessage$$.length) {
        for (var $findConflictsWithinSelectionSet$$ = 0; $findConflictsWithinSelectionSet$$ < $fieldsConflictMessage$$.length; $findConflictsWithinSelectionSet$$++) {
          for (var $collectConflictsBetweenFieldsAndFragment$$ = $findConflictsWithinSelectionSet$$ + 1; $collectConflictsBetweenFieldsAndFragment$$ < $fieldsConflictMessage$$.length; $collectConflictsBetweenFieldsAndFragment$$++) {
            var $conflicts$$ = $findConflict$$($exports$$, $reasonMessage$$, $collectConflictsBetweenFragments$$, !1, $collectConflictsWithin$$, $fieldsConflictMessage$$[$findConflictsWithinSelectionSet$$], $fieldsConflictMessage$$[$collectConflictsBetweenFieldsAndFragment$$]);
            $conflicts$$ && $require$$.push($conflicts$$);
          }
        }
      }
    });
  }
  function $collectConflictsBetween$$($exports$$, $require$$, $reasonMessage$$, $collectConflictsBetweenFragments$$, $_find$jscomp$4_global$$, $collectConflictsWithin$$, $fieldsConflictMessage$$) {
    Object.keys($collectConflictsWithin$$).forEach(function($findConflictsWithinSelectionSet$$) {
      var $collectConflictsBetweenFieldsAndFragment$$ = $fieldsConflictMessage$$[$findConflictsWithinSelectionSet$$];
      if ($collectConflictsBetweenFieldsAndFragment$$) {
        for (var $conflicts$$ = $collectConflictsWithin$$[$findConflictsWithinSelectionSet$$], $collectConflictsBetween$$ = 0; $collectConflictsBetween$$ < $conflicts$$.length; $collectConflictsBetween$$++) {
          for (var $PairSet$$ = 0; $PairSet$$ < $collectConflictsBetweenFieldsAndFragment$$.length; $PairSet$$++) {
            var $_typeFromAST$$ = $findConflict$$($exports$$, $reasonMessage$$, $collectConflictsBetweenFragments$$, $_find$jscomp$4_global$$, $findConflictsWithinSelectionSet$$, $conflicts$$[$collectConflictsBetween$$], $collectConflictsBetweenFieldsAndFragment$$[$PairSet$$]);
            $_typeFromAST$$ && $require$$.push($_typeFromAST$$);
          }
        }
      }
    });
  }
  function $findConflict$$($exports$$, $require$$, $reasonMessage$$, $findConflict$$, $_find$jscomp$4_global$$, $collectConflictsWithin$$, $fieldsConflictMessage$$) {
    var $findConflictsWithinSelectionSet$$ = $collectConflictsWithin$$[0], $cachedFieldsAndFragmentNames$$ = $collectConflictsWithin$$[1], $PairSet$$ = $collectConflictsWithin$$[2], $_typeFromAST$$ = $fieldsConflictMessage$$[0];
    $collectConflictsWithin$$ = $fieldsConflictMessage$$[1];
    $fieldsConflictMessage$$ = $fieldsConflictMessage$$[2];
    $findConflict$$ = $findConflict$$ || $findConflictsWithinSelectionSet$$ !== $_typeFromAST$$ && (0, $_definition$$.isObjectType)($findConflictsWithinSelectionSet$$) && (0, $_definition$$.isObjectType)($_typeFromAST$$);
    $findConflictsWithinSelectionSet$$ = $PairSet$$ && $PairSet$$.type;
    $PairSet$$ = $fieldsConflictMessage$$ && $fieldsConflictMessage$$.type;
    if (!$findConflict$$) {
      $fieldsConflictMessage$$ = $cachedFieldsAndFragmentNames$$.name.value;
      $_typeFromAST$$ = $collectConflictsWithin$$.name.value;
      if ($fieldsConflictMessage$$ !== $_typeFromAST$$) {
        return [[$_find$jscomp$4_global$$, $fieldsConflictMessage$$ + " and " + $_typeFromAST$$ + " are different fields"], [$cachedFieldsAndFragmentNames$$], [$collectConflictsWithin$$]];
      }
      if (!$sameArguments$$($cachedFieldsAndFragmentNames$$.arguments || [], $collectConflictsWithin$$.arguments || [])) {
        return [[$_find$jscomp$4_global$$, "they have differing arguments"], [$cachedFieldsAndFragmentNames$$], [$collectConflictsWithin$$]];
      }
    }
    if ($findConflictsWithinSelectionSet$$ && $PairSet$$ && $doTypesConflict$$($findConflictsWithinSelectionSet$$, $PairSet$$)) {
      return [[$_find$jscomp$4_global$$, "they return conflicting types " + String($findConflictsWithinSelectionSet$$) + " and " + String($PairSet$$)], [$cachedFieldsAndFragmentNames$$], [$collectConflictsWithin$$]];
    }
    $fieldsConflictMessage$$ = $cachedFieldsAndFragmentNames$$.selectionSet;
    $_typeFromAST$$ = $collectConflictsWithin$$.selectionSet;
    if ($fieldsConflictMessage$$ && $_typeFromAST$$) {
      var $getReferencedFieldsAndFragmentNames$$ = (0, $_definition$$.getNamedType)($findConflictsWithinSelectionSet$$), $context$$ = (0, $_definition$$.getNamedType)($PairSet$$);
      $findConflictsWithinSelectionSet$$ = [];
      $PairSet$$ = $getFieldsAndFragmentNames$$($exports$$, $require$$, $getReferencedFieldsAndFragmentNames$$, $fieldsConflictMessage$$);
      $fieldsConflictMessage$$ = $PairSet$$[0];
      $PairSet$$ = $PairSet$$[1];
      $_typeFromAST$$ = $getFieldsAndFragmentNames$$($exports$$, $require$$, $context$$, $_typeFromAST$$);
      $context$$ = $_typeFromAST$$[0];
      $_typeFromAST$$ = $_typeFromAST$$[1];
      $collectConflictsBetween$$($exports$$, $findConflictsWithinSelectionSet$$, $require$$, $reasonMessage$$, $findConflict$$, $fieldsConflictMessage$$, $context$$);
      if (0 !== $_typeFromAST$$.length) {
        $getReferencedFieldsAndFragmentNames$$ = Object.create(null);
        for (var $_collectFieldsAndFragmentNames$$ = 0; $_collectFieldsAndFragmentNames$$ < $_typeFromAST$$.length; $_collectFieldsAndFragmentNames$$++) {
          $collectConflictsBetweenFieldsAndFragment$$($exports$$, $findConflictsWithinSelectionSet$$, $require$$, $getReferencedFieldsAndFragmentNames$$, $reasonMessage$$, $findConflict$$, $fieldsConflictMessage$$, $_typeFromAST$$[$_collectFieldsAndFragmentNames$$]);
        }
      }
      if (0 !== $PairSet$$.length) {
        for ($fieldsConflictMessage$$ = Object.create(null), $getReferencedFieldsAndFragmentNames$$ = 0; $getReferencedFieldsAndFragmentNames$$ < $PairSet$$.length; $getReferencedFieldsAndFragmentNames$$++) {
          $collectConflictsBetweenFieldsAndFragment$$($exports$$, $findConflictsWithinSelectionSet$$, $require$$, $fieldsConflictMessage$$, $reasonMessage$$, $findConflict$$, $context$$, $PairSet$$[$getReferencedFieldsAndFragmentNames$$]);
        }
      }
      for ($fieldsConflictMessage$$ = 0; $fieldsConflictMessage$$ < $PairSet$$.length; $fieldsConflictMessage$$++) {
        for ($context$$ = 0; $context$$ < $_typeFromAST$$.length; $context$$++) {
          $collectConflictsBetweenFragments$$($exports$$, $findConflictsWithinSelectionSet$$, $require$$, $reasonMessage$$, $findConflict$$, $PairSet$$[$fieldsConflictMessage$$], $_typeFromAST$$[$context$$]);
        }
      }
      return $subfieldConflicts$$($findConflictsWithinSelectionSet$$, $_find$jscomp$4_global$$, $cachedFieldsAndFragmentNames$$, $collectConflictsWithin$$);
    }
  }
  function $sameArguments$$($exports$$, $require$$) {
    return $exports$$.length !== $require$$.length ? !1 : $exports$$.every(function($exports$$) {
      var $reasonMessage$$ = (0, $_find2$$.default)($require$$, function($require$$) {
        return $require$$.name.value === $exports$$.name.value;
      });
      return $reasonMessage$$ ? $sameValue$$($exports$$.value, $reasonMessage$$.value) : !1;
    });
  }
  function $sameValue$$($exports$$, $require$$) {
    return !$exports$$ && !$require$$ || (0, $_printer$$.print)($exports$$) === (0, $_printer$$.print)($require$$);
  }
  function $doTypesConflict$$($exports$$, $require$$) {
    return (0, $_definition$$.isListType)($exports$$) ? (0, $_definition$$.isListType)($require$$) ? $doTypesConflict$$($exports$$.ofType, $require$$.ofType) : !0 : (0, $_definition$$.isListType)($require$$) ? !0 : (0, $_definition$$.isNonNullType)($exports$$) ? (0, $_definition$$.isNonNullType)($require$$) ? $doTypesConflict$$($exports$$.ofType, $require$$.ofType) : !0 : (0, $_definition$$.isNonNullType)($require$$) ? !0 : (0, $_definition$$.isLeafType)($exports$$) || (0, $_definition$$.isLeafType)($require$$) ? 
    $exports$$ !== $require$$ : !1;
  }
  function $getFieldsAndFragmentNames$$($exports$$, $require$$, $reasonMessage$$, $findConflict$$) {
    var $collectConflictsBetweenFragments$$ = $require$$.get($findConflict$$);
    if (!$collectConflictsBetweenFragments$$) {
      $collectConflictsBetweenFragments$$ = Object.create(null);
      var $_find$jscomp$4_global$$ = Object.create(null);
      $_collectFieldsAndFragmentNames$$($exports$$, $reasonMessage$$, $findConflict$$, $collectConflictsBetweenFragments$$, $_find$jscomp$4_global$$);
      $collectConflictsBetweenFragments$$ = [$collectConflictsBetweenFragments$$, Object.keys($_find$jscomp$4_global$$)];
      $require$$.set($findConflict$$, $collectConflictsBetweenFragments$$);
    }
    return $collectConflictsBetweenFragments$$;
  }
  function $getReferencedFieldsAndFragmentNames$$($exports$$, $require$$, $reasonMessage$$) {
    var $findConflict$$ = $require$$.get($reasonMessage$$.selectionSet);
    if ($findConflict$$) {
      return $findConflict$$;
    }
    $findConflict$$ = (0, $_typeFromAST$$.typeFromAST)($exports$$.getSchema(), $reasonMessage$$.typeCondition);
    return $getFieldsAndFragmentNames$$($exports$$, $require$$, $findConflict$$, $reasonMessage$$.selectionSet);
  }
  function $_collectFieldsAndFragmentNames$$($exports$$, $require$$, $reasonMessage$$, $findConflict$$, $collectConflictsBetweenFragments$$) {
    for (var $_find$jscomp$4_global$$ = 0; $_find$jscomp$4_global$$ < $reasonMessage$$.selections.length; $_find$jscomp$4_global$$++) {
      var $collectConflictsWithin$$ = $reasonMessage$$.selections[$_find$jscomp$4_global$$];
      switch($collectConflictsWithin$$.kind) {
        case $_kinds$$.Kind.FIELD:
          var $fieldsConflictMessage$$ = $collectConflictsWithin$$.name.value, $findConflictsWithinSelectionSet$$ = void 0;
          if ((0, $_definition$$.isObjectType)($require$$) || (0, $_definition$$.isInterfaceType)($require$$)) {
            $findConflictsWithinSelectionSet$$ = $require$$.getFields()[$fieldsConflictMessage$$];
          }
          $fieldsConflictMessage$$ = $collectConflictsWithin$$.alias ? $collectConflictsWithin$$.alias.value : $fieldsConflictMessage$$;
          $findConflict$$[$fieldsConflictMessage$$] || ($findConflict$$[$fieldsConflictMessage$$] = []);
          $findConflict$$[$fieldsConflictMessage$$].push([$require$$, $collectConflictsWithin$$, $findConflictsWithinSelectionSet$$]);
          break;
        case $_kinds$$.Kind.FRAGMENT_SPREAD:
          $collectConflictsBetweenFragments$$[$collectConflictsWithin$$.name.value] = !0;
          break;
        case $_kinds$$.Kind.INLINE_FRAGMENT:
          $findConflictsWithinSelectionSet$$ = ($findConflictsWithinSelectionSet$$ = $collectConflictsWithin$$.typeCondition) ? (0, $_typeFromAST$$.typeFromAST)($exports$$.getSchema(), $findConflictsWithinSelectionSet$$) : $require$$, $_collectFieldsAndFragmentNames$$($exports$$, $findConflictsWithinSelectionSet$$, $collectConflictsWithin$$.selectionSet, $findConflict$$, $collectConflictsBetweenFragments$$);
      }
    }
  }
  function $subfieldConflicts$$($exports$$, $require$$, $reasonMessage$$, $findConflict$$) {
    if (0 < $exports$$.length) {
      return [[$require$$, $exports$$.map(function($exports$$) {
        return $exports$$[0];
      })], $exports$$.reduce(function($exports$$, $require$$) {
        return $exports$$.concat($require$$[1]);
      }, [$reasonMessage$$]), $exports$$.reduce(function($exports$$, $require$$) {
        return $exports$$.concat($require$$[2]);
      }, [$findConflict$$])];
    }
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.fieldsConflictMessage = $fieldsConflictMessage$$;
  $exports$$.OverlappingFieldsCanBeMerged = function($exports$$) {
    var $require$$ = new $PairSet$$, $reasonMessage$$ = new Map;
    return {SelectionSet:function($findConflict$$) {
      $findConflictsWithinSelectionSet$$($exports$$, $reasonMessage$$, $require$$, $exports$$.getParentType(), $findConflict$$).forEach(function($require$$) {
        var $reasonMessage$$ = $require$$[0], $findConflict$$ = $require$$[1];
        $require$$ = $require$$[2];
        return $exports$$.reportError(new $_error$$.GraphQLError($fieldsConflictMessage$$($reasonMessage$$[0], $reasonMessage$$[1]), $findConflict$$.concat($require$$)));
      });
    }};
  };
  var $_error$$ = $require$$("module$node_modules$graphql$error$index"), $_find2$$ = ($_find$jscomp$4_global$$ = $require$$("module$node_modules$graphql$jsutils$find")) && $_find$jscomp$4_global$$.__esModule ? $_find$jscomp$4_global$$ : {default:$_find$jscomp$4_global$$}, $_kinds$$ = $require$$("module$node_modules$graphql$language$kinds"), $_printer$$ = $require$$("module$node_modules$graphql$language$printer"), $_definition$$ = $require$$("module$node_modules$graphql$type$definition"), $_typeFromAST$$ = 
  $require$$("module$node_modules$graphql$utilities$typeFromAST"), $PairSet$$ = function() {
    function $exports$$() {
      if (!(this instanceof $exports$$)) {
        throw new TypeError("Cannot call a class as a function");
      }
      this._data = Object.create(null);
    }
    $exports$$.prototype.has = function($exports$$, $require$$, $reasonMessage$$) {
      $require$$ = ($exports$$ = this._data[$exports$$]) && $exports$$[$require$$];
      return void 0 === $require$$ ? !1 : !1 === $reasonMessage$$ ? !1 === $require$$ : !0;
    };
    $exports$$.prototype.add = function($exports$$, $require$$, $reasonMessage$$) {
      var $findConflict$$ = this._data, $collectConflictsBetweenFragments$$ = $findConflict$$[$exports$$];
      $collectConflictsBetweenFragments$$ || ($collectConflictsBetweenFragments$$ = Object.create(null), $findConflict$$[$exports$$] = $collectConflictsBetweenFragments$$);
      $collectConflictsBetweenFragments$$[$require$$] = $reasonMessage$$;
      $findConflict$$ = this._data;
      $collectConflictsBetweenFragments$$ = $findConflict$$[$require$$];
      $collectConflictsBetweenFragments$$ || ($collectConflictsBetweenFragments$$ = Object.create(null), $findConflict$$[$require$$] = $collectConflictsBetweenFragments$$);
      $collectConflictsBetweenFragments$$[$exports$$] = $reasonMessage$$;
    };
    return $exports$$;
  }();
};
