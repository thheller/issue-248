shadow$provide.module$node_modules$graphql$type$schema = function($_find__instanceOf$jscomp$2__invariant$jscomp$2_global$$, $process$$, $_objectValues$jscomp$2_require$$, $module$$, $exports$$) {
  function $_interopRequireDefault$$($exports$$) {
    return $exports$$ && $exports$$.__esModule ? $exports$$ : {default:$exports$$};
  }
  function $typeMapReducer$$($exports$$, $_objectValues$jscomp$2_require$$) {
    if (!$_objectValues$jscomp$2_require$$) {
      return $exports$$;
    }
    if ((0, $_definition$$.isWrappingType)($_objectValues$jscomp$2_require$$)) {
      return $typeMapReducer$$($exports$$, $_objectValues$jscomp$2_require$$.ofType);
    }
    if ($exports$$[$_objectValues$jscomp$2_require$$.name]) {
      return $exports$$[$_objectValues$jscomp$2_require$$.name] !== $_objectValues$jscomp$2_require$$ ? (0, $_invariant2$$.default)(0, "Schema must contain unique named types but contains multiple " + ('types named "' + $_objectValues$jscomp$2_require$$.name + '".')) : void 0, $exports$$;
    }
    $exports$$[$_objectValues$jscomp$2_require$$.name] = $_objectValues$jscomp$2_require$$;
    var $_find2$$ = $exports$$;
    (0, $_definition$$.isUnionType)($_objectValues$jscomp$2_require$$) && ($_find2$$ = $_objectValues$jscomp$2_require$$.getTypes().reduce($typeMapReducer$$, $_find2$$));
    (0, $_definition$$.isObjectType)($_objectValues$jscomp$2_require$$) && ($_find2$$ = $_objectValues$jscomp$2_require$$.getInterfaces().reduce($typeMapReducer$$, $_find2$$));
    ((0, $_definition$$.isObjectType)($_objectValues$jscomp$2_require$$) || (0, $_definition$$.isInterfaceType)($_objectValues$jscomp$2_require$$)) && (0, $_objectValues2$$.default)($_objectValues$jscomp$2_require$$.getFields()).forEach(function($exports$$) {
      $exports$$.args && ($_find2$$ = $exports$$.args.map(function($exports$$) {
        return $exports$$.type;
      }).reduce($typeMapReducer$$, $_find2$$));
      $_find2$$ = $typeMapReducer$$($_find2$$, $exports$$.type);
    });
    (0, $_definition$$.isInputObjectType)($_objectValues$jscomp$2_require$$) && (0, $_objectValues2$$.default)($_objectValues$jscomp$2_require$$.getFields()).forEach(function($exports$$) {
      $_find2$$ = $typeMapReducer$$($_find2$$, $exports$$.type);
    });
    return $_find2$$;
  }
  function $typeMapDirectiveReducer$$($exports$$, $_objectValues$jscomp$2_require$$) {
    return (0, $_directives$$.isDirective)($_objectValues$jscomp$2_require$$) ? $_objectValues$jscomp$2_require$$.args.reduce(function($exports$$, $_objectValues$jscomp$2_require$$) {
      return $typeMapReducer$$($exports$$, $_objectValues$jscomp$2_require$$.type);
    }, $exports$$) : $exports$$;
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.GraphQLSchema = void 0;
  var $_typeof$$ = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function($exports$$) {
    return typeof $exports$$;
  } : function($exports$$) {
    return $exports$$ && "function" === typeof Symbol && $exports$$.constructor === Symbol && $exports$$ !== Symbol.prototype ? "symbol" : typeof $exports$$;
  };
  $exports$$.isSchema = function($exports$$) {
    return (0, $_instanceOf2$$.default)($exports$$, $GraphQLSchema$$);
  };
  var $_definition$$ = $_objectValues$jscomp$2_require$$("module$node_modules$graphql$type$definition"), $_directives$$ = $_objectValues$jscomp$2_require$$("module$node_modules$graphql$type$directives"), $_introspection$$ = $_objectValues$jscomp$2_require$$("module$node_modules$graphql$type$introspection");
  $_find__instanceOf$jscomp$2__invariant$jscomp$2_global$$ = $_objectValues$jscomp$2_require$$("module$node_modules$graphql$jsutils$find");
  var $_find2$$ = $_interopRequireDefault$$($_find__instanceOf$jscomp$2__invariant$jscomp$2_global$$);
  $_find__instanceOf$jscomp$2__invariant$jscomp$2_global$$ = $_objectValues$jscomp$2_require$$("module$node_modules$graphql$jsutils$instanceOf");
  var $_instanceOf2$$ = $_interopRequireDefault$$($_find__instanceOf$jscomp$2__invariant$jscomp$2_global$$);
  $_find__instanceOf$jscomp$2__invariant$jscomp$2_global$$ = $_objectValues$jscomp$2_require$$("module$node_modules$graphql$jsutils$invariant");
  var $_invariant2$$ = $_interopRequireDefault$$($_find__instanceOf$jscomp$2__invariant$jscomp$2_global$$);
  $_objectValues$jscomp$2_require$$ = $_objectValues$jscomp$2_require$$("module$node_modules$graphql$jsutils$objectValues");
  var $_objectValues2$$ = $_interopRequireDefault$$($_objectValues$jscomp$2_require$$), $GraphQLSchema$$ = $exports$$.GraphQLSchema = function() {
    function $exports$$($_objectValues$jscomp$2_require$$) {
      var $_find2$$ = this;
      if (!(this instanceof $exports$$)) {
        throw new TypeError("Cannot call a class as a function");
      }
      $_objectValues$jscomp$2_require$$ && $_objectValues$jscomp$2_require$$.assumeValid ? this.__validationErrors = [] : ("object" !== ("undefined" === typeof $_objectValues$jscomp$2_require$$ ? "undefined" : $_typeof$$($_objectValues$jscomp$2_require$$)) ? (0, $_invariant2$$.default)(0, "Must provide configuration object.") : void 0, $_objectValues$jscomp$2_require$$.types && !Array.isArray($_objectValues$jscomp$2_require$$.types) ? (0, $_invariant2$$.default)(0, '"types" must be Array if provided but got: ' + 
      String($_objectValues$jscomp$2_require$$.types) + ".") : void 0, $_objectValues$jscomp$2_require$$.directives && !Array.isArray($_objectValues$jscomp$2_require$$.directives) ? (0, $_invariant2$$.default)(0, '"directives" must be Array if provided but got: ' + (String($_objectValues$jscomp$2_require$$.directives) + ".")) : void 0, $_objectValues$jscomp$2_require$$.allowedLegacyNames && !Array.isArray($_objectValues$jscomp$2_require$$.allowedLegacyNames) ? (0, $_invariant2$$.default)(0, '"allowedLegacyNames" must be Array if provided but got: ' + 
      (String($_objectValues$jscomp$2_require$$.allowedLegacyNames) + ".")) : void 0);
      this.__allowedLegacyNames = $_objectValues$jscomp$2_require$$.allowedLegacyNames;
      this._queryType = $_objectValues$jscomp$2_require$$.query;
      this._mutationType = $_objectValues$jscomp$2_require$$.mutation;
      this._subscriptionType = $_objectValues$jscomp$2_require$$.subscription;
      this._directives = $_objectValues$jscomp$2_require$$.directives || $_directives$$.specifiedDirectives;
      this.astNode = $_objectValues$jscomp$2_require$$.astNode;
      var $_instanceOf2$$ = [this.getQueryType(), this.getMutationType(), this.getSubscriptionType(), $_introspection$$.__Schema];
      ($_objectValues$jscomp$2_require$$ = $_objectValues$jscomp$2_require$$.types) && ($_instanceOf2$$ = $_instanceOf2$$.concat($_objectValues$jscomp$2_require$$));
      $_objectValues$jscomp$2_require$$ = Object.create(null);
      $_objectValues$jscomp$2_require$$ = $_instanceOf2$$.reduce($typeMapReducer$$, $_objectValues$jscomp$2_require$$);
      this._typeMap = $_objectValues$jscomp$2_require$$ = this._directives.reduce($typeMapDirectiveReducer$$, $_objectValues$jscomp$2_require$$);
      this._implementations = Object.create(null);
      Object.keys(this._typeMap).forEach(function($exports$$) {
        var $_objectValues$jscomp$2_require$$ = $_find2$$._typeMap[$exports$$];
        (0, $_definition$$.isObjectType)($_objectValues$jscomp$2_require$$) && $_objectValues$jscomp$2_require$$.getInterfaces().forEach(function($exports$$) {
          if ((0, $_definition$$.isInterfaceType)($exports$$)) {
            var $typeMapReducer$$ = $_find2$$._implementations[$exports$$.name];
            $typeMapReducer$$ ? $typeMapReducer$$.push($_objectValues$jscomp$2_require$$) : $_find2$$._implementations[$exports$$.name] = [$_objectValues$jscomp$2_require$$];
          }
        });
      });
    }
    $exports$$.prototype.getQueryType = function() {
      return this._queryType;
    };
    $exports$$.prototype.getMutationType = function() {
      return this._mutationType;
    };
    $exports$$.prototype.getSubscriptionType = function() {
      return this._subscriptionType;
    };
    $exports$$.prototype.getTypeMap = function() {
      return this._typeMap;
    };
    $exports$$.prototype.getType = function($exports$$) {
      return this.getTypeMap()[$exports$$];
    };
    $exports$$.prototype.getPossibleTypes = function($exports$$) {
      return (0, $_definition$$.isUnionType)($exports$$) ? $exports$$.getTypes() : this._implementations[$exports$$.name];
    };
    $exports$$.prototype.isPossibleType = function($exports$$, $_objectValues$jscomp$2_require$$) {
      var $_definition$$ = this._possibleTypeMap;
      $_definition$$ || (this._possibleTypeMap = $_definition$$ = Object.create(null));
      if (!$_definition$$[$exports$$.name]) {
        var $_find2$$ = this.getPossibleTypes($exports$$);
        Array.isArray($_find2$$) ? void 0 : (0, $_invariant2$$.default)(0, "Could not find possible implementing types for " + $exports$$.name + " in schema. Check that schema.types is defined and is an array of all possible types in the schema.");
        $_definition$$[$exports$$.name] = $_find2$$.reduce(function($exports$$, $_objectValues$jscomp$2_require$$) {
          return $exports$$[$_objectValues$jscomp$2_require$$.name] = !0, $exports$$;
        }, Object.create(null));
      }
      return !!$_definition$$[$exports$$.name][$_objectValues$jscomp$2_require$$.name];
    };
    $exports$$.prototype.getDirectives = function() {
      return this._directives;
    };
    $exports$$.prototype.getDirective = function($exports$$) {
      return (0, $_find2$$.default)(this.getDirectives(), function($_objectValues$jscomp$2_require$$) {
        return $_objectValues$jscomp$2_require$$.name === $exports$$;
      });
    };
    return $exports$$;
  }();
};
