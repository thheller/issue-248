shadow$provide.module$node_modules$graphql$language$lexer = function($_blockStringValue_global$$, $process$$, $require$$, $module$$, $exports$$) {
  function $advanceLexer$$() {
    this.lastToken = this.token;
    return this.token = this.lookahead();
  }
  function $lookahead$$() {
    var $exports$$ = this.token;
    if ($exports$$.kind !== $TokenKind$$.EOF) {
      do {
        $exports$$ = $exports$$.next || ($exports$$.next = $readToken$$(this, $exports$$));
      } while ($exports$$.kind === $TokenKind$$.COMMENT);
    }
    return $exports$$;
  }
  function $Tok$$($exports$$, $require$$, $_error$$, $lookahead$$, $readToken$$, $readDigits$$, $Tok$$) {
    this.kind = $exports$$;
    this.start = $require$$;
    this.end = $_error$$;
    this.line = $lookahead$$;
    this.column = $readToken$$;
    this.value = $Tok$$;
    this.prev = $readDigits$$;
    this.next = null;
  }
  function $printCharCode$$($exports$$) {
    return isNaN($exports$$) ? $TokenKind$$.EOF : 127 > $exports$$ ? JSON.stringify(String.fromCharCode($exports$$)) : '"\\u' + ("00" + $exports$$.toString(16).toUpperCase()).slice(-4) + '"';
  }
  function $readToken$$($exports$$, $require$$) {
    var $lookahead$$ = $exports$$.source, $readToken$$ = $lookahead$$.body, $_blockStringValue_global$$ = $readToken$$.length;
    var $advanceLexer$$ = $readToken$$.length;
    for (var $col_lexer$$ = $require$$.end; $col_lexer$$ < $advanceLexer$$;) {
      var $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = $charCodeAt$$.call($readToken$$, $col_lexer$$);
      if (9 === $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ || 32 === $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ || 44 === $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ || 65279 === $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$) {
        ++$col_lexer$$;
      } else {
        if (10 === $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$) {
          ++$col_lexer$$, ++$exports$$.line, $exports$$.lineStart = $col_lexer$$;
        } else {
          if (13 === $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$) {
            10 === $charCodeAt$$.call($readToken$$, $col_lexer$$ + 1) ? $col_lexer$$ += 2 : ++$col_lexer$$, ++$exports$$.line, $exports$$.lineStart = $col_lexer$$;
          } else {
            break;
          }
        }
      }
    }
    $advanceLexer$$ = $col_lexer$$;
    $col_lexer$$ = $exports$$.line;
    $exports$$ = 1 + $advanceLexer$$ - $exports$$.lineStart;
    if ($advanceLexer$$ >= $_blockStringValue_global$$) {
      return new $Tok$$($TokenKind$$.EOF, $_blockStringValue_global$$, $_blockStringValue_global$$, $col_lexer$$, $exports$$, $require$$);
    }
    $_blockStringValue_global$$ = $charCodeAt$$.call($readToken$$, $advanceLexer$$);
    if (32 > $_blockStringValue_global$$ && 9 !== $_blockStringValue_global$$ && 10 !== $_blockStringValue_global$$ && 13 !== $_blockStringValue_global$$) {
      throw (0, $_error$$.syntaxError)($lookahead$$, $advanceLexer$$, "Cannot contain the invalid character " + $printCharCode$$($_blockStringValue_global$$) + ".");
    }
    switch($_blockStringValue_global$$) {
      case 33:
        return new $Tok$$($TokenKind$$.BANG, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 35:
        $lookahead$$ = $lookahead$$.body;
        $_blockStringValue_global$$ = $advanceLexer$$;
        do {
          $readToken$$ = $charCodeAt$$.call($lookahead$$, ++$_blockStringValue_global$$);
        } while (null !== $readToken$$ && (31 < $readToken$$ || 9 === $readToken$$));
        return new $Tok$$($TokenKind$$.COMMENT, $advanceLexer$$, $_blockStringValue_global$$, $col_lexer$$, $exports$$, $require$$, $slice$$.call($lookahead$$, $advanceLexer$$ + 1, $_blockStringValue_global$$));
      case 36:
        return new $Tok$$($TokenKind$$.DOLLAR, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 38:
        return new $Tok$$($TokenKind$$.AMP, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 40:
        return new $Tok$$($TokenKind$$.PAREN_L, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 41:
        return new $Tok$$($TokenKind$$.PAREN_R, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 46:
        if (46 === $charCodeAt$$.call($readToken$$, $advanceLexer$$ + 1) && 46 === $charCodeAt$$.call($readToken$$, $advanceLexer$$ + 2)) {
          return new $Tok$$($TokenKind$$.SPREAD, $advanceLexer$$, $advanceLexer$$ + 3, $col_lexer$$, $exports$$, $require$$);
        }
        break;
      case 58:
        return new $Tok$$($TokenKind$$.COLON, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 61:
        return new $Tok$$($TokenKind$$.EQUALS, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 64:
        return new $Tok$$($TokenKind$$.AT, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 91:
        return new $Tok$$($TokenKind$$.BRACKET_L, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 93:
        return new $Tok$$($TokenKind$$.BRACKET_R, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 123:
        return new $Tok$$($TokenKind$$.BRACE_L, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 124:
        return new $Tok$$($TokenKind$$.PIPE, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 125:
        return new $Tok$$($TokenKind$$.BRACE_R, $advanceLexer$$, $advanceLexer$$ + 1, $col_lexer$$, $exports$$, $require$$);
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 95:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
        $lookahead$$ = $lookahead$$.body;
        $readToken$$ = $lookahead$$.length;
        $_blockStringValue_global$$ = $advanceLexer$$ + 1;
        for ($JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = 0; $_blockStringValue_global$$ !== $readToken$$ && null !== ($JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = $charCodeAt$$.call($lookahead$$, $_blockStringValue_global$$)) && (95 === $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ || 48 <= $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ && 
        57 >= $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ || 65 <= $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ && 90 >= $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ || 97 <= $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ && 122 >= $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$);) {
          ++$_blockStringValue_global$$;
        }
        return new $Tok$$($TokenKind$$.NAME, $advanceLexer$$, $_blockStringValue_global$$, $col_lexer$$, $exports$$, $require$$, $slice$$.call($lookahead$$, $advanceLexer$$, $_blockStringValue_global$$));
      case 45:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        $readToken$$ = $lookahead$$.body;
        $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = $advanceLexer$$;
        var $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ = !1;
        45 === $_blockStringValue_global$$ && ($_blockStringValue_global$$ = $charCodeAt$$.call($readToken$$, ++$JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$));
        if (48 === $_blockStringValue_global$$) {
          if ($_blockStringValue_global$$ = $charCodeAt$$.call($readToken$$, ++$JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$), 48 <= $_blockStringValue_global$$ && 57 >= $_blockStringValue_global$$) {
            throw (0, $_error$$.syntaxError)($lookahead$$, $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$, "Invalid number, unexpected digit after 0: " + $printCharCode$$($_blockStringValue_global$$) + ".");
          }
        } else {
          $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = $readDigits$$($lookahead$$, $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$, $_blockStringValue_global$$), $_blockStringValue_global$$ = $charCodeAt$$.call($readToken$$, $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$);
        }
        46 === $_blockStringValue_global$$ && ($code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ = !0, $_blockStringValue_global$$ = $charCodeAt$$.call($readToken$$, ++$JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$), $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = $readDigits$$($lookahead$$, $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$, 
        $_blockStringValue_global$$), $_blockStringValue_global$$ = $charCodeAt$$.call($readToken$$, $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$));
        if (69 === $_blockStringValue_global$$ || 101 === $_blockStringValue_global$$) {
          $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ = !0;
          $_blockStringValue_global$$ = $charCodeAt$$.call($readToken$$, ++$JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$);
          if (43 === $_blockStringValue_global$$ || 45 === $_blockStringValue_global$$) {
            $_blockStringValue_global$$ = $charCodeAt$$.call($readToken$$, ++$JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$);
          }
          $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = $readDigits$$($lookahead$$, $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$, $_blockStringValue_global$$);
        }
        return new $Tok$$($code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ ? $TokenKind$$.FLOAT : $TokenKind$$.INT, $advanceLexer$$, $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$, $col_lexer$$, $exports$$, $require$$, $slice$$.call($readToken$$, $advanceLexer$$, $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$));
      case 34:
        if (34 === $charCodeAt$$.call($readToken$$, $advanceLexer$$ + 1) && 34 === $charCodeAt$$.call($readToken$$, $advanceLexer$$ + 2)) {
          a: {
            $readToken$$ = $lookahead$$.body;
            $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = $_blockStringValue_global$$ = $advanceLexer$$ + 3;
            $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ = 0;
            for (var $a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$ = ""; $_blockStringValue_global$$ < $readToken$$.length && null !== ($code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ = $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$));) {
              if (34 === $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ && 34 === $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$ + 1) && 34 === $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$ + 2)) {
                $a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$ += $slice$$.call($readToken$$, $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$, $_blockStringValue_global$$);
                $require$$ = new $Tok$$($TokenKind$$.BLOCK_STRING, $advanceLexer$$, $_blockStringValue_global$$ + 3, $col_lexer$$, $exports$$, $require$$, (0, $_blockStringValue2$$.default)($a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$));
                break a;
              }
              if (32 > $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ && 9 !== $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ && 10 !== $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ && 13 !== $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$) {
                throw (0, $_error$$.syntaxError)($lookahead$$, $_blockStringValue_global$$, "Invalid character within String: " + $printCharCode$$($code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$) + ".");
              }
              92 === $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ && 34 === $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$ + 1) && 34 === $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$ + 2) && 34 === $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$ + 3) ? ($a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$ += $slice$$.call($readToken$$, $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$, 
              $_blockStringValue_global$$) + '"""', $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = $_blockStringValue_global$$ += 4) : ++$_blockStringValue_global$$;
            }
            throw (0, $_error$$.syntaxError)($lookahead$$, $_blockStringValue_global$$, "Unterminated string.");
          }
          return $require$$;
        }
        a: {
          $readToken$$ = $lookahead$$.body;
          $a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$ = $_blockStringValue_global$$ = $advanceLexer$$ + 1;
          $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = 0;
          for ($code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ = ""; $_blockStringValue_global$$ < $readToken$$.length && null !== ($JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$)) && 10 !== $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ && 13 !== $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$;) {
            if (34 === $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$) {
              $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ += $slice$$.call($readToken$$, $a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$, $_blockStringValue_global$$);
              $require$$ = new $Tok$$($TokenKind$$.STRING, $advanceLexer$$, $_blockStringValue_global$$ + 1, $col_lexer$$, $exports$$, $require$$, $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$);
              break a;
            }
            if (32 > $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ && 9 !== $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$) {
              throw (0, $_error$$.syntaxError)($lookahead$$, $_blockStringValue_global$$, "Invalid character within String: " + $printCharCode$$($JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$) + ".");
            }
            ++$_blockStringValue_global$$;
            if (92 === $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$) {
              $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ += $slice$$.call($readToken$$, $a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$, $_blockStringValue_global$$ - 1);
              $JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$ = $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$);
              switch($JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$) {
                case 34:
                  $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ += '"';
                  break;
                case 47:
                  $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ += "/";
                  break;
                case 92:
                  $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ += "\\";
                  break;
                case 98:
                  $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ += "\b";
                  break;
                case 102:
                  $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ += "\f";
                  break;
                case 110:
                  $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ += "\n";
                  break;
                case 114:
                  $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ += "\r";
                  break;
                case 116:
                  $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ += "\t";
                  break;
                case 117:
                  $a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$ = $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$ + 1);
                  var $b$$ = $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$ + 2), $c$$ = $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$ + 3), $d$$ = $charCodeAt$$.call($readToken$$, $_blockStringValue_global$$ + 4);
                  $a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$ = $char2hex$$($a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$) << 12 | $char2hex$$($b$$) << 8 | $char2hex$$($c$$) << 4 | $char2hex$$($d$$);
                  if (0 > $a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$) {
                    throw (0, $_error$$.syntaxError)($lookahead$$, $_blockStringValue_global$$, "Invalid character escape sequence: " + ("\\u" + $readToken$$.slice($_blockStringValue_global$$ + 1, $_blockStringValue_global$$ + 5) + "."));
                  }
                  $code$jscomp$inline_121_isFloat$jscomp$inline_111_value$$ += String.fromCharCode($a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$);
                  $_blockStringValue_global$$ += 4;
                  break;
                default:
                  throw (0, $_error$$.syntaxError)($lookahead$$, $_blockStringValue_global$$, "Invalid character escape sequence: \\" + String.fromCharCode($JSCompiler_inline_result$jscomp$10_JSCompiler_inline_result$jscomp$9_JSCompiler_temp_const$jscomp$5_prev$$) + ".");
              }
              ++$_blockStringValue_global$$;
              $a$jscomp$inline_362_charCode$jscomp$inline_134_chunkStart$jscomp$inline_131_rawValue$$ = $_blockStringValue_global$$;
            }
          }
          throw (0, $_error$$.syntaxError)($lookahead$$, $_blockStringValue_global$$, "Unterminated string.");
        }
        return $require$$;
    }
    $require$$ = (0, $_error$$.syntaxError);
    $col_lexer$$ = 39 === $_blockStringValue_global$$ ? "Unexpected single quote character ('), did you mean to use a double quote (\")?" : "Cannot parse the unexpected character " + $printCharCode$$($_blockStringValue_global$$) + ".";
    throw $require$$($lookahead$$, $advanceLexer$$, $col_lexer$$);
  }
  function $readDigits$$($exports$$, $require$$, $lookahead$$) {
    var $readToken$$ = $exports$$.body;
    if (48 <= $lookahead$$ && 57 >= $lookahead$$) {
      do {
        $lookahead$$ = $charCodeAt$$.call($readToken$$, ++$require$$);
      } while (48 <= $lookahead$$ && 57 >= $lookahead$$);
      return $require$$;
    }
    throw (0, $_error$$.syntaxError)($exports$$, $require$$, "Invalid number, expected digit but got: " + $printCharCode$$($lookahead$$) + ".");
  }
  function $char2hex$$($exports$$) {
    return 48 <= $exports$$ && 57 >= $exports$$ ? $exports$$ - 48 : 65 <= $exports$$ && 70 >= $exports$$ ? $exports$$ - 55 : 97 <= $exports$$ && 102 >= $exports$$ ? $exports$$ - 87 : -1;
  }
  Object.defineProperty($exports$$, "__esModule", {value:!0});
  $exports$$.TokenKind = void 0;
  $exports$$.createLexer = function($exports$$, $require$$) {
    var $_error$$ = new $Tok$$($TokenKind$$.SOF, 0, 0, 0, 0, null);
    return {source:$exports$$, options:$require$$, lastToken:$_error$$, token:$_error$$, line:1, lineStart:0, advance:$advanceLexer$$, lookahead:$lookahead$$};
  };
  $exports$$.getTokenDesc = function($exports$$) {
    var $require$$ = $exports$$.value;
    return $require$$ ? $exports$$.kind + ' "' + $require$$ + '"' : $exports$$.kind;
  };
  var $_error$$ = $require$$("module$node_modules$graphql$error$index"), $_blockStringValue2$$ = ($_blockStringValue_global$$ = $require$$("module$node_modules$graphql$language$blockStringValue")) && $_blockStringValue_global$$.__esModule ? $_blockStringValue_global$$ : {default:$_blockStringValue_global$$}, $TokenKind$$ = $exports$$.TokenKind = Object.freeze({SOF:"\x3cSOF\x3e", EOF:"\x3cEOF\x3e", BANG:"!", DOLLAR:"$", AMP:"\x26", PAREN_L:"(", PAREN_R:")", SPREAD:"...", COLON:":", EQUALS:"\x3d", 
  AT:"@", BRACKET_L:"[", BRACKET_R:"]", BRACE_L:"{", PIPE:"|", BRACE_R:"}", NAME:"Name", INT:"Int", FLOAT:"Float", STRING:"String", BLOCK_STRING:"BlockString", COMMENT:"Comment"}), $charCodeAt$$ = String.prototype.charCodeAt, $slice$$ = String.prototype.slice;
  $Tok$$.prototype.toJSON = $Tok$$.prototype.inspect = function() {
    return {kind:this.kind, value:this.value, line:this.line, column:this.column};
  };
};
